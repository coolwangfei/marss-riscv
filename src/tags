!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABRT_ERR	ide.c	49;"	d	file:
ABS_X	virtio.c	1392;"	d	file:
ABS_Y	virtio.c	1393;"	d	file:
ABS_Z	virtio.c	1394;"	d	file:
ACCESS_CODE	riscv_cpu.c	198;"	d	file:
ACCESS_READ	riscv_cpu.c	196;"	d	file:
ACCESS_WRITE	riscv_cpu.c	197;"	d	file:
ADDCARRY	slirp/cksum.c	44;"	d	file:
AES_BLOCK_SIZE	aes.h	28;"	d
AES_H	aes.h	25;"	d
AES_KEY	aes.h	/^typedef struct aes_key_st AES_KEY;$/;"	t	typeref:struct:aes_key_st
AES_MAXNR	aes.h	27;"	d
AES_cbc_encrypt	aes.c	/^void AES_cbc_encrypt(const unsigned char *in, unsigned char *out,$/;"	f
AES_decrypt	aes.c	/^void AES_decrypt(const unsigned char *in, unsigned char *out,$/;"	f
AES_encrypt	aes.c	/^void AES_encrypt(const unsigned char *in, unsigned char *out,$/;"	f
AES_set_decrypt_key	aes.c	/^int AES_set_decrypt_key(const unsigned char *userKey, const int bits,$/;"	f
AES_set_encrypt_key	aes.c	/^int AES_set_encrypt_key(const unsigned char *userKey, const int bits,$/;"	f
ALL_RW_PERMS	riscvsim/sim_params_stats.h	44;"	d
ARCHIVE_SIZE_MAX	fs_net.c	1707;"	d	file:
ARPOP_REPLY	slirp/slirp.c	544;"	d	file:
ARPOP_REQUEST	slirp/slirp.c	543;"	d	file:
ATOMIC_MASK	riscvsim/riscv_sim_macros.h	68;"	d
AUIPC_MASK	riscvsim/riscv_sim_macros.h	60;"	d
AUX_ACK	ps2.c	71;"	d	file:
AUX_DISABLE_DEV	ps2.c	68;"	d	file:
AUX_ENABLE_DEV	ps2.c	67;"	d	file:
AUX_GET_SCALE	ps2.c	59;"	d	file:
AUX_GET_TYPE	ps2.c	65;"	d	file:
AUX_POLL	ps2.c	61;"	d	file:
AUX_RESET	ps2.c	70;"	d	file:
AUX_RESET_WRAP	ps2.c	62;"	d	file:
AUX_SET_DEFAULT	ps2.c	69;"	d	file:
AUX_SET_REMOTE	ps2.c	64;"	d	file:
AUX_SET_RES	ps2.c	58;"	d	file:
AUX_SET_SAMPLE	ps2.c	66;"	d	file:
AUX_SET_SCALE11	ps2.c	56;"	d	file:
AUX_SET_SCALE21	ps2.c	57;"	d	file:
AUX_SET_STREAM	ps2.c	60;"	d	file:
AUX_SET_WRAP	ps2.c	63;"	d	file:
AdaptivePredictor	riscvsim/adaptive_predictor.h	/^typedef struct AdaptivePredictor$/;"	s
AdaptivePredictor	riscvsim/adaptive_predictor.h	/^} AdaptivePredictor;$/;"	t	typeref:struct:AdaptivePredictor
AsyncCallState	fs_wget.c	/^} AsyncCallState;$/;"	t	typeref:struct:__anon20	file:
BACKEND_MEM_ACCESS_QUEUE_SIZE	riscvsim/memory_controller.h	42;"	d
BBD_ERR	ide.c	54;"	d	file:
BF_MODE_RO	temu.c	/^    BF_MODE_RO,$/;"	e	enum:__anon34	file:
BF_MODE_RW	temu.c	/^    BF_MODE_RW,$/;"	e	enum:__anon34	file:
BF_MODE_SNAPSHOT	temu.c	/^    BF_MODE_SNAPSHOT,$/;"	e	enum:__anon34	file:
BIT_SIZE	riscvsim/riscv_sim_typedefs.h	39;"	d
BIT_SIZE	riscvsim/riscv_sim_typedefs.h	42;"	d
BLK_FMT	block_net.c	55;"	d	file:
BOOL	cutils.h	/^typedef int BOOL;$/;"	t
BOOTPClient	slirp/bootp.h	/^} BOOTPClient;$/;"	t	typeref:struct:__anon50
BOOTP_CLIENT	slirp/bootp.h	4;"	d
BOOTP_REPLY	slirp/bootp.h	7;"	d
BOOTP_REQUEST	slirp/bootp.h	6;"	d
BOOTP_SERVER	slirp/bootp.h	3;"	d
BOOTP_VENDOR_LEN	slirp/bootp.h	92;"	d
BPUResponsePkt	riscvsim/bpu.h	/^typedef struct BPUResponsePkt$/;"	s
BPUResponsePkt	riscvsim/bpu.h	/^} BPUResponsePkt;$/;"	t	typeref:struct:BPUResponsePkt
BPU_ALIAS_FUNC	riscvsim/sim_params_stats.h	/^enum BPU_ALIAS_FUNC$/;"	g
BPU_ALIAS_FUNC_AND	riscvsim/sim_params_stats.h	/^    BPU_ALIAS_FUNC_AND,$/;"	e	enum:BPU_ALIAS_FUNC
BPU_ALIAS_FUNC_NONE	riscvsim/sim_params_stats.h	/^    BPU_ALIAS_FUNC_NONE$/;"	e	enum:BPU_ALIAS_FUNC
BPU_ALIAS_FUNC_XOR	riscvsim/sim_params_stats.h	/^    BPU_ALIAS_FUNC_XOR,$/;"	e	enum:BPU_ALIAS_FUNC
BPU_HIT	riscvsim/adaptive_predictor.c	48;"	d	file:
BPU_HIT	riscvsim/riscv_sim_macros.h	133;"	d
BPU_MISS	riscvsim/adaptive_predictor.c	47;"	d	file:
BPU_MISS	riscvsim/riscv_sim_macros.h	132;"	d
BPU_TYPE	riscvsim/sim_params_stats.h	/^enum BPU_TYPE$/;"	g
BPU_TYPE_ADAPTIVE	riscvsim/sim_params_stats.h	/^    BPU_TYPE_ADAPTIVE$/;"	e	enum:BPU_TYPE
BPU_TYPE_BIMODAL	riscvsim/sim_params_stats.h	/^    BPU_TYPE_BIMODAL,$/;"	e	enum:BPU_TYPE
BRANCH_COND	riscvsim/riscv_sim_macros.h	45;"	d
BRANCH_FUNC_CALL	riscvsim/riscv_sim_macros.h	46;"	d
BRANCH_FUNC_RET	riscvsim/riscv_sim_macros.h	47;"	d
BRANCH_MASK	riscvsim/riscv_sim_macros.h	63;"	d
BRANCH_UNCOND	riscvsim/riscv_sim_macros.h	44;"	d
BTB_EVICT_POLICY	riscvsim/sim_params_stats.h	/^enum BTB_EVICT_POLICY$/;"	g
BTB_LRU_EVICT	riscvsim/sim_params_stats.h	/^    BTB_LRU_EVICT$/;"	e	enum:BTB_EVICT_POLICY
BTB_RANDOM_EVICT	riscvsim/sim_params_stats.h	/^    BTB_RANDOM_EVICT,$/;"	e	enum:BTB_EVICT_POLICY
BTN_GEAR_DOWN	virtio.c	1384;"	d	file:
BTN_GEAR_UP	virtio.c	1385;"	d	file:
BTN_LEFT	virtio.c	1381;"	d	file:
BTN_MIDDLE	virtio.c	1383;"	d	file:
BTN_RIGHT	virtio.c	1382;"	d	file:
BUSY_STAT	ide.c	44;"	d	file:
Bht	riscvsim/bht.h	/^typedef struct Bht$/;"	s
Bht	riscvsim/bht.h	/^} Bht;$/;"	t	typeref:struct:Bht
BhtEntry	riscvsim/bht.h	/^typedef struct BhtEntry$/;"	s
BhtEntry	riscvsim/bht.h	/^} BhtEntry;$/;"	t	typeref:struct:BhtEntry
BlockDevice	virtio.h	/^struct BlockDevice {$/;"	s
BlockDevice	virtio.h	/^typedef struct BlockDevice BlockDevice;$/;"	t	typeref:struct:BlockDevice
BlockDeviceCompletionFunc	virtio.h	/^typedef void BlockDeviceCompletionFunc(void *opaque, int ret);$/;"	t
BlockDeviceFile	temu.c	/^typedef struct BlockDeviceFile {$/;"	s	file:
BlockDeviceFile	temu.c	/^} BlockDeviceFile;$/;"	t	typeref:struct:BlockDeviceFile	file:
BlockDeviceHTTP	block_net.c	/^typedef struct BlockDeviceHTTP {$/;"	s	file:
BlockDeviceHTTP	block_net.c	/^} BlockDeviceHTTP;$/;"	t	typeref:struct:BlockDeviceHTTP	file:
BlockDeviceModeEnum	temu.c	/^} BlockDeviceModeEnum;$/;"	t	typeref:enum:__anon34	file:
BlockDirtyStatus	riscvsim/cache.h	/^typedef enum BlockDirtyStatus$/;"	g
BlockDirtyStatus	riscvsim/cache.h	/^} BlockDirtyStatus;$/;"	t	typeref:enum:BlockDirtyStatus
BlockRequest	virtio.c	/^} BlockRequest;$/;"	t	typeref:struct:__anon12	file:
BlockRequestHeader	virtio.c	/^} BlockRequestHeader;$/;"	t	typeref:struct:__anon13	file:
BlockStatus	riscvsim/cache.h	/^typedef enum BlockStatus$/;"	g
BlockStatus	riscvsim/cache.h	/^} BlockStatus;$/;"	t	typeref:enum:BlockStatus
BranchPredUnit	riscvsim/bpu.h	/^typedef struct BranchPredUnit$/;"	s
BranchPredUnit	riscvsim/bpu.h	/^} BranchPredUnit;$/;"	t	typeref:struct:BranchPredUnit
BranchTargetBuffer	riscvsim/btb.h	/^typedef struct BranchTargetBuffer$/;"	s
BranchTargetBuffer	riscvsim/btb.h	/^} BranchTargetBuffer;$/;"	t	typeref:struct:BranchTargetBuffer
BtbEntry	riscvsim/btb.h	/^typedef struct BtbEntry$/;"	s
BtbEntry	riscvsim/btb.h	/^} BtbEntry;$/;"	t	typeref:struct:BtbEntry
CACHE_EVICT_POLICY	riscvsim/sim_params_stats.h	/^enum CACHE_EVICT_POLICY$/;"	g
CACHE_LRU_EVICT	riscvsim/sim_params_stats.h	/^    CACHE_LRU_EVICT$/;"	e	enum:CACHE_EVICT_POLICY
CACHE_RANDOM_EVICT	riscvsim/sim_params_stats.h	/^    CACHE_RANDOM_EVICT,$/;"	e	enum:CACHE_EVICT_POLICY
CACHE_READ_ALLOC	riscvsim/sim_params_stats.h	/^    CACHE_READ_ALLOC,$/;"	e	enum:CACHE_READ_ALLOC_POLICY
CACHE_READ_ALLOC_POLICY	riscvsim/sim_params_stats.h	/^enum CACHE_READ_ALLOC_POLICY$/;"	g
CACHE_READ_NO_ALLOC	riscvsim/sim_params_stats.h	/^    CACHE_READ_NO_ALLOC$/;"	e	enum:CACHE_READ_ALLOC_POLICY
CACHE_WRITEBACK	riscvsim/sim_params_stats.h	/^    CACHE_WRITEBACK,$/;"	e	enum:CACHE_WRITE_POLICY
CACHE_WRITETHROUGH	riscvsim/sim_params_stats.h	/^    CACHE_WRITETHROUGH,$/;"	e	enum:CACHE_WRITE_POLICY
CACHE_WRITE_ALLOC	riscvsim/sim_params_stats.h	/^    CACHE_WRITE_ALLOC,$/;"	e	enum:CACHE_WRITE_ALLOC_POLICY
CACHE_WRITE_ALLOC_POLICY	riscvsim/sim_params_stats.h	/^enum CACHE_WRITE_ALLOC_POLICY$/;"	g
CACHE_WRITE_NO_ALLOC	riscvsim/sim_params_stats.h	/^    CACHE_WRITE_NO_ALLOC$/;"	e	enum:CACHE_WRITE_ALLOC_POLICY
CACHE_WRITE_POLICY	riscvsim/sim_params_stats.h	/^enum CACHE_WRITE_POLICY$/;"	g
CAUSE_BREAKPOINT	riscv_cpu_priv.h	59;"	d
CAUSE_FAULT_FETCH	riscv_cpu_priv.h	57;"	d
CAUSE_FAULT_LOAD	riscv_cpu_priv.h	61;"	d
CAUSE_FAULT_STORE	riscv_cpu_priv.h	63;"	d
CAUSE_FETCH_PAGE_FAULT	riscv_cpu_priv.h	68;"	d
CAUSE_HYPERVISOR_ECALL	riscv_cpu_priv.h	66;"	d
CAUSE_ILLEGAL_INSTRUCTION	riscv_cpu_priv.h	58;"	d
CAUSE_INTERRUPT	riscv_cpu_priv.h	73;"	d
CAUSE_LOAD_PAGE_FAULT	riscv_cpu_priv.h	69;"	d
CAUSE_MACHINE_ECALL	riscv_cpu_priv.h	67;"	d
CAUSE_MISALIGNED_FETCH	riscv_cpu_priv.h	56;"	d
CAUSE_MISALIGNED_LOAD	riscv_cpu_priv.h	60;"	d
CAUSE_MISALIGNED_STORE	riscv_cpu_priv.h	62;"	d
CAUSE_STORE_PAGE_FAULT	riscv_cpu_priv.h	70;"	d
CAUSE_SUPERVISOR_ECALL	riscv_cpu_priv.h	65;"	d
CAUSE_USER_ECALL	riscv_cpu_priv.h	64;"	d
CBLOCK_LOADED	block_net.c	/^    CBLOCK_LOADED,$/;"	e	enum:__anon8	file:
CBLOCK_LOADING	block_net.c	/^    CBLOCK_LOADING,$/;"	e	enum:__anon8	file:
CC	Makefile	/^CC=$(CROSS_PREFIX)gcc$/;"	m
CD	ide.c	58;"	d	file:
CFA_ERASE_SECTORS	ide.c	148;"	d	file:
CFA_REQ_EXT_ERROR_CODE	ide.c	71;"	d	file:
CFA_TRANSLATE_SECTOR	ide.c	132;"	d	file:
CFA_WRITE_MULTI_WO_ERASE	ide.c	158;"	d	file:
CFA_WRITE_SECT_WO_ERASE	ide.c	108;"	d	file:
CFLAGS	Makefile	/^CFLAGS=-O0 -Wall -g -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -MMD # wf from O2 to O0 for debug$/;"	m
CLINT_BASE_ADDR	riscv_machine.c	84;"	d	file:
CLINT_SIZE	riscv_machine.c	85;"	d	file:
COMMIT	riscvsim/riscv_sim_macros.h	84;"	d
CONFIG_EXT_C	riscv_cpu_priv.h	46;"	d
CONFIG_FS_NET	Makefile	/^CONFIG_FS_NET=y$/;"	m
CONFIG_SDL	Makefile	/^CONFIG_SDL=y$/;"	m
CONFIG_SLIRP	Makefile	/^CONFIG_SLIRP=y$/;"	m
CONFIG_XLEN	Makefile	/^CONFIG_XLEN=64$/;"	m
CONN_CANFRCV	slirp/slirp.c	236;"	d	file:
CONN_CANFSEND	slirp/slirp.c	235;"	d	file:
COPY_BUF_LEN	build_filelist.c	70;"	d	file:
CORE_TYPE	riscvsim/sim_params_stats.h	/^enum CORE_TYPE$/;"	g
CORE_TYPE_INCORE	riscvsim/sim_params_stats.h	/^    CORE_TYPE_INCORE,$/;"	e	enum:CORE_TYPE
CORE_TYPE_OOCORE	riscvsim/sim_params_stats.h	/^    CORE_TYPE_OOCORE$/;"	e	enum:CORE_TYPE
COUNTEREN_MASK	riscv_cpu.c	902;"	d	file:
CPUStage	riscvsim/common_core_utils.h	/^typedef struct CPUStage$/;"	s
CPUStage	riscvsim/common_core_utils.h	/^} CPUStage;$/;"	t	typeref:struct:CPUStage
CQ	riscvsim/circular_queue.h	/^} CQ;$/;"	t	typeref:struct:CircularQueue
CROSS_PREFIX	Makefile	/^CROSS_PREFIX=$/;"	m
CSR_MASK	riscvsim/riscv_sim_macros.h	67;"	d
CUTILS_H	cutils.h	25;"	d
C_NEXT_INSN	riscv_cpu_template.h	199;"	d
C_QUADRANT	riscv_cpu_template.h	186;"	d
C_QUADRANT0	riscvsim/riscv_sim_macros.h	50;"	d
C_QUADRANT1	riscvsim/riscv_sim_macros.h	51;"	d
C_QUADRANT2	riscvsim/riscv_sim_macros.h	52;"	d
Cache	riscvsim/cache.h	/^typedef struct Cache$/;"	s
Cache	riscvsim/cache.h	/^} Cache;$/;"	t	typeref:struct:Cache
CacheBlk	riscvsim/cache.h	/^typedef struct CacheBlk$/;"	s
CacheBlk	riscvsim/cache.h	/^} CacheBlk;$/;"	t	typeref:struct:CacheBlk
CacheEvictionPolicy	riscvsim/cache.h	/^typedef enum CacheEvictionPolicy$/;"	g
CacheEvictionPolicy	riscvsim/cache.h	/^} CacheEvictionPolicy;$/;"	t	typeref:enum:CacheEvictionPolicy
CacheLevels	riscvsim/cache.h	/^typedef enum CacheLevels$/;"	g
CacheLevels	riscvsim/cache.h	/^} CacheLevels;$/;"	t	typeref:enum:CacheLevels
CacheReadAllocPolicy	riscvsim/cache.h	/^typedef enum CacheReadAllocPolicy$/;"	g
CacheReadAllocPolicy	riscvsim/cache.h	/^} CacheReadAllocPolicy;$/;"	t	typeref:enum:CacheReadAllocPolicy
CacheStats	riscvsim/cache.h	/^typedef struct CacheStats$/;"	s
CacheStats	riscvsim/cache.h	/^} CacheStats;$/;"	t	typeref:struct:CacheStats
CacheTypes	riscvsim/cache.h	/^typedef enum CacheTypes$/;"	g
CacheTypes	riscvsim/cache.h	/^} CacheTypes;$/;"	t	typeref:enum:CacheTypes
CacheWriteAllocPolicy	riscvsim/cache.h	/^typedef enum CacheWriteAllocPolicy$/;"	g
CacheWriteAllocPolicy	riscvsim/cache.h	/^} CacheWriteAllocPolicy;$/;"	t	typeref:enum:CacheWriteAllocPolicy
CacheWritePolicy	riscvsim/cache.h	/^typedef enum CacheWritePolicy$/;"	g
CacheWritePolicy	riscvsim/cache.h	/^} CacheWritePolicy;$/;"	t	typeref:enum:CacheWritePolicy
CachedBlock	block_net.c	/^typedef struct CachedBlock {$/;"	s	file:
CachedBlock	block_net.c	/^} CachedBlock;$/;"	t	typeref:struct:CachedBlock	file:
CachedBlockStateEnum	block_net.c	/^} CachedBlockStateEnum;$/;"	t	typeref:enum:__anon8	file:
Ch	sha256.c	50;"	d	file:
CharacterDevice	virtio.h	/^} CharacterDevice;$/;"	t	typeref:struct:__anon52
CircularQueue	riscvsim/circular_queue.h	/^typedef struct CircularQueue$/;"	s
Cluster	block_net.c	/^typedef struct Cluster {$/;"	s	file:
Cluster	block_net.c	/^} Cluster;$/;"	t	typeref:struct:Cluster	file:
CmdXHRState	fs_net.c	/^typedef struct CmdXHRState {$/;"	s	file:
CmdXHRState	fs_net.c	/^} CmdXHRState;$/;"	t	typeref:struct:CmdXHRState	file:
CsrName	riscvsim/riscv_ins_str_creator.c	/^typedef struct CsrName {$/;"	s	file:
CsrName	riscvsim/riscv_ins_str_creator.c	/^} CsrName;$/;"	t	typeref:struct:CsrName	file:
DBG_CALL	slirp/debug.h	12;"	d
DBG_ERROR	slirp/debug.h	14;"	d
DBG_MISC	slirp/debug.h	13;"	d
DEBUG_ARG	slirp/debug.h	21;"	d
DEBUG_ARG	slirp/debug.h	29;"	d
DEBUG_ARGS	slirp/debug.h	22;"	d
DEBUG_ARGS	slirp/debug.h	30;"	d
DEBUG_CALL	slirp/debug.h	20;"	d
DEBUG_CALL	slirp/debug.h	28;"	d
DEBUG_ERROR	slirp/debug.h	24;"	d
DEBUG_ERROR	slirp/debug.h	32;"	d
DEBUG_MISC	slirp/debug.h	23;"	d
DEBUG_MISC	slirp/debug.h	31;"	d
DECLARE_IOVEC	slirp/slirp_config.h	92;"	d
DECLARE_IOVEC	slirp/slirp_config.h	94;"	d
DECODE	riscvsim/riscv_sim_macros.h	82;"	d
DEC_BUF_SIZE	fs_wget.c	332;"	d	file:
DEFAULT_BAUD	slirp/slirp.h	251;"	d
DEFAULT_IMPORT_FILE_PATH	fs_net.c	2096;"	d	file:
DEFAULT_INODE_CACHE_SIZE	fs_net.c	58;"	d	file:
DEFAULT_INODE_CACHE_SIZE	fs_net.c	60;"	d	file:
DEF_BHT_SIZE	riscvsim/sim_params_stats.h	128;"	d
DEF_BPU_ALIAS_FUNC	riscvsim/sim_params_stats.h	133;"	d
DEF_BPU_TYPE	riscvsim/sim_params_stats.h	135;"	d
DEF_BTB_EVICT_POLICY	riscvsim/sim_params_stats.h	134;"	d
DEF_BTB_SIZE	riscvsim/sim_params_stats.h	126;"	d
DEF_BTB_WAYS	riscvsim/sim_params_stats.h	127;"	d
DEF_CACHE_READ_ALLOC_POLICY	riscvsim/sim_params_stats.h	158;"	d
DEF_CACHE_WRITE_ALLOC_POLICY	riscvsim/sim_params_stats.h	159;"	d
DEF_CACHE_WRITE_POLICY	riscvsim/sim_params_stats.h	160;"	d
DEF_CORE_NAME	riscvsim/sim_params_stats.h	108;"	d
DEF_CORE_TYPE	riscvsim/sim_params_stats.h	109;"	d
DEF_CREATE_INS_STR	riscvsim/sim_params_stats.h	115;"	d
DEF_DO_SIM_TRACE	riscvsim/sim_params_stats.h	114;"	d
DEF_DRAMSIM_INI_FILE	riscvsim/sim_params_stats.h	175;"	d
DEF_DRAMSIM_STATS_DIR	riscvsim/sim_params_stats.h	177;"	d
DEF_DRAMSIM_SYSTEM_INI_FILE	riscvsim/sim_params_stats.h	176;"	d
DEF_DRAM_BURST_SIZE	riscvsim/sim_params_stats.h	165;"	d
DEF_ENABLE_BPU	riscvsim/sim_params_stats.h	125;"	d
DEF_ENABLE_L1_CACHE	riscvsim/sim_params_stats.h	137;"	d
DEF_ENABLE_L2_CACHE	riscvsim/sim_params_stats.h	150;"	d
DEF_ENABLE_PARALLEL_FU	riscvsim/sim_params_stats.h	111;"	d
DEF_FLUSH_SIM_MEM	riscvsim/sim_params_stats.h	179;"	d
DEF_GHT_SIZE	riscvsim/sim_params_stats.h	130;"	d
DEF_HISTORY_BITS	riscvsim/sim_params_stats.h	132;"	d
DEF_IQ_ISSUE_PORTS	riscvsim/sim_params_stats.h	169;"	d
DEF_IQ_SIZE	riscvsim/sim_params_stats.h	168;"	d
DEF_L1_CODE_CACHE_EVICT	riscvsim/sim_params_stats.h	141;"	d
DEF_L1_CODE_CACHE_READ_LATENCY	riscvsim/sim_params_stats.h	138;"	d
DEF_L1_CODE_CACHE_SIZE	riscvsim/sim_params_stats.h	139;"	d
DEF_L1_CODE_CACHE_WAYS	riscvsim/sim_params_stats.h	140;"	d
DEF_L1_DATA_CACHE_EVICT	riscvsim/sim_params_stats.h	148;"	d
DEF_L1_DATA_CACHE_PROBE_LATENCY	riscvsim/sim_params_stats.h	143;"	d
DEF_L1_DATA_CACHE_READ_LATENCY	riscvsim/sim_params_stats.h	144;"	d
DEF_L1_DATA_CACHE_SIZE	riscvsim/sim_params_stats.h	146;"	d
DEF_L1_DATA_CACHE_WAYS	riscvsim/sim_params_stats.h	147;"	d
DEF_L1_DATA_CACHE_WRITE_LATENCY	riscvsim/sim_params_stats.h	145;"	d
DEF_L2_CACHE_EVICT	riscvsim/sim_params_stats.h	156;"	d
DEF_L2_CACHE_PROBE_LATENCY	riscvsim/sim_params_stats.h	151;"	d
DEF_L2_CACHE_READ_LATENCY	riscvsim/sim_params_stats.h	152;"	d
DEF_L2_CACHE_SIZE	riscvsim/sim_params_stats.h	154;"	d
DEF_L2_CACHE_WAYS	riscvsim/sim_params_stats.h	155;"	d
DEF_L2_CACHE_WRITE_LATENCY	riscvsim/sim_params_stats.h	153;"	d
DEF_LSQ_SIZE	riscvsim/sim_params_stats.h	172;"	d
DEF_MEM_ACCESS_LATENCY	riscvsim/sim_params_stats.h	166;"	d
DEF_MEM_MODEL	riscvsim/sim_params_stats.h	174;"	d
DEF_NUM_ALU_STAGES	riscvsim/sim_params_stats.h	118;"	d
DEF_NUM_DIV_STAGES	riscvsim/sim_params_stats.h	120;"	d
DEF_NUM_FPU_ALU_STAGES	riscvsim/sim_params_stats.h	121;"	d
DEF_NUM_FPU_FMA_STAGES	riscvsim/sim_params_stats.h	122;"	d
DEF_NUM_MUL_STAGES	riscvsim/sim_params_stats.h	119;"	d
DEF_NUM_STAGES	riscvsim/sim_params_stats.h	110;"	d
DEF_PHT_SIZE	riscvsim/sim_params_stats.h	131;"	d
DEF_PTE_RW_LATENCY	riscvsim/sim_params_stats.h	164;"	d
DEF_RAS_SIZE	riscvsim/sim_params_stats.h	129;"	d
DEF_ROB_COMMIT_PORTS	riscvsim/sim_params_stats.h	171;"	d
DEF_ROB_SIZE	riscvsim/sim_params_stats.h	170;"	d
DEF_SIM_STATS_PATH	riscvsim/sim_params_stats.h	117;"	d
DEF_SIM_TRACE_FILE	riscvsim/sim_params_stats.h	116;"	d
DEF_STAGE_LATENCY	riscvsim/sim_params_stats.h	123;"	d
DEF_START_SIM	riscvsim/sim_params_stats.h	112;"	d
DEF_STATS_DISPLAY	riscvsim/sim_params_stats.h	113;"	d
DEF_TLB_SIZE	riscvsim/sim_params_stats.h	163;"	d
DEF_WORDS_PER_CACHE_LINE	riscvsim/sim_params_stats.h	161;"	d
DEVIO_DISABLED	iomem.h	36;"	d
DEVIO_SIZE16	iomem.h	32;"	d
DEVIO_SIZE32	iomem.h	33;"	d
DEVIO_SIZE8	iomem.h	31;"	d
DEVRAM_FLAG_DIRTY_BITS	iomem.h	39;"	d
DEVRAM_FLAG_DISABLED	iomem.h	40;"	d
DEVRAM_FLAG_ROM	iomem.h	38;"	d
DEVRAM_PAGE_SIZE	iomem.h	42;"	d
DEVRAM_PAGE_SIZE_LOG2	iomem.h	41;"	d
DHCPACK	slirp/bootp.h	74;"	d
DHCPDISCOVER	slirp/bootp.h	71;"	d
DHCPNAK	slirp/bootp.h	75;"	d
DHCPOFFER	slirp/bootp.h	72;"	d
DHCPREQUEST	slirp/bootp.h	73;"	d
DHCP_OPT_LEN	slirp/bootp.h	93;"	d
DISABLE	riscvsim/sim_params_stats.h	/^    DISABLE,$/;"	e	enum:SIM_PARAM_STATUS
DISABLE_SEAGATE	ide.c	190;"	d	file:
DLL_PUBLIC	cutils.h	45;"	d
DO_CFSETSPEED	slirp/slirp_config.h	23;"	d
DO_KEEPALIVE	slirp/slirp_config.h	10;"	d
DPRINTF	slirp/bootp.c	33;"	d	file:
DPRINTF	slirp/bootp.c	36;"	d	file:
DRQ_STAT	ide.c	39;"	d	file:
DUMMY_PPP	slirp/slirp_config.h	52;"	d
DUMP_CACHE_LOAD	fs_net.c	54;"	d	file:
DUP16	riscv_cpu_template.h	183;"	d
DUP2	riscv_cpu_template.h	180;"	d
DUP32	riscv_cpu_template.h	184;"	d
DUP4	riscv_cpu_template.h	181;"	d
DUP8	riscv_cpu_template.h	182;"	d
DataCache	riscvsim/cache.h	/^    DataCache = 0x2,$/;"	e	enum:CacheTypes
DataFWDLatch	riscvsim/common_core_utils.h	/^typedef struct DataFWDLatch$/;"	s
DataFWDLatch	riscvsim/common_core_utils.h	/^} DataFWDLatch;$/;"	t	typeref:struct:DataFWDLatch
DecryptFileCB	fs_wget.h	/^typedef int DecryptFileCB(void *opaque, const uint8_t *data, size_t len);$/;"	t
DecryptFileState	fs_wget.c	/^struct DecryptFileState {$/;"	s	file:
DecryptFileState	fs_wget.h	/^typedef struct DecryptFileState DecryptFileState;$/;"	t	typeref:struct:DecryptFileState
DeviceReadFunc	iomem.h	/^typedef uint32_t DeviceReadFunc(void *opaque, uint32_t offset, int size_log2);$/;"	t
DeviceWriteFunc	iomem.h	/^typedef void DeviceWriteFunc(void *opaque, uint32_t offset,$/;"	t
Dirty	riscvsim/cache.h	/^    Dirty = 0x1$/;"	e	enum:BlockDirtyStatus
DynBuf	cutils.h	/^} DynBuf;$/;"	t	typeref:struct:__anon6
ECC_ERR	ide.c	53;"	d	file:
ECC_STAT	ide.c	38;"	d	file:
ECONNREFUSED	slirp/slirp.h	24;"	d
EHOSTUNREACH	slirp/slirp.h	22;"	d
EINPROGRESS	slirp/slirp.h	20;"	d
EMU_CTL	slirp/misc.h	28;"	d
EMU_FTP	slirp/misc.h	29;"	d
EMU_IDENT	slirp/misc.h	34;"	d
EMU_IRC	slirp/misc.h	31;"	d
EMU_KSH	slirp/misc.h	30;"	d
EMU_LIBS	Makefile	/^EMU_LIBS=-lrt -lpthread -lm$/;"	m
EMU_NOCONNECT	slirp/misc.h	37;"	d
EMU_NONE	slirp/misc.h	25;"	d
EMU_OBJS	Makefile	/^EMU_OBJS:=virtio.o pci.o fs.o cutils.o iomem.o simplefb.o \\$/;"	m
EMU_REALAUDIO	slirp/misc.h	32;"	d
EMU_RLOGIN	slirp/misc.h	33;"	d
EMU_RSH	slirp/misc.h	35;"	d
ENABLE	riscvsim/sim_params_stats.h	/^    ENABLE$/;"	e	enum:SIM_PARAM_STATUS
ENCRYPTED_FILE_HEADER_SIZE	fs_wget.c	330;"	d	file:
ENETUNREACH	slirp/slirp.h	23;"	d
ENOTCONN	slirp/slirp.h	21;"	d
ERR_STAT	ide.c	36;"	d	file:
ETH_ALEN	slirp/slirp.c	537;"	d	file:
ETH_HLEN	slirp/slirp.c	538;"	d	file:
ETH_P_ARP	slirp/slirp.c	541;"	d	file:
ETH_P_IP	slirp/slirp.c	540;"	d	file:
EWOULDBLOCK	slirp/slirp.h	19;"	d
EXABYTE_ENABLE_NEST	ide.c	181;"	d	file:
EXE	Makefile	/^EXE=$/;"	m
EXP_MASK	softfp_template.h	1103;"	d
EXP_MASK	softfp_template.h	46;"	d
EXP_SIZE	softfp_template.h	1102;"	d
EXP_SIZE	softfp_template.h	28;"	d
EXP_SIZE	softfp_template.h	36;"	d
EXP_SIZE	softfp_template.h	41;"	d
EndTransferFunc	ide.c	/^typedef void EndTransferFunc(IDEState *);$/;"	t	file:
EthernetDevice	virtio.h	/^struct EthernetDevice {$/;"	s
EthernetDevice	virtio.h	/^typedef struct EthernetDevice EthernetDevice; $/;"	t	typeref:struct:EthernetDevice
F32_HIGH	riscv_cpu_xlen_typedefs.h	32;"	d
F32_HIGH	riscv_cpu_xlen_typedefs.h	35;"	d
F32_HIGH	riscv_cpu_xlen_typedefs.h	39;"	d
F64_HIGH	riscv_cpu_xlen_typedefs.h	36;"	d
F64_HIGH	riscv_cpu_xlen_typedefs.h	40;"	d
FALSE	cutils.h	/^    FALSE = 0,$/;"	e	enum:__anon5
FALSE	cutils.h	49;"	d
FBDevice	machine.h	/^struct FBDevice {$/;"	s
FBDevice	machine.h	/^typedef struct FBDevice FBDevice;$/;"	t	typeref:struct:FBDevice
FBUF_H	fbuf.h	2;"	d
FB_ALLOC_ALIGN	simplefb.c	38;"	d	file:
FB_ALLOC_ALIGN	vga.c	71;"	d	file:
FCLASS_NINF	softfp.h	44;"	d
FCLASS_NNORMAL	softfp.h	45;"	d
FCLASS_NSUBNORMAL	softfp.h	46;"	d
FCLASS_NZERO	softfp.h	47;"	d
FCLASS_PINF	softfp.h	51;"	d
FCLASS_PNORMAL	softfp.h	50;"	d
FCLASS_PSUBNORMAL	softfp.h	49;"	d
FCLASS_PZERO	softfp.h	48;"	d
FCLASS_QNAN	softfp.h	53;"	d
FCLASS_SNAN	softfp.h	52;"	d
FDTState	riscv_machine.c	/^} FDTState;$/;"	t	typeref:struct:__anon4	file:
FDT_BEGIN_NODE	riscv_machine.c	558;"	d	file:
FDT_END	riscv_machine.c	562;"	d	file:
FDT_END_NODE	riscv_machine.c	559;"	d	file:
FDT_MAGIC	riscv_machine.c	537;"	d	file:
FDT_NOP	riscv_machine.c	561;"	d	file:
FDT_PROP	riscv_machine.c	560;"	d	file:
FDT_VERSION	riscv_machine.c	538;"	d	file:
FENCE_MASK	riscvsim/riscv_sim_macros.h	66;"	d
FETCH	riscvsim/riscv_sim_macros.h	81;"	d
FFLAG_DIVIDE_ZERO	softfp.h	39;"	d
FFLAG_INEXACT	softfp.h	42;"	d
FFLAG_INVALID_OP	softfp.h	38;"	d
FFLAG_OVERFLOW	softfp.h	40;"	d
FFLAG_UNDERFLOW	softfp.h	41;"	d
FH_SIZE	softfp_template.h	318;"	d
FH_SIZE	softfp_template.h	345;"	d
FIDDesc	virtio.c	/^} FIDDesc;$/;"	t	typeref:struct:__anon16	file:
FIFO_SIZE	vmmouse.c	43;"	d	file:
FILEID_SIZE_MAX	fs_utils.h	27;"	d
FILE_LOAD_COUNT	fs_net.c	2222;"	d	file:
FLEN	riscv_cpu_xlen_typedefs.h	6;"	d
FLEN	riscv_cpu_xlen_typedefs.h	8;"	d
FLOAD_MASK	riscvsim/riscv_sim_macros.h	71;"	d
FMADD_MASK	riscvsim/riscv_sim_macros.h	73;"	d
FMINMAX_IEEE754_2008	softfp.h	/^    FMINMAX_IEEE754_2008, \/* min(1, qNaN) -> 1, min(1, sNaN) -> qNaN *\/$/;"	e	enum:__anon41
FMINMAX_IEEE754_201X	softfp.h	/^    FMINMAX_IEEE754_201X, \/* min(1, qNaN\/sNaN) -> 1 *\/$/;"	e	enum:__anon41
FMINMAX_PROP	softfp.h	/^    FMINMAX_PROP, \/* min(1, qNaN\/sNaN) -> qNaN *\/$/;"	e	enum:__anon41
FMSUB_MASK	riscvsim/riscv_sim_macros.h	74;"	d
FNMADD_MASK	riscvsim/riscv_sim_macros.h	76;"	d
FNMSUB_MASK	riscvsim/riscv_sim_macros.h	75;"	d
FRAMEBUFFER_BASE_ADDR	riscv_machine.c	95;"	d	file:
FRONTEND_MEM_ACCESS_QUEUE_SIZE	riscvsim/memory_controller.h	41;"	d
FSBaseURL	fs_net.c	/^typedef struct FSBaseURL {$/;"	s	file:
FSBaseURL	fs_net.c	/^} FSBaseURL;$/;"	t	typeref:struct:FSBaseURL	file:
FSCMDRequest	fs_net.c	/^} FSCMDRequest;$/;"	t	typeref:struct:__anon67	file:
FSCMDRequestEnum	fs_net.c	/^} FSCMDRequestEnum;$/;"	t	typeref:enum:__anon66	file:
FSCMD_NAME	fs.h	142;"	d
FSCommitErrorCode	fs_utils.h	/^} FSCommitErrorCode;$/;"	t	typeref:enum:__anon23
FSDevice	fs.h	/^struct FSDevice {$/;"	s
FSDevice	fs.h	/^typedef struct FSDevice FSDevice;$/;"	t	typeref:struct:FSDevice
FSDeviceDisk	fs_disk.c	/^} FSDeviceDisk;$/;"	t	typeref:struct:__anon74	file:
FSDeviceMem	fs_net.c	/^typedef struct FSDeviceMem {$/;"	s	file:
FSDeviceMem	fs_net.c	/^} FSDeviceMem;$/;"	t	typeref:struct:FSDeviceMem	file:
FSDirEntry	fs_net.c	/^} FSDirEntry;$/;"	t	typeref:struct:__anon65	file:
FSFile	fs.h	/^typedef struct FSFile FSFile;$/;"	t	typeref:struct:FSFile
FSFile	fs_disk.c	/^struct FSFile {$/;"	s	file:
FSFile	fs_net.c	/^struct FSFile {$/;"	s	file:
FSFileID	fs_utils.h	/^typedef uint64_t FSFileID;$/;"	t
FSIGN_MASK	riscv_cpu_fp_template.h	304;"	d
FSIGN_MASK	riscv_cpu_fp_template.h	37;"	d
FSIGN_MASK	riscvsim/execute_fpa_template.h	248;"	d
FSIGN_MASK	riscvsim/execute_fpa_template.h	43;"	d
FSIGN_MASK	riscvsim/fpa_str_creator_template.h	313;"	d
FSIGN_MASK128	softfp.h	145;"	d
FSIGN_MASK32	softfp.h	69;"	d
FSIGN_MASK64	softfp.h	106;"	d
FSINode	fs_net.c	/^typedef struct FSINode {$/;"	s	file:
FSINode	fs_net.c	/^} FSINode;$/;"	t	typeref:struct:FSINode	file:
FSINodeRegStateEnum	fs_net.c	/^} FSINodeRegStateEnum;$/;"	t	typeref:enum:__anon59	file:
FSINodeTypeEnum	fs_net.c	/^} FSINodeTypeEnum;$/;"	t	typeref:enum:__anon58	file:
FSLoadFileCB	machine.c	/^typedef void FSLoadFileCB(void *opaque, uint8_t *buf, int buf_len);$/;"	t	file:
FSLock	fs.h	/^} FSLock;$/;"	t	typeref:struct:__anon57
FSNetEventLoopCompletionFunc	fs_wget.h	/^typedef BOOL FSNetEventLoopCompletionFunc(void *opaque);$/;"	t
FSNetInitState	fs_net.c	/^} FSNetInitState;$/;"	t	typeref:struct:__anon73	file:
FSOpenCompletionFunc	fs.h	/^typedef void FSOpenCompletionFunc(FSDevice *fs, FSQID *qid, int err,$/;"	t
FSOpenInfo	fs_net.c	/^typedef struct FSOpenInfo {$/;"	s	file:
FSOpenInfo	fs_net.c	/^} FSOpenInfo;$/;"	t	typeref:struct:FSOpenInfo	file:
FSOpenWgetEnum	fs_net.c	/^} FSOpenWgetEnum;$/;"	t	typeref:enum:__anon72	file:
FSQID	fs.h	/^} FSQID;$/;"	t	typeref:struct:__anon55
FSStat	fs.h	/^} FSStat;$/;"	t	typeref:struct:__anon56
FSStatFS	fs.h	/^} FSStatFS;$/;"	t	typeref:struct:__anon54
FSTORE_MASK	riscvsim/riscv_sim_macros.h	72;"	d
FSWGetFileCB	fs_wget.h	/^typedef void FSWGetFileCB(FSDevice *fs, FSFile *f, int64_t size, void *opaque);$/;"	t
FSWGetFileState	fs_wget.c	/^} FSWGetFileState;$/;"	t	typeref:struct:__anon21	file:
FS_BLOCK_SIZE	fs_utils.h	33;"	d
FS_BLOCK_SIZE_LOG2	fs_utils.h	32;"	d
FS_CMD_PBKDF2	fs_net.c	/^    FS_CMD_PBKDF2,$/;"	e	enum:__anon66	file:
FS_CMD_REPLY_LEN_MAX	fs_net.c	144;"	d	file:
FS_CMD_XHR	fs_net.c	/^    FS_CMD_XHR,$/;"	e	enum:__anon66	file:
FS_ERR_COUNTERS	fs_utils.h	/^    FS_ERR_COUNTERS = -7,$/;"	e	enum:__anon23
FS_ERR_FILE_ID	fs_utils.h	/^    FS_ERR_FILE_ID = -4,$/;"	e	enum:__anon23
FS_ERR_GENERIC	fs_utils.h	/^    FS_ERR_GENERIC = -1,$/;"	e	enum:__anon23
FS_ERR_HEAD	fs_utils.h	/^    FS_ERR_HEAD = -10,$/;"	e	enum:__anon23
FS_ERR_IO	fs_utils.h	/^    FS_ERR_IO = -5,$/;"	e	enum:__anon23
FS_ERR_NOENT	fs_utils.h	/^    FS_ERR_NOENT = -6,$/;"	e	enum:__anon23
FS_ERR_OK	fs_utils.h	/^    FS_ERR_OK = 0,$/;"	e	enum:__anon23
FS_ERR_PROTOCOL_VERSION	fs_utils.h	/^    FS_ERR_PROTOCOL_VERSION = -9,$/;"	e	enum:__anon23
FS_ERR_QUOTA	fs_utils.h	/^    FS_ERR_QUOTA = -8,$/;"	e	enum:__anon23
FS_ERR_REVISION	fs_utils.h	/^    FS_ERR_REVISION = -3,$/;"	e	enum:__anon23
FS_ERR_SYNTAX	fs_utils.h	/^    FS_ERR_SYNTAX = -2,$/;"	e	enum:__anon23
FS_KEY_LEN	fs_utils.h	29;"	d
FS_OPEN_WGET_ARCHIVE	fs_net.c	/^    FS_OPEN_WGET_ARCHIVE,$/;"	e	enum:__anon72	file:
FS_OPEN_WGET_ARCHIVE_FILE	fs_net.c	/^    FS_OPEN_WGET_ARCHIVE_FILE,$/;"	e	enum:__anon72	file:
FS_OPEN_WGET_REG	fs_net.c	/^    FS_OPEN_WGET_REG,$/;"	e	enum:__anon72	file:
FT_BLK	fs_net.c	/^    FT_BLK = 6,$/;"	e	enum:__anon58	file:
FT_CHR	fs_net.c	/^    FT_CHR = 2,$/;"	e	enum:__anon58	file:
FT_DIR	fs_net.c	/^    FT_DIR = 4,$/;"	e	enum:__anon58	file:
FT_FIFO	fs_net.c	/^    FT_FIFO = 1,$/;"	e	enum:__anon58	file:
FT_LNK	fs_net.c	/^    FT_LNK = 10,$/;"	e	enum:__anon58	file:
FT_REG	fs_net.c	/^    FT_REG = 8,$/;"	e	enum:__anon58	file:
FT_SOCK	fs_net.c	/^    FT_SOCK = 12,$/;"	e	enum:__anon58	file:
FULL_BOLT	slirp/slirp_config.h	30;"	d
FULL_UNROLL	aes.c	49;"	d	file:
FU_ALU	riscvsim/riscv_sim_macros.h	36;"	d
FU_DIV	riscvsim/riscv_sim_macros.h	38;"	d
FU_FPU_ALU	riscvsim/riscv_sim_macros.h	39;"	d
FU_FPU_ALU_CVT	riscvsim/riscv_sim_macros.h	161;"	d
FU_FPU_ALU_FADD	riscvsim/riscv_sim_macros.h	149;"	d
FU_FPU_ALU_FCLASS	riscvsim/riscv_sim_macros.h	163;"	d
FU_FPU_ALU_FCVT	riscvsim/riscv_sim_macros.h	160;"	d
FU_FPU_ALU_FDIV	riscvsim/riscv_sim_macros.h	152;"	d
FU_FPU_ALU_FEQ	riscvsim/riscv_sim_macros.h	157;"	d
FU_FPU_ALU_FLE	riscvsim/riscv_sim_macros.h	159;"	d
FU_FPU_ALU_FLT	riscvsim/riscv_sim_macros.h	158;"	d
FU_FPU_ALU_FMAX	riscvsim/riscv_sim_macros.h	156;"	d
FU_FPU_ALU_FMIN	riscvsim/riscv_sim_macros.h	155;"	d
FU_FPU_ALU_FMUL	riscvsim/riscv_sim_macros.h	151;"	d
FU_FPU_ALU_FMV	riscvsim/riscv_sim_macros.h	162;"	d
FU_FPU_ALU_FSGNJ	riscvsim/riscv_sim_macros.h	154;"	d
FU_FPU_ALU_FSQRT	riscvsim/riscv_sim_macros.h	153;"	d
FU_FPU_ALU_FSUB	riscvsim/riscv_sim_macros.h	150;"	d
FU_FPU_FMA	riscvsim/riscv_sim_macros.h	40;"	d
FU_MUL	riscvsim/riscv_sim_macros.h	37;"	d
F_ARITHMETIC_MASK	riscvsim/riscv_sim_macros.h	77;"	d
F_HIGH	riscv_cpu_fp_template.h	26;"	d
F_HIGH	riscv_cpu_fp_template.h	29;"	d
F_HIGH	riscv_cpu_fp_template.h	302;"	d
F_HIGH	riscv_cpu_fp_template.h	32;"	d
F_HIGH	riscvsim/execute_fpa_template.h	246;"	d
F_HIGH	riscvsim/execute_fpa_template.h	32;"	d
F_HIGH	riscvsim/execute_fpa_template.h	35;"	d
F_HIGH	riscvsim/execute_fpa_template.h	38;"	d
F_HIGH	riscvsim/fpa_str_creator_template.h	311;"	d
F_HIGH	riscvsim/fpa_str_creator_template.h	32;"	d
F_HIGH	riscvsim/fpa_str_creator_template.h	35;"	d
F_HIGH	riscvsim/fpa_str_creator_template.h	38;"	d
F_QNAN	softfp_template.h	/^static const F_UINT F_QNAN = (((F_UINT)EXP_MASK << MANT_SIZE) | ((F_UINT)1 << (MANT_SIZE - 1)));$/;"	v
F_QNAN	softfp_template.h	1109;"	d
F_QNAN	softfp_template.h	54;"	d
F_SIZE	riscv_cpu_fp_template.h	301;"	d
F_SIZE	riscv_cpu_template.h	1881;"	d
F_SIZE	riscv_cpu_template.h	1884;"	d
F_SIZE	riscv_cpu_template.h	1888;"	d
F_SIZE	riscvsim/decode_fpa_template.h	140;"	d
F_SIZE	riscvsim/execute_fpa_template.h	245;"	d
F_SIZE	riscvsim/fpa_str_creator_template.h	310;"	d
F_SIZE	riscvsim/riscv_ins_execute.c	919;"	d	file:
F_SIZE	riscvsim/riscv_ins_execute.c	922;"	d	file:
F_SIZE	riscvsim/riscv_ins_str_creator.c	1284;"	d	file:
F_SIZE	riscvsim/riscv_ins_str_creator.c	1287;"	d	file:
F_SIZE	riscvsim/riscv_isa_decoder.c	1085;"	d	file:
F_SIZE	riscvsim/riscv_isa_decoder.c	1088;"	d	file:
F_SIZE	softfp.c	75;"	d	file:
F_SIZE	softfp.c	78;"	d	file:
F_SIZE	softfp.c	83;"	d	file:
F_SIZE	softfp_template.h	1097;"	d
F_SIZE	softfp_template_icvt.h	/^F_UINT glue(glue(glue(cvt_i, ICVT_SIZE), _sf), F_SIZE)(ICVT_INT a, $/;"	f
F_SIZE	softfp_template_icvt.h	/^F_UINT glue(glue(glue(cvt_u, ICVT_SIZE), _sf), F_SIZE)(ICVT_UINT a, $/;"	f
F_SIZE	softfp_template_icvt.h	/^static F_UINT glue(glue(glue(internal_cvt_i, ICVT_SIZE), _sf), F_SIZE)(ICVT_INT a, $/;"	f
F_UHALF	softfp_template.h	1100;"	d
F_UHALF	softfp_template.h	30;"	d
F_UHALF	softfp_template.h	38;"	d
F_UINT	softfp_template.h	1098;"	d
F_UINT	softfp_template.h	25;"	d
F_UINT	softfp_template.h	31;"	d
F_UINT	softfp_template.h	39;"	d
F_ULONG	softfp_template.h	1099;"	d
F_ULONG	softfp_template.h	26;"	d
F_ULONG	softfp_template.h	33;"	d
FileBuffer	fbuf.h	/^} FileBuffer;$/;"	t	typeref:struct:__anon36
GAG	riscvsim/adaptive_predictor.c	37;"	d	file:
GAP	riscvsim/adaptive_predictor.c	38;"	d	file:
GETU32	aes.c	50;"	d	file:
GET_INDEX	riscvsim/riscv_sim_macros.h	136;"	d
GET_INSN_COUNTER	riscv_cpu_template.h	197;"	d
GET_NUM_BITS	riscvsim/riscv_sim_macros.h	135;"	d
GET_PC	riscv_cpu_template.h	196;"	d
GET_SET_ADDR	riscvsim/adaptive_predictor.c	42;"	d	file:
GET_SET_ADDR	riscvsim/btb.c	37;"	d	file:
GET_SIM_TIMER_DIFF	riscv_cpu_priv.h	129;"	d
GET_TOTAL_STAT	stats_display.c	46;"	d	file:
GHTEntry	riscvsim/adaptive_predictor.h	/^typedef struct GHTEntry$/;"	s
GHTEntry	riscvsim/adaptive_predictor.h	/^} GHTEntry;$/;"	t	typeref:struct:GHTEntry
GROUP_FMT	block_net.c	56;"	d	file:
Gamma0	sha256.c	56;"	d	file:
Gamma1	sha256.c	57;"	d	file:
HAVE_ARPA_INET_H	slirp/slirp_config.h	110;"	d
HAVE_ARPA_INET_H	slirp/slirp_config.h	112;"	d
HAVE_BCMP	slirp/slirp_config.h	161;"	d
HAVE_DRAND48	slirp/slirp_config.h	164;"	d
HAVE_FCHMOD	slirp/slirp_config.h	185;"	d
HAVE_GETHOSTID	slirp/slirp_config.h	170;"	d
HAVE_GRANTPT	slirp/slirp_config.h	182;"	d
HAVE_INDEX	slirp/slirp_config.h	158;"	d
HAVE_INET_ATON	slirp/slirp_config.h	149;"	d
HAVE_INET_ATON	slirp/slirp_config.h	151;"	d
HAVE_INT128	cutils.h	61;"	d
HAVE_MEMMOVE	slirp/slirp_config.h	167;"	d
HAVE_RANDOM	slirp/slirp_config.h	143;"	d
HAVE_READV	slirp/slirp_config.h	89;"	d
HAVE_REVOKE	slirp/slirp_config.h	179;"	d
HAVE_SETENV	slirp/slirp_config.h	155;"	d
HAVE_SRANDOM	slirp/slirp_config.h	146;"	d
HAVE_STDLIB_H	slirp/slirp_config.h	58;"	d
HAVE_STRDUP	slirp/slirp_config.h	76;"	d
HAVE_STRERROR	slirp/slirp_config.h	73;"	d
HAVE_STRING_H	slirp/slirp_config.h	107;"	d
HAVE_SYS_BITYPES_H	slirp/slirp_config.h	83;"	d
HAVE_SYS_FILIO_H	slirp/slirp_config.h	67;"	d
HAVE_SYS_FILIO_H	slirp/slirp_config.h	69;"	d
HAVE_SYS_IOCTL_H	slirp/slirp_config.h	61;"	d
HAVE_SYS_IOCTL_H	slirp/slirp_config.h	63;"	d
HAVE_SYS_SELECT_H	slirp/slirp_config.h	101;"	d
HAVE_SYS_SELECT_H	slirp/slirp_config.h	103;"	d
HAVE_SYS_SIGNAL_H	slirp/slirp_config.h	116;"	d
HAVE_SYS_STROPTS_H	slirp/slirp_config.h	119;"	d
HAVE_SYS_TIME_H	slirp/slirp_config.h	80;"	d
HAVE_SYS_TYPES32_H	slirp/slirp_config.h	188;"	d
HAVE_SYS_WAIT_H	slirp/slirp_config.h	98;"	d
HAVE_UNISTD_H	slirp/slirp_config.h	55;"	d
HEAD_FILENAME	fs_utils.h	24;"	d
HMAC_BLOCK_SIZE	fs_wget.c	537;"	d	file:
HMAC_SHA256_CTX	fs_wget.c	/^} HMAC_SHA256_CTX;$/;"	t	typeref:struct:__anon22	file:
HTIF_BASE_ADDR	riscv_machine.c	86;"	d	file:
HTONL	slirp/ip.h	44;"	d
HTONL	slirp/ip.h	57;"	d
HTONS	slirp/ip.h	47;"	d
HTONS	slirp/ip.h	60;"	d
I440FXState	pci.c	/^struct I440FXState {$/;"	s	file:
I440FXState	pci.h	/^typedef struct I440FXState I440FXState;$/;"	t	typeref:struct:I440FXState
ICMP_ADVLEN	slirp/ip_icmp.h	105;"	d
ICMP_ADVLENMIN	slirp/ip_icmp.h	104;"	d
ICMP_ECHO	slirp/ip_icmp.h	132;"	d
ICMP_ECHOREPLY	slirp/ip_icmp.h	111;"	d
ICMP_INFOTYPE	slirp/ip_icmp.h	149;"	d
ICMP_IREQ	slirp/ip_icmp.h	142;"	d
ICMP_IREQREPLY	slirp/ip_icmp.h	143;"	d
ICMP_MASKLEN	slirp/ip_icmp.h	103;"	d
ICMP_MASKREPLY	slirp/ip_icmp.h	145;"	d
ICMP_MASKREQ	slirp/ip_icmp.h	144;"	d
ICMP_MAXDATALEN	slirp/ip_icmp.c	187;"	d	file:
ICMP_MAXDATALEN	slirp/ip_icmp.c	301;"	d	file:
ICMP_MAXTYPE	slirp/ip_icmp.h	147;"	d
ICMP_MINLEN	slirp/ip_icmp.h	101;"	d
ICMP_PARAMPROB	slirp/ip_icmp.h	138;"	d
ICMP_PARAMPROB_OPTABSENT	slirp/ip_icmp.h	139;"	d
ICMP_REDIRECT	slirp/ip_icmp.h	127;"	d
ICMP_REDIRECT_HOST	slirp/ip_icmp.h	129;"	d
ICMP_REDIRECT_NET	slirp/ip_icmp.h	128;"	d
ICMP_REDIRECT_TOSHOST	slirp/ip_icmp.h	131;"	d
ICMP_REDIRECT_TOSNET	slirp/ip_icmp.h	130;"	d
ICMP_ROUTERADVERT	slirp/ip_icmp.h	133;"	d
ICMP_ROUTERSOLICIT	slirp/ip_icmp.h	134;"	d
ICMP_SOURCEQUENCH	slirp/ip_icmp.h	126;"	d
ICMP_TIMXCEED	slirp/ip_icmp.h	135;"	d
ICMP_TIMXCEED_INTRANS	slirp/ip_icmp.h	136;"	d
ICMP_TIMXCEED_REASS	slirp/ip_icmp.h	137;"	d
ICMP_TSLEN	slirp/ip_icmp.h	102;"	d
ICMP_TSTAMP	slirp/ip_icmp.h	140;"	d
ICMP_TSTAMPREPLY	slirp/ip_icmp.h	141;"	d
ICMP_UNREACH	slirp/ip_icmp.h	112;"	d
ICMP_UNREACH_HOST	slirp/ip_icmp.h	114;"	d
ICMP_UNREACH_HOST_PROHIB	slirp/ip_icmp.h	123;"	d
ICMP_UNREACH_HOST_UNKNOWN	slirp/ip_icmp.h	120;"	d
ICMP_UNREACH_ISOLATED	slirp/ip_icmp.h	121;"	d
ICMP_UNREACH_NEEDFRAG	slirp/ip_icmp.h	117;"	d
ICMP_UNREACH_NET	slirp/ip_icmp.h	113;"	d
ICMP_UNREACH_NET_PROHIB	slirp/ip_icmp.h	122;"	d
ICMP_UNREACH_NET_UNKNOWN	slirp/ip_icmp.h	119;"	d
ICMP_UNREACH_PORT	slirp/ip_icmp.h	116;"	d
ICMP_UNREACH_PROTOCOL	slirp/ip_icmp.h	115;"	d
ICMP_UNREACH_SRCFAIL	slirp/ip_icmp.h	118;"	d
ICMP_UNREACH_TOSHOST	slirp/ip_icmp.h	125;"	d
ICMP_UNREACH_TOSNET	slirp/ip_icmp.h	124;"	d
ICRC_ERR	ide.c	55;"	d	file:
ICVT_INT	softfp_template_icvt.h	170;"	d
ICVT_INT	softfp_template_icvt.h	26;"	d
ICVT_INT	softfp_template_icvt.h	29;"	d
ICVT_INT	softfp_template_icvt.h	32;"	d
ICVT_SIZE	softfp_template.h	1086;"	d
ICVT_SIZE	softfp_template.h	1089;"	d
ICVT_SIZE	softfp_template.h	1093;"	d
ICVT_SIZE	softfp_template_icvt.h	/^ICVT_INT glue(glue(glue(cvt_sf, F_SIZE), _i), ICVT_SIZE)(F_UINT a, RoundingModeEnum rm,$/;"	f
ICVT_SIZE	softfp_template_icvt.h	/^ICVT_UINT glue(glue(glue(cvt_sf, F_SIZE), _u), ICVT_SIZE)(F_UINT a, RoundingModeEnum rm,$/;"	f
ICVT_SIZE	softfp_template_icvt.h	/^static ICVT_INT glue(glue(glue(internal_cvt_sf, F_SIZE), _i), ICVT_SIZE)(F_UINT a, RoundingModeEnum rm,$/;"	f
ICVT_SIZE	softfp_template_icvt.h	169;"	d
ICVT_UINT	softfp_template_icvt.h	171;"	d
ICVT_UINT	softfp_template_icvt.h	25;"	d
ICVT_UINT	softfp_template_icvt.h	28;"	d
ICVT_UINT	softfp_template_icvt.h	31;"	d
IDEIFState	ide.c	/^struct IDEIFState {$/;"	s	file:
IDEIFState	ide.h	/^typedef struct IDEIFState IDEIFState;$/;"	t	typeref:struct:IDEIFState
IDEState	ide.c	/^struct IDEState {$/;"	s	file:
IDEState	ide.c	/^typedef struct IDEState IDEState;$/;"	t	typeref:struct:IDEState	file:
IDE_BASE_ADDR	riscv_machine.c	87;"	d	file:
IDE_CMD_DISABLE_IRQ	ide.c	64;"	d	file:
IDE_CMD_RESET	ide.c	63;"	d	file:
ID_ERR	ide.c	51;"	d	file:
IF_AUTOCOMP	slirp/if.h	13;"	d
IF_COMP	slirp/if.h	18;"	d
IF_COMPRESS	slirp/if.h	11;"	d
IF_MAXLINKHDR	slirp/if.h	21;"	d
IF_MRU	slirp/if.h	17;"	d
IF_MTU	slirp/if.h	16;"	d
IF_NOCIDCOMP	slirp/if.h	14;"	d
IF_NOCOMPRESS	slirp/if.h	12;"	d
IF_THRESH	slirp/ip_output.c	45;"	d	file:
IMANT_SIZE	softfp_template.h	1106;"	d
IMANT_SIZE	softfp_template.h	49;"	d
IMAP_ENTRY_STATUS_ALLOCATED	riscvsim/riscv_sim_macros.h	99;"	d
IMAP_ENTRY_STATUS_FREE	riscvsim/riscv_sim_macros.h	98;"	d
IMapEntry	riscvsim/common_core_utils.h	/^} IMapEntry;$/;"	t	typeref:struct:InstructionMapEntry
INA	slirp/ip_input.c	551;"	d	file:
INCORE_NUM_INS_DISPATCH_QUEUE_ENTRY	riscvsim/riscv_sim_macros.h	91;"	d
INCore	riscvsim/inorder.h	/^typedef struct INCore$/;"	s
INCore	riscvsim/inorder.h	/^} INCore;$/;"	t	typeref:struct:INCore
INDEX_STAT	ide.c	37;"	d	file:
INPUT_MAKE_KEY_MAX	ps2.c	129;"	d	file:
INPUT_MAKE_KEY_MIN	ps2.c	128;"	d	file:
INSTALL	Makefile	/^INSTALL=install$/;"	m
INS_CLASS_FP	riscvsim/riscv_sim_macros.h	129;"	d
INS_CLASS_INT	riscvsim/riscv_sim_macros.h	128;"	d
INS_TYPE_ARITMETIC	riscvsim/riscv_sim_macros.h	114;"	d
INS_TYPE_ATOMIC	riscvsim/riscv_sim_macros.h	112;"	d
INS_TYPE_COND_BRANCH	riscvsim/riscv_sim_macros.h	115;"	d
INS_TYPE_FP_ADD	riscvsim/riscv_sim_macros.h	122;"	d
INS_TYPE_FP_DIV_SQRT	riscvsim/riscv_sim_macros.h	125;"	d
INS_TYPE_FP_FMA	riscvsim/riscv_sim_macros.h	124;"	d
INS_TYPE_FP_LOAD	riscvsim/riscv_sim_macros.h	120;"	d
INS_TYPE_FP_MISC	riscvsim/riscv_sim_macros.h	126;"	d
INS_TYPE_FP_MUL	riscvsim/riscv_sim_macros.h	123;"	d
INS_TYPE_FP_STORE	riscvsim/riscv_sim_macros.h	121;"	d
INS_TYPE_INT_DIV	riscvsim/riscv_sim_macros.h	119;"	d
INS_TYPE_INT_MUL	riscvsim/riscv_sim_macros.h	118;"	d
INS_TYPE_JAL	riscvsim/riscv_sim_macros.h	116;"	d
INS_TYPE_JALR	riscvsim/riscv_sim_macros.h	117;"	d
INS_TYPE_LOAD	riscvsim/riscv_sim_macros.h	110;"	d
INS_TYPE_STORE	riscvsim/riscv_sim_macros.h	111;"	d
INS_TYPE_SYSTEM	riscvsim/riscv_sim_macros.h	113;"	d
IO	ide.c	59;"	d	file:
IOMEM_H	iomem.h	25;"	d
IPDEFTTL	slirp/ip.h	176;"	d
IPFRAGTTL	slirp/ip.h	177;"	d
IPOPT_CLASS	slirp/ip.h	109;"	d
IPOPT_CONTROL	slirp/ip.h	112;"	d
IPOPT_COPIED	slirp/ip.h	108;"	d
IPOPT_DEBMEAS	slirp/ip.h	114;"	d
IPOPT_EOL	slirp/ip.h	117;"	d
IPOPT_LSRR	slirp/ip.h	123;"	d
IPOPT_MINOFF	slirp/ip.h	133;"	d
IPOPT_NOP	slirp/ip.h	118;"	d
IPOPT_NUMBER	slirp/ip.h	110;"	d
IPOPT_OFFSET	slirp/ip.h	132;"	d
IPOPT_OLEN	slirp/ip.h	131;"	d
IPOPT_OPTVAL	slirp/ip.h	130;"	d
IPOPT_RESERVED1	slirp/ip.h	113;"	d
IPOPT_RESERVED2	slirp/ip.h	115;"	d
IPOPT_RR	slirp/ip.h	120;"	d
IPOPT_SATID	slirp/ip.h	124;"	d
IPOPT_SECURITY	slirp/ip.h	122;"	d
IPOPT_SECUR_CONFID	slirp/ip.h	165;"	d
IPOPT_SECUR_EFTO	slirp/ip.h	166;"	d
IPOPT_SECUR_MMMM	slirp/ip.h	167;"	d
IPOPT_SECUR_RESTR	slirp/ip.h	168;"	d
IPOPT_SECUR_SECRET	slirp/ip.h	169;"	d
IPOPT_SECUR_TOPSECRET	slirp/ip.h	170;"	d
IPOPT_SECUR_UNCLASS	slirp/ip.h	164;"	d
IPOPT_SSRR	slirp/ip.h	125;"	d
IPOPT_TS	slirp/ip.h	121;"	d
IPOPT_TS_PRESPEC	slirp/ip.h	161;"	d
IPOPT_TS_TSANDADDR	slirp/ip.h	160;"	d
IPOPT_TS_TSONLY	slirp/ip.h	159;"	d
IPTOS_LOWDELAY	slirp/ip.h	101;"	d
IPTOS_RELIABILITY	slirp/ip.h	103;"	d
IPTOS_THROUGHPUT	slirp/ip.h	102;"	d
IPTTLDEC	slirp/ip.h	178;"	d
IPVERSION	slirp/ip.h	70;"	d
IP_DF	slirp/ip.h	87;"	d
IP_MAXPACKET	slirp/ip.h	96;"	d
IP_MF	slirp/ip.h	88;"	d
IP_MSS	slirp/ip.h	180;"	d
IP_OFFMASK	slirp/ip.h	89;"	d
IRQSignal	iomem.h	/^} IRQSignal;$/;"	t	typeref:struct:__anon3
InsDispatchQueue	riscvsim/inorder.h	/^typedef struct InsDispatchQueue$/;"	s
InsDispatchQueue	riscvsim/inorder.h	/^} InsDispatchQueue;$/;"	t	typeref:struct:InsDispatchQueue
InstructionCache	riscvsim/cache.h	/^    InstructionCache = 0x1,$/;"	e	enum:CacheTypes
InstructionMapEntry	riscvsim/common_core_utils.h	/^typedef struct InstructionMapEntry$/;"	s
IssueQueueEntry	riscvsim/ooo.h	/^typedef struct IssueQueueEntry$/;"	s
IssueQueueEntry	riscvsim/ooo.h	/^} IssueQueueEntry;$/;"	t	typeref:struct:IssueQueueEntry
JALR_MASK	riscvsim/riscv_sim_macros.h	62;"	d
JAL_MASK	riscvsim/riscv_sim_macros.h	61;"	d
JSONArray	json.h	/^typedef struct JSONArray {$/;"	s
JSONArray	json.h	/^} JSONArray;$/;"	t	typeref:struct:JSONArray
JSONObject	json.h	/^typedef struct JSONObject {$/;"	s
JSONObject	json.h	/^} JSONObject;$/;"	t	typeref:struct:JSONObject
JSONProperty	json.h	/^typedef struct JSONProperty {$/;"	s
JSONProperty	json.h	/^} JSONProperty;$/;"	t	typeref:struct:JSONProperty
JSONString	json.h	/^} JSONString;$/;"	t	typeref:struct:__anon38
JSONTypeEnum	json.h	/^} JSONTypeEnum;$/;"	t	typeref:enum:__anon37
JSONValue	json.h	/^typedef struct JSONValue {$/;"	s
JSONValue	json.h	/^} JSONValue;$/;"	t	typeref:struct:JSONValue
JSON_ARRAY	json.h	/^    JSON_ARRAY,$/;"	e	enum:__anon37
JSON_BOOL	json.h	/^    JSON_BOOL,$/;"	e	enum:__anon37
JSON_EXCEPTION	json.h	/^    JSON_EXCEPTION,$/;"	e	enum:__anon37
JSON_H	json.h	25;"	d
JSON_INT	json.h	/^    JSON_INT,$/;"	e	enum:__anon37
JSON_NULL	json.h	/^    JSON_NULL,$/;"	e	enum:__anon37
JSON_OBJ	json.h	/^    JSON_OBJ,$/;"	e	enum:__anon37
JSON_STR	json.h	/^    JSON_STR,$/;"	e	enum:__anon37
JSON_UNDEFINED	json.h	/^    JSON_UNDEFINED,$/;"	e	enum:__anon37
JUMP_INSN	riscv_cpu_template.h	201;"	d
K	fs_wget.c	/^    uint8_t K[HMAC_BLOCK_SIZE + SHA256_DIGEST_LENGTH];$/;"	m	struct:__anon22	file:
K	sha256.c	/^static const uint32_t K[64] = {$/;"	v	file:
KBDState	pckbd.c	/^struct KBDState {$/;"	s	file:
KBDState	ps2.h	/^typedef struct KBDState KBDState;$/;"	t	typeref:struct:KBDState
KBD_CCMD_DISABLE_A20	pckbd.c	60;"	d	file:
KBD_CCMD_ENABLE_A20	pckbd.c	61;"	d	file:
KBD_CCMD_GET_VERSION	pckbd.c	45;"	d	file:
KBD_CCMD_KBD_DISABLE	pckbd.c	51;"	d	file:
KBD_CCMD_KBD_ENABLE	pckbd.c	52;"	d	file:
KBD_CCMD_KBD_TEST	pckbd.c	50;"	d	file:
KBD_CCMD_MOUSE_DISABLE	pckbd.c	46;"	d	file:
KBD_CCMD_MOUSE_ENABLE	pckbd.c	47;"	d	file:
KBD_CCMD_READ_INPORT	pckbd.c	53;"	d	file:
KBD_CCMD_READ_MODE	pckbd.c	43;"	d	file:
KBD_CCMD_READ_OUTPORT	pckbd.c	54;"	d	file:
KBD_CCMD_RESET	pckbd.c	62;"	d	file:
KBD_CCMD_SELF_TEST	pckbd.c	49;"	d	file:
KBD_CCMD_TEST_MOUSE	pckbd.c	48;"	d	file:
KBD_CCMD_WRITE_AUX_OBUF	pckbd.c	57;"	d	file:
KBD_CCMD_WRITE_MODE	pckbd.c	44;"	d	file:
KBD_CCMD_WRITE_MOUSE	pckbd.c	59;"	d	file:
KBD_CCMD_WRITE_OBUF	pckbd.c	56;"	d	file:
KBD_CCMD_WRITE_OUTPORT	pckbd.c	55;"	d	file:
KBD_CMD_ECHO	ps2.c	42;"	d	file:
KBD_CMD_ENABLE	ps2.c	45;"	d	file:
KBD_CMD_GET_ID	ps2.c	43;"	d	file:
KBD_CMD_RESET	ps2.c	48;"	d	file:
KBD_CMD_RESET_DISABLE	ps2.c	46;"	d	file:
KBD_CMD_RESET_ENABLE	ps2.c	47;"	d	file:
KBD_CMD_SET_LEDS	ps2.c	41;"	d	file:
KBD_CMD_SET_RATE	ps2.c	44;"	d	file:
KBD_MODE_DISABLE_KBD	pckbd.c	79;"	d	file:
KBD_MODE_DISABLE_MOUSE	pckbd.c	80;"	d	file:
KBD_MODE_KBD_INT	pckbd.c	75;"	d	file:
KBD_MODE_KCC	pckbd.c	81;"	d	file:
KBD_MODE_MOUSE_INT	pckbd.c	76;"	d	file:
KBD_MODE_NO_KEYLOCK	pckbd.c	78;"	d	file:
KBD_MODE_RFU	pckbd.c	82;"	d	file:
KBD_MODE_SYS	pckbd.c	77;"	d	file:
KBD_PENDING_AUX	pckbd.c	85;"	d	file:
KBD_PENDING_KBD	pckbd.c	84;"	d	file:
KBD_REPLY_ACK	ps2.c	52;"	d	file:
KBD_REPLY_POR	ps2.c	51;"	d	file:
KBD_REPLY_RESEND	ps2.c	53;"	d	file:
KBD_STAT_CMD	pckbd.c	68;"	d	file:
KBD_STAT_GTO	pckbd.c	71;"	d	file:
KBD_STAT_IBF	pckbd.c	66;"	d	file:
KBD_STAT_MOUSE_OBF	pckbd.c	70;"	d	file:
KBD_STAT_OBF	pckbd.c	65;"	d	file:
KBD_STAT_PERR	pckbd.c	72;"	d	file:
KBD_STAT_SELFTEST	pckbd.c	67;"	d	file:
KBD_STAT_UNLOCKED	pckbd.c	69;"	d	file:
KEYCODE_MAX	sdl.c	39;"	d	file:
L1	riscvsim/cache.h	/^    L1 = 0x1,$/;"	e	enum:CacheLevels
L2	riscvsim/cache.h	/^    L2 = 0x2,$/;"	e	enum:CacheLevels
L3	riscvsim/cache.h	/^    L3 = 0x3,$/;"	e	enum:CacheLevels
LATENCY_STRING_MAX_LENGTH	machine.c	186;"	d	file:
LDFLAGS	Makefile	/^LDFLAGS=$/;"	m
LEASE_TIME	slirp/bootp.c	28;"	d	file:
LIST_H	list.h	25;"	d
LOAD32H	sha256.c	16;"	d	file:
LOAD_MASK	riscvsim/riscv_sim_macros.h	64;"	d
LOCK_FILENAME	build_filelist.c	212;"	d	file:
LOG	fs_wget.h	40;"	d
LOW_RAM_SIZE	riscv_machine.c	82;"	d	file:
LRU	riscvsim/cache.h	/^    LRU,    \/* Replace least recently used block (perfect LRU) *\/$/;"	e	enum:CacheEvictionPolicy
LSQ	riscvsim/ooo.h	/^typedef struct LSQ$/;"	s
LSQ	riscvsim/ooo.h	/^} LSQ;$/;"	t	typeref:struct:LSQ
LSQEntry	riscvsim/ooo.h	/^typedef struct LSQEntry$/;"	s
LSQEntry	riscvsim/ooo.h	/^} LSQEntry;$/;"	t	typeref:struct:LSQEntry
LTC_SMALL_CODE	sha256.c	22;"	d	file:
LUI_MASK	riscvsim/riscv_sim_macros.h	59;"	d
MANT_MASK	softfp_template.h	1104;"	d
MANT_MASK	softfp_template.h	47;"	d
MANT_SIZE	softfp_template.h	1101;"	d
MANT_SIZE	softfp_template.h	27;"	d
MANT_SIZE	softfp_template.h	35;"	d
MANT_SIZE	softfp_template.h	40;"	d
MARK_ERR	ide.c	47;"	d	file:
MARSS_STATS_SHM_NAME	riscvsim/sim_params_stats.h	43;"	d
MAXKB	aes.c	45;"	d	file:
MAXKC	aes.c	44;"	d	file:
MAXNR	aes.c	46;"	d	file:
MAXTTL	slirp/ip.h	175;"	d
MAX_CONFIG_SPACE_SIZE	virtio.c	95;"	d	file:
MAX_DRIVE_DEVICE	machine.h	45;"	d
MAX_ETH_DEVICE	machine.h	47;"	d
MAX_EXEC_CYCLE	temu.c	535;"	d	file:
MAX_FS_DEVICE	machine.h	46;"	d
MAX_FU_FPU_ALU_TYPES	riscvsim/riscv_sim_macros.h	164;"	d
MAX_INTERFACES	slirp/slirp_config.h	15;"	d
MAX_IPOPTLEN	slirp/ip.h	246;"	d
MAX_MERGE_DISTANCE	simplefb.c	46;"	d	file:
MAX_MRU	slirp/slirp.h	297;"	d
MAX_MRU	slirp/slirp.h	300;"	d
MAX_MULT_SECTORS	ide.c	192;"	d	file:
MAX_PPP_INTERFACES	slirp/slirp_config.h	16;"	d
MAX_QUEUE	virtio.c	94;"	d	file:
MAX_QUEUE_NUM	virtio.c	96;"	d	file:
MAX_SLEEP_TIME	temu.c	536;"	d	file:
MAX_STR	riscvsim/cache.c	38;"	d	file:
MAX_TCPOPTLEN	slirp/tcp_output.c	50;"	d	file:
MAX_TEXT_HEIGHT	vga.c	74;"	d	file:
MAX_TEXT_WIDTH	vga.c	73;"	d	file:
MBUF_THRESH	slirp/mbuf.c	20;"	d	file:
MCPUID_A	riscv_cpu_priv.h	85;"	d
MCPUID_C	riscv_cpu_priv.h	89;"	d
MCPUID_D	riscv_cpu_priv.h	87;"	d
MCPUID_F	riscv_cpu_priv.h	86;"	d
MCPUID_I	riscv_cpu_priv.h	83;"	d
MCPUID_M	riscv_cpu_priv.h	84;"	d
MCPUID_Q	riscv_cpu_priv.h	88;"	d
MCPUID_SUPER	riscv_cpu_priv.h	81;"	d
MCPUID_USER	riscv_cpu_priv.h	82;"	d
MCR_ERR	ide.c	50;"	d	file:
MC_ERR	ide.c	52;"	d	file:
MEMORY	riscvsim/riscv_sim_macros.h	83;"	d
MEMORY_OP_A	riscvsim/common_core_utils.c	308;"	d	file:
MEM_MODEL_BASE	riscvsim/sim_params_stats.h	/^    MEM_MODEL_BASE,$/;"	e	enum:MEM_MODEL_TYPE
MEM_MODEL_DRAMSIM	riscvsim/sim_params_stats.h	/^    MEM_MODEL_DRAMSIM,$/;"	e	enum:MEM_MODEL_TYPE
MEM_MODEL_TYPE	riscvsim/sim_params_stats.h	/^enum MEM_MODEL_TYPE$/;"	g
MEM_REQUEST_QUEUE_SIZE	riscvsim/memory_controller.h	43;"	d
MINCSIZE	slirp/mbuf.h	39;"	d
MIN_MRU	slirp/slirp.h	296;"	d
MIN_MRU	slirp/slirp.h	299;"	d
MIP_HEIP	riscv_cpu.h	50;"	d
MIP_HSIP	riscv_cpu.h	42;"	d
MIP_HTIP	riscv_cpu.h	46;"	d
MIP_MEIP	riscv_cpu.h	51;"	d
MIP_MSIP	riscv_cpu.h	43;"	d
MIP_MTIP	riscv_cpu.h	47;"	d
MIP_SEIP	riscv_cpu.h	49;"	d
MIP_SSIP	riscv_cpu.h	41;"	d
MIP_STIP	riscv_cpu.h	45;"	d
MIP_UEIP	riscv_cpu.h	48;"	d
MIP_USIP	riscv_cpu.h	40;"	d
MIP_UTIP	riscv_cpu.h	44;"	d
MLEN	riscv_cpu_xlen_typedefs.h	48;"	d
MLEN	riscv_cpu_xlen_typedefs.h	50;"	d
MLEN	riscv_cpu_xlen_typedefs.h	52;"	d
MMU	riscvsim/mmu.h	/^} MMU;$/;"	t	typeref:struct:MemoryManagementUnit
MODE_SIM_START	riscv_cpu.c	200;"	d	file:
MODE_SIM_STOP	riscv_cpu.c	201;"	d	file:
MOUSE_STATUS_ENABLED	ps2.c	74;"	d	file:
MOUSE_STATUS_REMOTE	ps2.c	73;"	d	file:
MOUSE_STATUS_SCALE21	ps2.c	75;"	d	file:
MSR_COLOR_EMULATION	vga.c	38;"	d	file:
MSR_PAGE_SELECT	vga.c	39;"	d	file:
MSTATUS_FS	riscv_cpu_priv.h	112;"	d
MSTATUS_FS_SHIFT	riscv_cpu_priv.h	97;"	d
MSTATUS_HIE	riscv_cpu_priv.h	103;"	d
MSTATUS_HPIE	riscv_cpu_priv.h	107;"	d
MSTATUS_HPP	riscv_cpu_priv.h	110;"	d
MSTATUS_MASK	riscv_cpu.c	895;"	d	file:
MSTATUS_MIE	riscv_cpu_priv.h	104;"	d
MSTATUS_MPIE	riscv_cpu_priv.h	108;"	d
MSTATUS_MPIE_SHIFT	riscv_cpu_priv.h	94;"	d
MSTATUS_MPP	riscv_cpu_priv.h	111;"	d
MSTATUS_MPP_SHIFT	riscv_cpu_priv.h	96;"	d
MSTATUS_MPRV	riscv_cpu_priv.h	114;"	d
MSTATUS_MXR	riscv_cpu_priv.h	116;"	d
MSTATUS_SIE	riscv_cpu_priv.h	102;"	d
MSTATUS_SPIE	riscv_cpu_priv.h	106;"	d
MSTATUS_SPIE_SHIFT	riscv_cpu_priv.h	93;"	d
MSTATUS_SPP	riscv_cpu_priv.h	109;"	d
MSTATUS_SPP_SHIFT	riscv_cpu_priv.h	95;"	d
MSTATUS_SUM	riscv_cpu_priv.h	115;"	d
MSTATUS_SXL_MASK	riscv_cpu_priv.h	121;"	d
MSTATUS_SXL_SHIFT	riscv_cpu_priv.h	99;"	d
MSTATUS_UIE	riscv_cpu_priv.h	101;"	d
MSTATUS_UPIE	riscv_cpu_priv.h	105;"	d
MSTATUS_UXL_MASK	riscv_cpu_priv.h	120;"	d
MSTATUS_UXL_SHIFT	riscv_cpu_priv.h	98;"	d
MSTATUS_XS	riscv_cpu_priv.h	113;"	d
M_DOFREE	slirp/mbuf.h	115;"	d
M_EXT	slirp/mbuf.h	112;"	d
M_FREELIST	slirp/mbuf.h	113;"	d
M_FREEROOM	slirp/mbuf.h	82;"	d
M_ROOM	slirp/mbuf.h	74;"	d
M_TRAILINGSPACE	slirp/mbuf.h	83;"	d
M_USEDLIST	slirp/mbuf.h	114;"	d
M_dat	slirp/mbuf.h	/^	union M_dat {$/;"	u	struct:mbuf
M_dat	slirp/mbuf.h	/^	} M_dat;$/;"	m	struct:mbuf	typeref:union:mbuf::M_dat
Maj	sha256.c	51;"	d	file:
MemAccessType	riscvsim/memory_controller_utils.h	/^typedef enum MemAccessType$/;"	g
MemAccessType	riscvsim/memory_controller_utils.h	/^} MemAccessType;$/;"	t	typeref:enum:MemAccessType
MemRequestQueue	riscvsim/memory_controller.h	/^typedef struct MemRequestQueue$/;"	s
MemRequestQueue	riscvsim/memory_controller.h	/^} MemRequestQueue;$/;"	t	typeref:struct:MemRequestQueue
MemoryController	riscvsim/memory_controller.h	/^typedef struct MemoryController$/;"	s
MemoryController	riscvsim/memory_controller.h	/^} MemoryController;$/;"	t	typeref:struct:MemoryController
MemoryManagementUnit	riscvsim/mmu.h	/^typedef struct MemoryManagementUnit$/;"	s
NB_BOOTP_CLIENTS	slirp/bootp.h	120;"	d
NDEBUG	aes.c	35;"	d	file:
NEXT_INSN	riscv_cpu_template.h	200;"	d
NO_PROTOTYPES	slirp/slirp_config.h	128;"	d
NO_PROTOTYPES	slirp/slirp_config.h	42;"	d
NO_UNIX_SOCKETS	slirp/slirp_config.h	173;"	d
NO_UNIX_SOCKETS	slirp/slirp_config.h	175;"	d
NTOHL	slirp/ip.h	38;"	d
NTOHL	slirp/ip.h	51;"	d
NTOHS	slirp/ip.h	41;"	d
NTOHS	slirp/ip.h	54;"	d
NULL	slirp/slirp.h	224;"	d
NUM_CPU_STAGES	riscvsim/riscv_sim_macros.h	86;"	d
NUM_FP_REG	riscvsim/riscv_sim_macros.h	88;"	d
NUM_FU	riscvsim/riscv_sim_macros.h	89;"	d
NUM_FWD_BUS	riscvsim/riscv_sim_macros.h	90;"	d
NUM_IMAP_ENTRY	riscvsim/riscv_sim_macros.h	97;"	d
NUM_INT_REG	riscvsim/riscv_sim_macros.h	87;"	d
NUM_MAX_FU	riscvsim/riscv_sim_macros.h	41;"	d
NUM_MAX_INS_TYPES	riscvsim/riscv_sim_macros.h	109;"	d
NUM_MAX_PRV_LEVELS	riscvsim/riscv_sim_macros.h	105;"	d
NonDirty	riscvsim/cache.h	/^    NonDirty = 0x0,$/;"	e	enum:BlockDirtyStatus
OOCore	riscvsim/ooo.h	/^typedef struct OOCore$/;"	s
OOCore	riscvsim/ooo.h	/^} OOCore;$/;"	t	typeref:struct:OOCore
OPID	riscv_cpu_fp_template.h	25;"	d
OPID	riscv_cpu_fp_template.h	28;"	d
OPID	riscv_cpu_fp_template.h	303;"	d
OPID	riscv_cpu_fp_template.h	31;"	d
OPID	riscvsim/decode_fpa_template.h	141;"	d
OPID	riscvsim/decode_fpa_template.h	33;"	d
OPID	riscvsim/decode_fpa_template.h	35;"	d
OPID	riscvsim/decode_fpa_template.h	37;"	d
OPID	riscvsim/execute_fpa_template.h	247;"	d
OPID	riscvsim/execute_fpa_template.h	31;"	d
OPID	riscvsim/execute_fpa_template.h	34;"	d
OPID	riscvsim/execute_fpa_template.h	37;"	d
OPID	riscvsim/fpa_str_creator_template.h	312;"	d
OPID	riscvsim/fpa_str_creator_template.h	31;"	d
OPID	riscvsim/fpa_str_creator_template.h	34;"	d
OPID	riscvsim/fpa_str_creator_template.h	37;"	d
OP_A	riscv_cpu_template.h	1567;"	d
OP_A	riscv_cpu_template.h	1943;"	d
OP_IMM_32_MASK	riscvsim/riscv_sim_macros.h	56;"	d
OP_IMM_MASK	riscvsim/riscv_sim_macros.h	55;"	d
OP_MASK	riscvsim/riscv_sim_macros.h	57;"	d
OP_MASK_32	riscvsim/riscv_sim_macros.h	58;"	d
O_BINARY	slirp/slirp.h	29;"	d
P9OpenInfo	virtio.c	/^} P9OpenInfo;$/;"	t	typeref:struct:__anon18	file:
P9_EEXIST	fs.h	86;"	d
P9_EINVAL	fs.h	88;"	d
P9_EIO	fs.h	85;"	d
P9_ENOENT	fs.h	84;"	d
P9_ENOSPC	fs.h	89;"	d
P9_ENOTDIR	fs.h	87;"	d
P9_ENOTEMPTY	fs.h	90;"	d
P9_ENOTSUP	fs.h	92;"	d
P9_EPERM	fs.h	83;"	d
P9_EPROTO	fs.h	91;"	d
P9_LOCK_BLOCKED	fs.h	138;"	d
P9_LOCK_ERROR	fs.h	139;"	d
P9_LOCK_FLAGS_BLOCK	fs.h	134;"	d
P9_LOCK_FLAGS_RECLAIM	fs.h	135;"	d
P9_LOCK_GRACE	fs.h	140;"	d
P9_LOCK_SUCCESS	fs.h	137;"	d
P9_LOCK_TYPE_RDLCK	fs.h	130;"	d
P9_LOCK_TYPE_UNLCK	fs.h	132;"	d
P9_LOCK_TYPE_WRLCK	fs.h	131;"	d
P9_O_APPEND	fs.h	60;"	d
P9_O_CLOEXEC	fs.h	69;"	d
P9_O_CREAT	fs.h	56;"	d
P9_O_DIRECT	fs.h	64;"	d
P9_O_DIRECTORY	fs.h	66;"	d
P9_O_DSYNC	fs.h	62;"	d
P9_O_EXCL	fs.h	57;"	d
P9_O_FASYNC	fs.h	63;"	d
P9_O_LARGEFILE	fs.h	65;"	d
P9_O_NOACCESS	fs.h	55;"	d
P9_O_NOATIME	fs.h	68;"	d
P9_O_NOCTTY	fs.h	58;"	d
P9_O_NOFOLLOW	fs.h	67;"	d
P9_O_NONBLOCK	fs.h	61;"	d
P9_O_RDONLY	fs.h	52;"	d
P9_O_RDWR	fs.h	54;"	d
P9_O_SYNC	fs.h	70;"	d
P9_O_TRUNC	fs.h	59;"	d
P9_O_WRONLY	fs.h	53;"	d
P9_QTAPPEND	fs.h	27;"	d
P9_QTAUTH	fs.h	30;"	d
P9_QTDIR	fs.h	26;"	d
P9_QTEXCL	fs.h	28;"	d
P9_QTFILE	fs.h	34;"	d
P9_QTLINK	fs.h	33;"	d
P9_QTMOUNT	fs.h	29;"	d
P9_QTSYMLINK	fs.h	32;"	d
P9_QTTMP	fs.h	31;"	d
P9_SETATTR_ATIME	fs.h	77;"	d
P9_SETATTR_ATIME_SET	fs.h	80;"	d
P9_SETATTR_CTIME	fs.h	79;"	d
P9_SETATTR_GID	fs.h	75;"	d
P9_SETATTR_MODE	fs.h	73;"	d
P9_SETATTR_MTIME	fs.h	78;"	d
P9_SETATTR_MTIME_SET	fs.h	81;"	d
P9_SETATTR_SIZE	fs.h	76;"	d
P9_SETATTR_UID	fs.h	74;"	d
P9_S_IFBLK	fs.h	46;"	d
P9_S_IFCHR	fs.h	44;"	d
P9_S_IFDIR	fs.h	45;"	d
P9_S_IFIFO	fs.h	43;"	d
P9_S_IFLNK	fs.h	48;"	d
P9_S_IFMT	fs.h	42;"	d
P9_S_IFREG	fs.h	47;"	d
P9_S_IFSOCK	fs.h	49;"	d
P9_S_IRWXUGO	fs.h	37;"	d
P9_S_ISGID	fs.h	39;"	d
P9_S_ISUID	fs.h	40;"	d
P9_S_ISVTX	fs.h	38;"	d
PAG	riscvsim/adaptive_predictor.c	39;"	d	file:
PAP	riscvsim/adaptive_predictor.c	40;"	d	file:
PCGEN	riscvsim/riscv_sim_macros.h	80;"	d
PCIBarSetFunc	pci.h	/^typedef void PCIBarSetFunc(void *opaque, int bar_num, uint32_t addr,$/;"	t
PCIBus	pci.c	/^struct PCIBus {$/;"	s	file:
PCIBus	pci.h	/^typedef struct PCIBus PCIBus;$/;"	t	typeref:struct:PCIBus
PCIDevice	pci.c	/^struct PCIDevice {$/;"	s	file:
PCIDevice	pci.h	/^typedef struct PCIDevice PCIDevice;$/;"	t	typeref:struct:PCIDevice
PCIIORegion	pci.c	/^} PCIIORegion;$/;"	t	typeref:struct:__anon1	file:
PCI_ADDRESS_SPACE_IO	pci.h	34;"	d
PCI_ADDRESS_SPACE_MEM	pci.h	33;"	d
PCI_ADDRESS_SPACE_MEM_PREFETCH	pci.h	35;"	d
PCI_CAPABILITY_LIST	pci.h	51;"	d
PCI_CLASS_PROG	pci.h	48;"	d
PCI_COMMAND	pci.h	43;"	d
PCI_COMMAND_IO	pci.h	44;"	d
PCI_COMMAND_MEMORY	pci.h	45;"	d
PCI_DEVICE_ID	pci.h	42;"	d
PCI_H	pci.h	25;"	d
PCI_INTERRUPT_LINE	pci.h	52;"	d
PCI_INTERRUPT_PIN	pci.h	53;"	d
PCI_NUM_REGIONS	pci.h	38;"	d
PCI_ROM_SLOT	pci.h	37;"	d
PCI_STATUS	pci.h	46;"	d
PCI_STATUS_CAP_LIST	pci.h	47;"	d
PCI_SUBSYSTEM_ID	pci.h	50;"	d
PCI_SUBSYSTEM_VENDOR_ID	pci.h	49;"	d
PCI_VENDOR_ID	pci.h	41;"	d
PFN_GET_VICTIM_INDEX	riscvsim/cache.h	/^typedef int (*PFN_GET_VICTIM_INDEX)(const struct Cache *c, int set);$/;"	t
PFN_READ_ALLOC_HANDLER	riscvsim/cache.h	/^typedef int (*PFN_READ_ALLOC_HANDLER)(const struct Cache *c, target_ulong paddr,$/;"	t
PFN_VICTIM_EVICTION_HANDLER	riscvsim/cache.h	/^typedef int (*PFN_VICTIM_EVICTION_HANDLER)(const struct Cache *c, struct CacheBlk *pBlk,$/;"	t
PFN_WRITE_ALLOC_HANDLER	riscvsim/cache.h	/^typedef int (*PFN_WRITE_ALLOC_HANDLER)(const struct Cache *c, target_ulong paddr,$/;"	t
PFN_WRITE_HANDLER	riscvsim/cache.h	/^typedef int (*PFN_WRITE_HANDLER)(const struct Cache *c, target_ulong paddr,$/;"	t
PG_MASK	riscv_cpu_priv.h	124;"	d
PG_SHIFT	riscv_cpu_priv.h	123;"	d
PHTEntry	riscvsim/adaptive_predictor.h	/^typedef struct PHTEntry$/;"	s
PHTEntry	riscvsim/adaptive_predictor.h	/^} PHTEntry;$/;"	t	typeref:struct:PHTEntry
PHYS_MEM_RANGE_MAX	iomem.h	66;"	d
PHYS_MEM_READ_WRITE	riscv_cpu.c	167;"	d	file:
PIPELINE_DRAINED	riscvsim/riscv_sim_macros.h	103;"	d
PIPELINE_NOT_DRAINED	riscvsim/riscv_sim_macros.h	102;"	d
PLIC_BASE_ADDR	riscv_machine.c	93;"	d	file:
PLIC_HART_BASE	riscv_machine.c	462;"	d	file:
PLIC_HART_SIZE	riscv_machine.c	463;"	d	file:
PLIC_SIZE	riscv_machine.c	94;"	d	file:
POSIX_IPC_NAME_PREFIX	riscvsim/sim_params_stats.h	42;"	d
PRED_NOT_TAKEN	riscvsim/adaptive_predictor.c	45;"	d	file:
PRED_TAKEN	riscvsim/adaptive_predictor.c	46;"	d	file:
PREFETCH_GROUP_LEN_MAX	block_net.c	57;"	d	file:
PRINT_INIT_MSG	riscvsim/riscv_sim_macros.h	137;"	d
PRINT_PROG_TITLE_MSG	riscvsim/riscv_sim_macros.h	138;"	d
PRINT_SIM_STAT	riscvsim/sim_params_stats.h	187;"	d
PRINT_SIM_STAT_HEADER	riscvsim/sim_params_stats.h	181;"	d
PRINT_SIM_STAT_HEADER_TO_TERMINAL	riscvsim/sim_params_stats.h	194;"	d
PRINT_SIM_STAT_TO_TERMINAL	riscvsim/sim_params_stats.h	200;"	d
PROBE_CONN	slirp/slirp_config.h	7;"	d
PROTO_PPP	slirp/main.h	42;"	d
PROTO_SLIP	slirp/main.h	40;"	d
PRV_H	riscv_cpu_priv.h	77;"	d
PRV_M	riscv_cpu_priv.h	78;"	d
PRV_S	riscv_cpu_priv.h	76;"	d
PRV_U	riscv_cpu_priv.h	75;"	d
PR_FASTHZ	slirp/tcp.h	39;"	d
PR_SLOWHZ	slirp/tcp.h	38;"	d
PR_target_ulong	riscv_cpu_xlen_typedefs.h	15;"	d
PR_target_ulong	riscv_cpu_xlen_typedefs.h	19;"	d
PR_target_ulong	riscv_cpu_xlen_typedefs.h	23;"	d
PS2KbdState	ps2.c	/^struct  PS2KbdState {$/;"	s	file:
PS2KbdState	ps2.h	/^typedef struct PS2KbdState PS2KbdState;$/;"	t	typeref:struct:PS2KbdState
PS2MouseState	ps2.c	/^struct PS2MouseState {$/;"	s	file:
PS2MouseState	ps2.h	/^typedef struct PS2MouseState PS2MouseState;$/;"	t	typeref:struct:PS2MouseState
PS2Queue	ps2.c	/^} PS2Queue;$/;"	t	typeref:struct:__anon42	file:
PS2State	ps2.c	/^} PS2State;$/;"	t	typeref:struct:__anon43	file:
PS2_QUEUE_SIZE	ps2.c	77;"	d	file:
PTE_A_MASK	riscv_cpu.c	193;"	d	file:
PTE_D_MASK	riscv_cpu.c	194;"	d	file:
PTE_U_MASK	riscv_cpu.c	192;"	d	file:
PTE_V_MASK	riscv_cpu.c	191;"	d	file:
PUTU32	aes.c	51;"	d	file:
PendingMemAccessEntry	riscvsim/memory_controller_utils.h	/^typedef struct PendingMemAccessEntry$/;"	s
PendingMemAccessEntry	riscvsim/memory_controller_utils.h	/^} PendingMemAccessEntry;$/;"	t	typeref:struct:PendingMemAccessEntry
PhysMemoryMap	iomem.h	/^struct PhysMemoryMap {$/;"	s
PhysMemoryMap	iomem.h	/^typedef struct PhysMemoryMap PhysMemoryMap;$/;"	t	typeref:struct:PhysMemoryMap
PhysMemoryRange	iomem.h	/^} PhysMemoryRange;$/;"	t	typeref:struct:__anon2
PrefetchGroupRequest	block_net.c	/^} PrefetchGroupRequest;$/;"	t	typeref:struct:__anon9	file:
PreloadArchive	fs_net.c	/^} PreloadArchive;$/;"	t	typeref:struct:__anon71	file:
PreloadArchiveFile	fs_net.c	/^} PreloadArchiveFile;$/;"	t	typeref:struct:__anon70	file:
PreloadEntry	fs_net.c	/^} PreloadEntry;$/;"	t	typeref:struct:__anon69	file:
PreloadFile	fs_net.c	/^} PreloadFile;$/;"	t	typeref:struct:__anon68	file:
QNAN_MASK	softfp_template.h	1108;"	d
QNAN_MASK	softfp_template.h	51;"	d
QueueState	virtio.c	/^} QueueState;$/;"	t	typeref:struct:__anon10	file:
R	sha256.c	53;"	d	file:
RAM_BASE_ADDR	riscv_machine.c	83;"	d	file:
READY_STAT	ide.c	43;"	d	file:
REALTIME_STATS_CLOCK_CYCLES_INTERVAL	riscvsim/riscv_sim_macros.h	146;"	d
REDUCE	slirp/cksum.c	45;"	d	file:
REG_EAX	vmmouse.c	36;"	d	file:
REG_EBX	vmmouse.c	37;"	d	file:
REG_ECX	vmmouse.c	38;"	d	file:
REG_EDI	vmmouse.c	41;"	d	file:
REG_EDX	vmmouse.c	39;"	d	file:
REG_ESI	vmmouse.c	40;"	d	file:
REG_STATE_LOADED	fs_net.c	/^    REG_STATE_LOADED, \/* loaded, not modified, stored in cached_inode_list *\/$/;"	e	enum:__anon59	file:
REG_STATE_LOADING	fs_net.c	/^    REG_STATE_LOADING, \/* content is being loaded *\/$/;"	e	enum:__anon59	file:
REG_STATE_LOCAL	fs_net.c	/^    REG_STATE_LOCAL, \/* local content *\/$/;"	e	enum:__anon59	file:
REG_STATE_UNLOADED	fs_net.c	/^    REG_STATE_UNLOADED, \/* content not loaded *\/$/;"	e	enum:__anon59	file:
REL	ide.c	60;"	d	file:
REL_WHEEL	virtio.c	1390;"	d	file:
REL_X	virtio.c	1387;"	d	file:
REL_Y	virtio.c	1388;"	d	file:
REL_Z	virtio.c	1389;"	d	file:
RFC1533_BOOTFILESIZE	slirp/bootp.h	23;"	d
RFC1533_COOKIE	slirp/bootp.h	9;"	d
RFC1533_COOKIESERVER	slirp/bootp.h	18;"	d
RFC1533_DNS	slirp/bootp.h	16;"	d
RFC1533_DOMAINNAME	slirp/bootp.h	25;"	d
RFC1533_END	slirp/bootp.h	91;"	d
RFC1533_EXTENSIONPATH	slirp/bootp.h	28;"	d
RFC1533_GATEWAY	slirp/bootp.h	13;"	d
RFC1533_HOSTNAME	slirp/bootp.h	22;"	d
RFC1533_IEN116NS	slirp/bootp.h	15;"	d
RFC1533_IMPRESSSERVER	slirp/bootp.h	20;"	d
RFC1533_INTBROADCAST	slirp/bootp.h	38;"	d
RFC1533_INTICMPDISCOVER	slirp/bootp.h	39;"	d
RFC1533_INTICMPRESPOND	slirp/bootp.h	40;"	d
RFC1533_INTLOCALSUBNETS	slirp/bootp.h	37;"	d
RFC1533_INTMTU	slirp/bootp.h	36;"	d
RFC1533_INTROUTEDISCOVER	slirp/bootp.h	41;"	d
RFC1533_INTROUTESOLICIT	slirp/bootp.h	42;"	d
RFC1533_INTSTATICROUTES	slirp/bootp.h	43;"	d
RFC1533_IPFORWARDING	slirp/bootp.h	29;"	d
RFC1533_IPMAXREASSEMBLY	slirp/bootp.h	32;"	d
RFC1533_IPMTU	slirp/bootp.h	34;"	d
RFC1533_IPMTUPLATEAU	slirp/bootp.h	35;"	d
RFC1533_IPPOLICYFILTER	slirp/bootp.h	31;"	d
RFC1533_IPSOURCEROUTING	slirp/bootp.h	30;"	d
RFC1533_IPTTL	slirp/bootp.h	33;"	d
RFC1533_LLARPCACHETMO	slirp/bootp.h	45;"	d
RFC1533_LLETHERNETENCAP	slirp/bootp.h	46;"	d
RFC1533_LLTRAILERENCAP	slirp/bootp.h	44;"	d
RFC1533_LOGSERVER	slirp/bootp.h	17;"	d
RFC1533_LPRSERVER	slirp/bootp.h	19;"	d
RFC1533_MERITDUMPFILE	slirp/bootp.h	24;"	d
RFC1533_NBDD	slirp/bootp.h	55;"	d
RFC1533_NBNS	slirp/bootp.h	54;"	d
RFC1533_NBNT	slirp/bootp.h	56;"	d
RFC1533_NBSCOPE	slirp/bootp.h	57;"	d
RFC1533_NETMASK	slirp/bootp.h	11;"	d
RFC1533_NISDOMAIN	slirp/bootp.h	50;"	d
RFC1533_NISSERVER	slirp/bootp.h	51;"	d
RFC1533_NTPSERVER	slirp/bootp.h	52;"	d
RFC1533_PAD	slirp/bootp.h	10;"	d
RFC1533_RESOURCESERVER	slirp/bootp.h	21;"	d
RFC1533_ROOTPATH	slirp/bootp.h	27;"	d
RFC1533_SWAPSERVER	slirp/bootp.h	26;"	d
RFC1533_TCPKEEPALIVEGB	slirp/bootp.h	49;"	d
RFC1533_TCPKEEPALIVETMO	slirp/bootp.h	48;"	d
RFC1533_TCPTTL	slirp/bootp.h	47;"	d
RFC1533_TIMEOFFSET	slirp/bootp.h	12;"	d
RFC1533_TIMESERVER	slirp/bootp.h	14;"	d
RFC1533_VENDOR	slirp/bootp.h	53;"	d
RFC1533_VENDOR_ADDPARM	slirp/bootp.h	81;"	d
RFC1533_VENDOR_ETHDEV	slirp/bootp.h	82;"	d
RFC1533_VENDOR_HOWTO	slirp/bootp.h	83;"	d
RFC1533_VENDOR_IMG	slirp/bootp.h	88;"	d
RFC1533_VENDOR_MAGIC	slirp/bootp.h	80;"	d
RFC1533_VENDOR_MAJOR	slirp/bootp.h	77;"	d
RFC1533_VENDOR_MINOR	slirp/bootp.h	78;"	d
RFC1533_VENDOR_MNUOPTS	slirp/bootp.h	84;"	d
RFC1533_VENDOR_MOTD	slirp/bootp.h	86;"	d
RFC1533_VENDOR_NUMOFIMG	slirp/bootp.h	89;"	d
RFC1533_VENDOR_NUMOFMOTD	slirp/bootp.h	87;"	d
RFC1533_VENDOR_SELECTION	slirp/bootp.h	85;"	d
RFC1533_XDM	slirp/bootp.h	59;"	d
RFC1533_XFS	slirp/bootp.h	58;"	d
RFC2132_LEASE_TIME	slirp/bootp.h	62;"	d
RFC2132_MAX_SIZE	slirp/bootp.h	67;"	d
RFC2132_MESSAGE	slirp/bootp.h	66;"	d
RFC2132_MSG_TYPE	slirp/bootp.h	63;"	d
RFC2132_PARAM_LIST	slirp/bootp.h	65;"	d
RFC2132_REBIND_TIME	slirp/bootp.h	69;"	d
RFC2132_RENEWAL_TIME	slirp/bootp.h	68;"	d
RFC2132_REQ_ADDR	slirp/bootp.h	61;"	d
RFC2132_SRV_ID	slirp/bootp.h	64;"	d
RISCVCPUClass	riscv_cpu.h	/^} RISCVCPUClass;$/;"	t	typeref:struct:__anon25
RISCVCPUCommonState	riscv_cpu.h	/^} RISCVCPUCommonState;$/;"	t	typeref:struct:__anon26
RISCVCPUState	riscv_cpu.h	/^typedef struct RISCVCPUState RISCVCPUState;$/;"	t	typeref:struct:RISCVCPUState
RISCVCPUState	riscv_cpu_priv.h	/^  } RISCVCPUState;$/;"	t	typeref:struct:RISCVCPUState
RISCVCPUState	riscv_cpu_priv.h	/^typedef struct RISCVCPUState {$/;"	s
RISCVMachine	riscv_machine.c	/^typedef struct RISCVMachine {$/;"	s	file:
RISCVMachine	riscv_machine.c	/^} RISCVMachine;$/;"	t	typeref:struct:RISCVMachine	file:
RISCVSIMCPUState	riscvsim/riscv_sim_cpu.h	/^typedef struct RISCVSIMCPUState$/;"	s
RISCVSIMCPUState	riscvsim/riscv_sim_cpu.h	/^} RISCVSIMCPUState;$/;"	t	typeref:struct:RISCVSIMCPUState
RISCV_CPU_H	riscv_cpu.h	33;"	d
RISCV_CPU_PRIV_H	riscv_cpu_priv.h	33;"	d
RISCV_INS_STR_MAX_LENGTH	riscvsim/riscv_sim_macros.h	94;"	d
RM_RDN	softfp.h	/^    RM_RDN, \/* Round Down *\/$/;"	e	enum:__anon40
RM_RMM	softfp.h	/^    RM_RMM, \/* Round to Nearest, ties to Max Magnitude *\/$/;"	e	enum:__anon40
RM_RNE	softfp.h	/^    RM_RNE, \/* Round to Nearest, ties to Even *\/$/;"	e	enum:__anon40
RM_RTZ	softfp.h	/^    RM_RTZ, \/* Round towards Zero *\/$/;"	e	enum:__anon40
RM_RUP	softfp.h	/^    RM_RUP, \/* Round Up *\/$/;"	e	enum:__anon40
RND	sha256.c	85;"	d	file:
RND_SIZE	softfp_template.h	1107;"	d
RND_SIZE	softfp_template.h	50;"	d
ROB	riscvsim/ooo.h	/^} ROB;$/;"	t	typeref:struct:ReOrderBuffer
ROBEntry	riscvsim/ooo.h	/^typedef struct ROBEntry$/;"	s
ROBEntry	riscvsim/ooo.h	/^} ROBEntry;$/;"	t	typeref:struct:ROBEntry
ROOT_FILENAME	fs_utils.h	25;"	d
RORc	sha256.c	19;"	d	file:
RTC_FREQ	riscv_machine.c	100;"	d	file:
RTC_FREQ_DIV	riscv_machine.c	101;"	d	file:
RV32	riscvsim/riscv_sim_typedefs.h	38;"	d
RV64	riscvsim/riscv_sim_typedefs.h	41;"	d
RVInstruction	riscvsim/riscv_instruction.h	/^typedef struct RVInstruction$/;"	s
RVInstruction	riscvsim/riscv_instruction.h	/^} RVInstruction;$/;"	t	typeref:struct:RVInstruction
Random	riscvsim/cache.h	/^    Random, \/* Replace a random block *\/$/;"	e	enum:CacheEvictionPolicy
Ras	riscvsim/ras.h	/^typedef struct Ras$/;"	s
Ras	riscvsim/ras.h	/^} Ras;$/;"	t	typeref:struct:Ras
ReOrderBuffer	riscvsim/ooo.h	/^typedef struct ReOrderBuffer$/;"	s
Read	riscvsim/memory_controller_utils.h	/^    Read = 0x0,$/;"	e	enum:MemAccessType
ReadAllocate	riscvsim/cache.h	/^    ReadAllocate = 0x0,$/;"	e	enum:CacheReadAllocPolicy
ReadNoAllocate	riscvsim/cache.h	/^    ReadNoAllocate = 0x1,$/;"	e	enum:CacheReadAllocPolicy
RenameTableEntry	riscvsim/ooo.h	/^typedef struct RenameTableEntry$/;"	s
RenameTableEntry	riscvsim/ooo.h	/^} RenameTableEntry;$/;"	t	typeref:struct:RenameTableEntry
RoundingModeEnum	softfp.h	/^} RoundingModeEnum;$/;"	t	typeref:enum:__anon40
S	sha256.c	52;"	d	file:
SA	slirp/ip_input.c	552;"	d	file:
SALT_LEN_MAX	fs_wget.c	578;"	d	file:
SECTOR_SIZE	temu.c	216;"	d	file:
SECTOR_SIZE	virtio.c	1014;"	d	file:
SEEK_STAT	ide.c	40;"	d	file:
SEQ_GEQ	slirp/tcp.h	149;"	d
SEQ_GT	slirp/tcp.h	148;"	d
SEQ_LEQ	slirp/tcp.h	147;"	d
SEQ_LT	slirp/tcp.h	146;"	d
SHA256	sha256.c	/^void SHA256(const uint8_t *buf, int buf_len, uint8_t *out)$/;"	f
SHA256_CTX	sha256.h	/^} SHA256_CTX;$/;"	t	typeref:struct:__anon24
SHA256_DIGEST_LENGTH	sha256.h	27;"	d
SHA256_Final	sha256.c	/^void SHA256_Final(uint8_t *out, SHA256_CTX *s)$/;"	f
SHA256_H	sha256.h	25;"	d
SHA256_Init	sha256.c	/^void SHA256_Init(SHA256_CTX *s)$/;"	f
SHA256_Update	sha256.c	/^void SHA256_Update(SHA256_CTX *s, const uint8_t *in, unsigned long inlen)$/;"	f
SIGN_MASK	softfp_template.h	1105;"	d
SIGN_MASK	softfp_template.h	48;"	d
SIM_BPU_OBJS	Makefile	/^SIM_BPU_OBJS:=$(addprefix riscvsim\/, ras.o bht.o btb.o adaptive_predictor.o bpu.o)$/;"	m
SIM_CACHE_OBJS	Makefile	/^SIM_CACHE_OBJS:=$(addprefix riscvsim\/, mmu.o memory_controller.o cache.o )$/;"	m
SIM_COMPLEX_OPCODE	riscvsim/riscv_sim_macros.h	142;"	d
SIM_CORE_OBJS	Makefile	/^SIM_CORE_OBJS:=$(addprefix riscvsim\/, riscv_sim_cpu.o)$/;"	m
SIM_DECODER_OBJS	Makefile	/^SIM_DECODER_OBJS:=$(addprefix riscvsim\/, riscv_ins_str_creator.o riscv_isa_decoder.o riscv_ins_execute.o)$/;"	m
SIM_FLEN	riscvsim/riscv_sim_typedefs.h	45;"	d
SIM_ILLEGAL_OPCODE	riscvsim/riscv_sim_macros.h	141;"	d
SIM_IN_CORE_OBJS	Makefile	/^SIM_IN_CORE_OBJS:=$(addprefix riscvsim\/, inorder_frontend.o inorder_backend.o inorder.o)$/;"	m
SIM_MMU_EXCEPTION	riscvsim/riscv_sim_macros.h	144;"	d
SIM_OBJS	Makefile	/^SIM_OBJS:=$(SIM_UTILS) $(SIM_DECODER_OBJS) $(SIM_BPU_OBJS) $(SIM_CACHE_OBJS) $(SIM_CORE_OBJS) $(SIM_IN_CORE_OBJS) $(SIM_OO_CORE_OBJS)$/;"	m
SIM_OBJ_FILE	Makefile	/^SIM_OBJ_FILE=riscvsim.o$/;"	m
SIM_OO_CORE_OBJS	Makefile	/^SIM_OO_CORE_OBJS:=$(addprefix riscvsim\/, ooo_frontend.o ooo_branch.o ooo_lsu.o ooo_backend.o ooo.o)$/;"	m
SIM_PARAM_STATUS	riscvsim/sim_params_stats.h	/^enum SIM_PARAM_STATUS$/;"	g
SIM_START	share/test.c	2;"	d	file:
SIM_STOP	share/test.c	3;"	d	file:
SIM_TIMEOUT_EXCEPTION	riscvsim/riscv_sim_macros.h	143;"	d
SIM_UTILS	Makefile	/^SIM_UTILS:=$(addprefix riscvsim\/, circular_queue.o common_core_utils.o sim_params_stats.o)$/;"	m
SIZEOF_CHAR	slirp/slirp_config.h	131;"	d
SIZEOF_CHAR_P	slirp/slirp_config.h	140;"	d
SIZEOF_INT	slirp/slirp_config.h	137;"	d
SIZEOF_SHORT	slirp/slirp_config.h	134;"	d
SLIRP_MSIZE	slirp/mbuf.c	26;"	d	file:
SOFTFP_H	softfp.h	25;"	d
SO_EXPIRE	slirp/socket.h	11;"	d
SO_EXPIREFAST	slirp/socket.h	12;"	d
SO_OPTIONS	slirp/slirp.h	253;"	d
SPEC_REG_STATE_ENTRY	riscvsim/riscv_sim_macros.h	92;"	d
SRV_STAT	ide.c	41;"	d	file:
SSTATUS_MASK	riscv_cpu.c	889;"	d	file:
SSTATUS_MASK	riscv_cpu.c	891;"	d	file:
SSTATUS_MASK0	riscv_cpu.c	883;"	d	file:
SS_CTL	slirp/socket.h	69;"	d
SS_FACCEPTCONN	slirp/socket.h	70;"	d
SS_FACCEPTONCE	slirp/socket.h	71;"	d
SS_FCANTRCVMORE	slirp/socket.h	65;"	d
SS_FCANTSENDMORE	slirp/socket.h	66;"	d
SS_FWDRAIN	slirp/socket.h	67;"	d
SS_HOSTFWD	slirp/socket.h	74;"	d
SS_INCOMING	slirp/socket.h	75;"	d
SS_ISFCONNECTED	slirp/socket.h	64;"	d
SS_ISFCONNECTING	slirp/socket.h	63;"	d
SS_NOFDREF	slirp/socket.h	61;"	d
SS_PERSISTENT_MASK	slirp/socket.h	73;"	d
ST01_DISP_ENABLE	vga.c	42;"	d	file:
ST01_V_RETRACE	vga.c	41;"	d	file:
START_SIM_TIMER	riscv_cpu_priv.h	127;"	d
STDIODevice	temu.c	/^} STDIODevice;$/;"	t	typeref:struct:__anon33	file:
STOP_SIM_TIMER	riscv_cpu_priv.h	128;"	d
STORE32H	sha256.c	17;"	d	file:
STORE64H	sha256.c	18;"	d	file:
STORE_MASK	riscvsim/riscv_sim_macros.h	65;"	d
STRIP	Makefile	/^STRIP=$(CROSS_PREFIX)strip$/;"	m
ScanState	build_filelist.c	/^} ScanState;$/;"	t	typeref:struct:__anon7	file:
SetIRQFunc	iomem.h	/^typedef void SetIRQFunc(void *opaque, int irq_num, int level);$/;"	t
SharedCache	riscvsim/cache.h	/^    SharedCache = 0x3,$/;"	e	enum:CacheTypes
Sigma0	sha256.c	54;"	d	file:
Sigma1	sha256.c	55;"	d	file:
SimParams	machine.h	/^typedef struct SimParams SimParams;$/;"	t	typeref:struct:SimParams
SimParams	riscvsim/sim_params_stats.h	/^typedef struct SimParams$/;"	s
SimParams	riscvsim/sim_params_stats.h	/^} SimParams;$/;"	t	typeref:struct:SimParams
SimStats	riscvsim/sim_params_stats.h	/^typedef struct SimStats$/;"	s
SimStats	riscvsim/sim_params_stats.h	/^} SimStats;$/;"	t	typeref:struct:SimStats
SimTracePacket	riscvsim/common_core_utils.h	/^typedef struct SimTracePacket$/;"	s
SimTracePacket	riscvsim/common_core_utils.h	/^} SimTracePacket;$/;"	t	typeref:struct:SimTracePacket
SimpleFBDrawFunc	machine.h	/^typedef void SimpleFBDrawFunc(FBDevice *fb_dev, void *opaque,$/;"	t
SimpleFBState	machine.h	/^typedef struct SimpleFBState SimpleFBState;$/;"	t	typeref:struct:SimpleFBState
SimpleFBState	simplefb.c	/^struct SimpleFBState {$/;"	s	file:
Slirp	slirp/libslirp.h	/^typedef struct Slirp Slirp;$/;"	t	typeref:struct:Slirp
Slirp	slirp/slirp.h	/^struct Slirp {$/;"	s
SoftFPMinMaxTypeEnum	softfp.h	/^} SoftFPMinMaxTypeEnum;$/;"	t	typeref:enum:__anon41
StageMemAccessQueue	riscvsim/memory_controller_utils.h	/^typedef struct StageMemAccessQueue$/;"	s
StageMemAccessQueue	riscvsim/memory_controller_utils.h	/^} StageMemAccessQueue;$/;"	t	typeref:struct:StageMemAccessQueue
TAG_MASK	ide.c	61;"	d	file:
TARGET_LONG_FMT	riscvsim/riscv_sim_typedefs.h	51;"	d
TARGET_LONG_FMT	riscvsim/riscv_sim_typedefs.h	60;"	d
TARGET_LONG_SCN	riscvsim/riscv_sim_typedefs.h	53;"	d
TARGET_LONG_SCN	riscvsim/riscv_sim_typedefs.h	62;"	d
TARGET_READ_WRITE	riscv_cpu_priv.h	269;"	d
TARGET_ULONG_FMT	riscvsim/riscv_sim_typedefs.h	50;"	d
TARGET_ULONG_FMT	riscvsim/riscv_sim_typedefs.h	59;"	d
TARGET_ULONG_HEX	riscvsim/riscv_sim_typedefs.h	54;"	d
TARGET_ULONG_HEX	riscvsim/riscv_sim_typedefs.h	63;"	d
TARGET_ULONG_SCN	riscvsim/riscv_sim_typedefs.h	52;"	d
TARGET_ULONG_SCN	riscvsim/riscv_sim_typedefs.h	61;"	d
TCPOLEN_MAXSEG	slirp/tcp.h	77;"	d
TCPOLEN_SACK_PERMITTED	slirp/tcp.h	81;"	d
TCPOLEN_TIMESTAMP	slirp/tcp.h	84;"	d
TCPOLEN_TSTAMP_APPA	slirp/tcp.h	85;"	d
TCPOLEN_WINDOW	slirp/tcp.h	79;"	d
TCPOOB_HADDATA	slirp/tcp_var.h	115;"	d
TCPOOB_HAVEDATA	slirp/tcp_var.h	114;"	d
TCPOPT_EOL	slirp/tcp.h	74;"	d
TCPOPT_MAXSEG	slirp/tcp.h	76;"	d
TCPOPT_NOP	slirp/tcp.h	75;"	d
TCPOPT_SACK	slirp/tcp.h	82;"	d
TCPOPT_SACK_PERMITTED	slirp/tcp.h	80;"	d
TCPOPT_TIMESTAMP	slirp/tcp.h	83;"	d
TCPOPT_TSTAMP_HDR	slirp/tcp.h	87;"	d
TCPOPT_WINDOW	slirp/tcp.h	78;"	d
TCPREXMTTHRESH	slirp/tcp_input.c	44;"	d	file:
TCPS_CLOSED	slirp/tcp.h	122;"	d
TCPS_CLOSE_WAIT	slirp/tcp.h	128;"	d
TCPS_CLOSING	slirp/tcp.h	131;"	d
TCPS_ESTABLISHED	slirp/tcp.h	127;"	d
TCPS_FIN_WAIT_1	slirp/tcp.h	130;"	d
TCPS_FIN_WAIT_2	slirp/tcp.h	134;"	d
TCPS_HAVEESTABLISHED	slirp/tcp.h	138;"	d
TCPS_HAVERCVDFIN	slirp/tcp.h	139;"	d
TCPS_HAVERCVDSYN	slirp/tcp.h	137;"	d
TCPS_LAST_ACK	slirp/tcp.h	132;"	d
TCPS_LISTEN	slirp/tcp.h	123;"	d
TCPS_SYN_RECEIVED	slirp/tcp.h	125;"	d
TCPS_SYN_SENT	slirp/tcp.h	124;"	d
TCPS_TIME_WAIT	slirp/tcp.h	135;"	d
TCPTV_KEEPCNT	slirp/tcp_timer.h	98;"	d
TCPTV_KEEPINTVL	slirp/tcp_timer.h	97;"	d
TCPTV_KEEP_IDLE	slirp/tcp_timer.h	96;"	d
TCPTV_KEEP_INIT	slirp/tcp_timer.h	95;"	d
TCPTV_MIN	slirp/tcp_timer.h	100;"	d
TCPTV_MSL	slirp/tcp_timer.h	86;"	d
TCPTV_PERSMAX	slirp/tcp_timer.h	93;"	d
TCPTV_PERSMIN	slirp/tcp_timer.h	92;"	d
TCPTV_REXMTMAX	slirp/tcp_timer.h	101;"	d
TCPTV_SRTTBASE	slirp/tcp_timer.h	88;"	d
TCPTV_SRTTDFLT	slirp/tcp_timer.h	90;"	d
TCPT_2MSL	slirp/tcp_timer.h	45;"	d
TCPT_KEEP	slirp/tcp_timer.h	44;"	d
TCPT_NTIMERS	slirp/tcp_timer.h	40;"	d
TCPT_PERSIST	slirp/tcp_timer.h	43;"	d
TCPT_RANGESET	slirp/tcp_timer.h	111;"	d
TCPT_REXMT	slirp/tcp_timer.h	42;"	d
TCP_DO_RFC1323	slirp/tcp_subr.c	45;"	d	file:
TCP_ISSINCR	slirp/tcp.h	162;"	d
TCP_LINGERTIME	slirp/tcp_timer.h	103;"	d
TCP_MAXIDLE	slirp/slirp.h	254;"	d
TCP_MAXRXTSHIFT	slirp/tcp_timer.h	105;"	d
TCP_MAXSEG	slirp/tcp.h	113;"	d
TCP_MAXWIN	slirp/tcp.h	100;"	d
TCP_MAX_WINSHIFT	slirp/tcp.h	102;"	d
TCP_MSS	slirp/tcp.h	98;"	d
TCP_NODELAY	slirp/tcp.h	111;"	d
TCP_NODELAY	slirp/tcp.h	112;"	d
TCP_NSTATES	slirp/tcp.h	120;"	d
TCP_PAWS_IDLE	slirp/tcp_input.c	46;"	d	file:
TCP_RCVSPACE	slirp/tcp.h	42;"	d
TCP_REASS	slirp/tcp_input.c	63;"	d	file:
TCP_REASS	slirp/tcp_input.c	83;"	d	file:
TCP_REXMTVAL	slirp/tcp_var.h	158;"	d
TCP_RTTVAR_SCALE	slirp/tcp_var.h	142;"	d
TCP_RTTVAR_SHIFT	slirp/tcp_var.h	143;"	d
TCP_RTT_SCALE	slirp/tcp_var.h	140;"	d
TCP_RTT_SHIFT	slirp/tcp_var.h	141;"	d
TCP_SNDSPACE	slirp/tcp.h	41;"	d
TFTP_ACK	slirp/tftp.h	10;"	d
TFTP_DATA	slirp/tftp.h	9;"	d
TFTP_ERROR	slirp/tftp.h	11;"	d
TFTP_FILENAME_MAX	slirp/tftp.h	14;"	d
TFTP_OACK	slirp/tftp.h	12;"	d
TFTP_RRQ	slirp/tftp.h	7;"	d
TFTP_SERVER	slirp/tftp.h	5;"	d
TFTP_SESSIONS_MAX	slirp/tftp.h	3;"	d
TFTP_WRQ	slirp/tftp.h	8;"	d
TF_ACKNOW	slirp/tcp_var.h	53;"	d
TF_DELACK	slirp/tcp_var.h	54;"	d
TF_NODELAY	slirp/tcp_var.h	55;"	d
TF_NOOPT	slirp/tcp_var.h	56;"	d
TF_RCVD_SCALE	slirp/tcp_var.h	59;"	d
TF_RCVD_TSTMP	slirp/tcp_var.h	61;"	d
TF_REQ_SCALE	slirp/tcp_var.h	58;"	d
TF_REQ_TSTMP	slirp/tcp_var.h	60;"	d
TF_SACK_PERMIT	slirp/tcp_var.h	62;"	d
TF_SENTFIN	slirp/tcp_var.h	57;"	d
TH_ACK	slirp/tcp.h	65;"	d
TH_FIN	slirp/tcp.h	61;"	d
TH_PUSH	slirp/tcp.h	64;"	d
TH_RST	slirp/tcp.h	63;"	d
TH_SYN	slirp/tcp.h	62;"	d
TH_URG	slirp/tcp.h	66;"	d
TIME_DIFF	slirp/main.h	27;"	d
TIME_WITH_SYS_TIME	slirp/slirp_config.h	79;"	d
TLBEntry	riscv_cpu_priv.h	/^} TLBEntry;$/;"	t	typeref:struct:__anon44
TLB_SIZE	riscv_cpu_priv.h	125;"	d
TOWRITEMAX	slirp/main.h	12;"	d
TRK0_ERR	ide.c	48;"	d	file:
TRUE	cutils.h	/^    TRUE = 1,$/;"	e	enum:__anon5
TRUE	cutils.h	50;"	d
TSTMP_GEQ	slirp/tcp_input.c	50;"	d	file:
TSTMP_LT	slirp/tcp_input.c	49;"	d	file:
Td0	aes.c	/^static const u32 Td0[256] = {$/;"	v	file:
Td1	aes.c	/^static const u32 Td1[256] = {$/;"	v	file:
Td2	aes.c	/^static const u32 Td2[256] = {$/;"	v	file:
Td3	aes.c	/^static const u32 Td3[256] = {$/;"	v	file:
Td4	aes.c	/^static const u32 Td4[256] = {$/;"	v	file:
Te0	aes.c	/^static const u32 Te0[256] = {$/;"	v	file:
Te1	aes.c	/^static const u32 Te1[256] = {$/;"	v	file:
Te2	aes.c	/^static const u32 Te2[256] = {$/;"	v	file:
Te3	aes.c	/^static const u32 Te3[256] = {$/;"	v	file:
Te4	aes.c	/^static const u32 Te4[256] = {$/;"	v	file:
TunState	temu.c	/^} TunState;$/;"	t	typeref:struct:__anon35	file:
UART_BASE_ADDR	riscv_machine.c	88;"	d	file:
UART_IRQ	riscv_machine.c	89;"	d	file:
UART_LCR_DLAB	riscv_machine.c	140;"	d	file:
UART_REG_DATA	riscv_machine.c	127;"	d	file:
UART_REG_FCR	riscv_machine.c	133;"	d	file:
UART_REG_IER	riscv_machine.c	129;"	d	file:
UART_REG_IIR	riscv_machine.c	132;"	d	file:
UART_REG_LCR	riscv_machine.c	134;"	d	file:
UART_REG_LSR	riscv_machine.c	136;"	d	file:
UART_REG_MCR	riscv_machine.c	135;"	d	file:
UART_REG_MSR	riscv_machine.c	137;"	d	file:
UART_REG_SCR	riscv_machine.c	138;"	d	file:
UART_RX_BUFSIZE	riscv_machine.c	42;"	d	file:
UDPCTL_CHECKSUM	slirp/udp.h	71;"	d
UDPCTL_MAXID	slirp/udp.h	72;"	d
UDP_TTL	slirp/udp.h	36;"	d
UDP_UDPDATALEN	slirp/udp.h	37;"	d
UHALF	riscv_cpu_template.h	122;"	d
UHALF	riscv_cpu_template.h	125;"	d
UHALF	riscv_cpu_template.h	156;"	d
UHALF	riscvsim/riscv_ins_execute.c	149;"	d	file:
UHALF	riscvsim/riscv_ins_execute.c	152;"	d	file:
UHALF	riscvsim/riscv_ins_execute.c	184;"	d	file:
UHALF_LEN	riscv_cpu_template.h	123;"	d
UHALF_LEN	riscv_cpu_template.h	126;"	d
UHALF_LEN	riscvsim/riscv_ins_execute.c	150;"	d	file:
UHALF_LEN	riscvsim/riscv_ins_execute.c	153;"	d	file:
UPDATE_GHR	riscvsim/adaptive_predictor.c	43;"	d	file:
UPD_NFDS	slirp/slirp.c	237;"	d	file:
USE_BUILTIN_CRYPTO	fs_wget.h	25;"	d
USE_GLOBAL_STATE	riscv_cpu_priv.h	49;"	d
USE_GLOBAL_VARIABLES	riscv_cpu_priv.h	51;"	d
USE_LOWCPU	slirp/slirp_config.h	38;"	d
USE_TMPSOCKET	slirp/slirp_config.h	20;"	d
Unused	riscvsim/cache.h	/^    Unused = 0x0,$/;"	e	enum:BlockStatus
VBE_DISPI_8BIT_DAC	vga.c	67;"	d	file:
VBE_DISPI_DISABLED	vga.c	64;"	d	file:
VBE_DISPI_ENABLED	vga.c	65;"	d	file:
VBE_DISPI_GETCAPS	vga.c	66;"	d	file:
VBE_DISPI_ID0	vga.c	57;"	d	file:
VBE_DISPI_ID1	vga.c	58;"	d	file:
VBE_DISPI_ID2	vga.c	59;"	d	file:
VBE_DISPI_ID3	vga.c	60;"	d	file:
VBE_DISPI_ID4	vga.c	61;"	d	file:
VBE_DISPI_ID5	vga.c	62;"	d	file:
VBE_DISPI_INDEX_BANK	vga.c	49;"	d	file:
VBE_DISPI_INDEX_BPP	vga.c	47;"	d	file:
VBE_DISPI_INDEX_ENABLE	vga.c	48;"	d	file:
VBE_DISPI_INDEX_ID	vga.c	44;"	d	file:
VBE_DISPI_INDEX_NB	vga.c	55;"	d	file:
VBE_DISPI_INDEX_VIDEO_MEMORY_64K	vga.c	54;"	d	file:
VBE_DISPI_INDEX_VIRT_HEIGHT	vga.c	51;"	d	file:
VBE_DISPI_INDEX_VIRT_WIDTH	vga.c	50;"	d	file:
VBE_DISPI_INDEX_XRES	vga.c	45;"	d	file:
VBE_DISPI_INDEX_X_OFFSET	vga.c	52;"	d	file:
VBE_DISPI_INDEX_YRES	vga.c	46;"	d	file:
VBE_DISPI_INDEX_Y_OFFSET	vga.c	53;"	d	file:
VBE_DISPI_LFB_ENABLED	vga.c	68;"	d	file:
VBE_DISPI_NOCLEARMEM	vga.c	69;"	d	file:
VGAState	machine.h	/^typedef struct VGAState VGAState;$/;"	t	typeref:struct:VGAState
VGAState	vga.c	/^struct VGAState {$/;"	s	file:
VGA_IO	vga.c	609;"	d	file:
VIRTIO9PDevice	virtio.c	/^typedef struct VIRTIO9PDevice {$/;"	s	file:
VIRTIO9PDevice	virtio.c	/^} VIRTIO9PDevice;$/;"	t	typeref:struct:VIRTIO9PDevice	file:
VIRTIOBlockDevice	virtio.c	/^typedef struct VIRTIOBlockDevice {$/;"	s	file:
VIRTIOBlockDevice	virtio.c	/^} VIRTIOBlockDevice;$/;"	t	typeref:struct:VIRTIOBlockDevice	file:
VIRTIOBusDef	virtio.h	/^} VIRTIOBusDef;$/;"	t	typeref:struct:__anon51
VIRTIOConsoleDevice	virtio.c	/^typedef struct VIRTIOConsoleDevice {$/;"	s	file:
VIRTIOConsoleDevice	virtio.c	/^} VIRTIOConsoleDevice;$/;"	t	typeref:struct:VIRTIOConsoleDevice	file:
VIRTIODesc	virtio.c	/^} VIRTIODesc;$/;"	t	typeref:struct:__anon11	file:
VIRTIODevice	virtio.c	/^struct VIRTIODevice {$/;"	s	file:
VIRTIODevice	virtio.h	/^typedef struct VIRTIODevice VIRTIODevice; $/;"	t	typeref:struct:VIRTIODevice
VIRTIODeviceRecvFunc	virtio.c	/^typedef int VIRTIODeviceRecvFunc(VIRTIODevice *s1, int queue_idx,$/;"	t	file:
VIRTIOGetRAMPtrFunc	virtio.c	/^typedef uint8_t *VIRTIOGetRAMPtrFunc(VIRTIODevice *s, virtio_phys_addr_t paddr, BOOL is_rw);$/;"	t	file:
VIRTIOInputDevice	virtio.c	/^typedef struct VIRTIOInputDevice {$/;"	s	file:
VIRTIOInputDevice	virtio.c	/^} VIRTIOInputDevice;$/;"	t	typeref:struct:VIRTIOInputDevice	file:
VIRTIONetDevice	virtio.c	/^typedef struct VIRTIONetDevice {$/;"	s	file:
VIRTIONetDevice	virtio.c	/^} VIRTIONetDevice;$/;"	t	typeref:struct:VIRTIONetDevice	file:
VIRTIONetHeader	virtio.c	/^} VIRTIONetHeader;$/;"	t	typeref:struct:__anon14	file:
VIRTIO_ADDR_BITS	virtio.h	35;"	d
VIRTIO_ADDR_BITS	virtio.h	37;"	d
VIRTIO_BASE_ADDR	riscv_machine.c	90;"	d	file:
VIRTIO_BLK_S_IOERR	virtio.c	1011;"	d	file:
VIRTIO_BLK_S_OK	virtio.c	1010;"	d	file:
VIRTIO_BLK_S_UNSUPP	virtio.c	1012;"	d	file:
VIRTIO_BLK_T_FLUSH	virtio.c	1007;"	d	file:
VIRTIO_BLK_T_FLUSH_OUT	virtio.c	1008;"	d	file:
VIRTIO_BLK_T_IN	virtio.c	1005;"	d	file:
VIRTIO_BLK_T_OUT	virtio.c	1006;"	d	file:
VIRTIO_DEBUG_9P	virtio.h	58;"	d
VIRTIO_DEBUG_IO	virtio.h	57;"	d
VIRTIO_H	virtio.h	25;"	d
VIRTIO_INPUT_ABS_SCALE	virtio.h	130;"	d
VIRTIO_INPUT_CFG_ABS_INFO	virtio.c	/^    VIRTIO_INPUT_CFG_ABS_INFO   = 0x12,$/;"	e	enum:__anon15	file:
VIRTIO_INPUT_CFG_EV_BITS	virtio.c	/^    VIRTIO_INPUT_CFG_EV_BITS    = 0x11,$/;"	e	enum:__anon15	file:
VIRTIO_INPUT_CFG_ID_DEVIDS	virtio.c	/^    VIRTIO_INPUT_CFG_ID_DEVIDS  = 0x03,$/;"	e	enum:__anon15	file:
VIRTIO_INPUT_CFG_ID_NAME	virtio.c	/^    VIRTIO_INPUT_CFG_ID_NAME    = 0x01,$/;"	e	enum:__anon15	file:
VIRTIO_INPUT_CFG_ID_SERIAL	virtio.c	/^    VIRTIO_INPUT_CFG_ID_SERIAL  = 0x02,$/;"	e	enum:__anon15	file:
VIRTIO_INPUT_CFG_PROP_BITS	virtio.c	/^    VIRTIO_INPUT_CFG_PROP_BITS  = 0x10,$/;"	e	enum:__anon15	file:
VIRTIO_INPUT_CFG_UNSET	virtio.c	/^    VIRTIO_INPUT_CFG_UNSET      = 0x00,$/;"	e	enum:__anon15	file:
VIRTIO_INPUT_EV_ABS	virtio.c	1378;"	d	file:
VIRTIO_INPUT_EV_KEY	virtio.c	1376;"	d	file:
VIRTIO_INPUT_EV_REL	virtio.c	1377;"	d	file:
VIRTIO_INPUT_EV_REP	virtio.c	1379;"	d	file:
VIRTIO_INPUT_EV_SYN	virtio.c	1375;"	d	file:
VIRTIO_INPUT_TYPE_KEYBOARD	virtio.h	/^    VIRTIO_INPUT_TYPE_KEYBOARD,$/;"	e	enum:__anon53
VIRTIO_INPUT_TYPE_MOUSE	virtio.h	/^    VIRTIO_INPUT_TYPE_MOUSE,$/;"	e	enum:__anon53
VIRTIO_INPUT_TYPE_TABLET	virtio.h	/^    VIRTIO_INPUT_TYPE_TABLET,$/;"	e	enum:__anon53
VIRTIO_IRQ	riscv_machine.c	92;"	d	file:
VIRTIO_MMIO_CONFIG	virtio.c	64;"	d	file:
VIRTIO_MMIO_CONFIG_GENERATION	virtio.c	63;"	d	file:
VIRTIO_MMIO_DEVICE_FEATURES	virtio.c	42;"	d	file:
VIRTIO_MMIO_DEVICE_FEATURES_SEL	virtio.c	43;"	d	file:
VIRTIO_MMIO_DEVICE_ID	virtio.c	40;"	d	file:
VIRTIO_MMIO_DRIVER_FEATURES	virtio.c	44;"	d	file:
VIRTIO_MMIO_DRIVER_FEATURES_SEL	virtio.c	45;"	d	file:
VIRTIO_MMIO_GUEST_PAGE_SIZE	virtio.c	46;"	d	file:
VIRTIO_MMIO_INTERRUPT_ACK	virtio.c	55;"	d	file:
VIRTIO_MMIO_INTERRUPT_STATUS	virtio.c	54;"	d	file:
VIRTIO_MMIO_MAGIC_VALUE	virtio.c	38;"	d	file:
VIRTIO_MMIO_QUEUE_ALIGN	virtio.c	50;"	d	file:
VIRTIO_MMIO_QUEUE_AVAIL_HIGH	virtio.c	60;"	d	file:
VIRTIO_MMIO_QUEUE_AVAIL_LOW	virtio.c	59;"	d	file:
VIRTIO_MMIO_QUEUE_DESC_HIGH	virtio.c	58;"	d	file:
VIRTIO_MMIO_QUEUE_DESC_LOW	virtio.c	57;"	d	file:
VIRTIO_MMIO_QUEUE_NOTIFY	virtio.c	53;"	d	file:
VIRTIO_MMIO_QUEUE_NUM	virtio.c	49;"	d	file:
VIRTIO_MMIO_QUEUE_NUM_MAX	virtio.c	48;"	d	file:
VIRTIO_MMIO_QUEUE_PFN	virtio.c	51;"	d	file:
VIRTIO_MMIO_QUEUE_READY	virtio.c	52;"	d	file:
VIRTIO_MMIO_QUEUE_SEL	virtio.c	47;"	d	file:
VIRTIO_MMIO_QUEUE_USED_HIGH	virtio.c	62;"	d	file:
VIRTIO_MMIO_QUEUE_USED_LOW	virtio.c	61;"	d	file:
VIRTIO_MMIO_STATUS	virtio.c	56;"	d	file:
VIRTIO_MMIO_VENDOR_ID	virtio.c	41;"	d	file:
VIRTIO_MMIO_VERSION	virtio.c	39;"	d	file:
VIRTIO_PAGE_SIZE	virtio.h	32;"	d
VIRTIO_PCI_CAP_LEN	virtio.c	92;"	d	file:
VIRTIO_PCI_CFG_OFFSET	virtio.c	87;"	d	file:
VIRTIO_PCI_CONFIG_GENERATION	virtio.c	74;"	d	file:
VIRTIO_PCI_CONFIG_OFFSET	virtio.c	89;"	d	file:
VIRTIO_PCI_DEVICE_FEATURE	virtio.c	68;"	d	file:
VIRTIO_PCI_DEVICE_FEATURE_SEL	virtio.c	67;"	d	file:
VIRTIO_PCI_DEVICE_STATUS	virtio.c	73;"	d	file:
VIRTIO_PCI_GUEST_FEATURE	virtio.c	70;"	d	file:
VIRTIO_PCI_GUEST_FEATURE_SEL	virtio.c	69;"	d	file:
VIRTIO_PCI_ISR_OFFSET	virtio.c	88;"	d	file:
VIRTIO_PCI_MSIX_CONFIG	virtio.c	71;"	d	file:
VIRTIO_PCI_NOTIFY_OFFSET	virtio.c	90;"	d	file:
VIRTIO_PCI_NUM_QUEUES	virtio.c	72;"	d	file:
VIRTIO_PCI_QUEUE_AVAIL_HIGH	virtio.c	83;"	d	file:
VIRTIO_PCI_QUEUE_AVAIL_LOW	virtio.c	82;"	d	file:
VIRTIO_PCI_QUEUE_DESC_HIGH	virtio.c	81;"	d	file:
VIRTIO_PCI_QUEUE_DESC_LOW	virtio.c	80;"	d	file:
VIRTIO_PCI_QUEUE_ENABLE	virtio.c	78;"	d	file:
VIRTIO_PCI_QUEUE_MSIX_VECTOR	virtio.c	77;"	d	file:
VIRTIO_PCI_QUEUE_NOTIFY_OFF	virtio.c	79;"	d	file:
VIRTIO_PCI_QUEUE_SEL	virtio.c	75;"	d	file:
VIRTIO_PCI_QUEUE_SIZE	virtio.c	76;"	d	file:
VIRTIO_PCI_QUEUE_USED_HIGH	virtio.c	85;"	d	file:
VIRTIO_PCI_QUEUE_USED_LOW	virtio.c	84;"	d	file:
VIRTIO_SIZE	riscv_machine.c	91;"	d	file:
VMConfigLoadState	machine.c	/^} VMConfigLoadState;$/;"	t	typeref:struct:__anon19	file:
VMDriveEntry	machine.h	/^} VMDriveEntry;$/;"	t	typeref:struct:__anon29
VMEthEntry	machine.h	/^} VMEthEntry;$/;"	t	typeref:struct:__anon31
VMFSEntry	machine.h	/^} VMFSEntry;$/;"	t	typeref:struct:__anon30
VMFileEntry	machine.h	/^} VMFileEntry;$/;"	t	typeref:struct:__anon28
VMFileTypeEnum	machine.h	/^} VMFileTypeEnum;$/;"	t	typeref:enum:__anon27
VMMouseState	ps2.h	/^typedef struct VMMouseState VMMouseState;$/;"	t	typeref:struct:VMMouseState
VMMouseState	vmmouse.c	/^struct VMMouseState {$/;"	s	file:
VMPORT_MAGIC	vmmouse.c	34;"	d	file:
VM_CONFIG_VERSION	machine.h	49;"	d
VM_FILE_BIOS	machine.h	/^    VM_FILE_BIOS,$/;"	e	enum:__anon27
VM_FILE_COUNT	machine.h	/^    VM_FILE_COUNT,$/;"	e	enum:__anon27
VM_FILE_INITRD	machine.h	/^    VM_FILE_INITRD,$/;"	e	enum:__anon27
VM_FILE_KERNEL	machine.h	/^    VM_FILE_KERNEL,$/;"	e	enum:__anon27
VM_FILE_VGA_BIOS	machine.h	/^    VM_FILE_VGA_BIOS,$/;"	e	enum:__anon27
VRING_DESC_F_INDIRECT	virtio.c	110;"	d	file:
VRING_DESC_F_NEXT	virtio.c	108;"	d	file:
VRING_DESC_F_WRITE	virtio.c	109;"	d	file:
Valid	riscvsim/cache.h	/^    Valid = 0x1,$/;"	e	enum:BlockStatus
VirtMachine	machine.h	/^typedef struct VirtMachine {$/;"	s
VirtMachine	machine.h	/^} VirtMachine;$/;"	t	typeref:struct:VirtMachine
VirtMachineClass	machine.h	/^struct VirtMachineClass {$/;"	s
VirtMachineClass	machine.h	/^typedef struct VirtMachineClass VirtMachineClass;$/;"	t	typeref:struct:VirtMachineClass
VirtMachineParams	machine.h	/^} VirtMachineParams;$/;"	t	typeref:struct:__anon32
Virtio9POPName	virtio.c	/^} Virtio9POPName;$/;"	t	typeref:struct:__anon17	file:
VirtioInputTypeEnum	virtio.h	/^} VirtioInputTypeEnum;$/;"	t	typeref:enum:__anon53
WGetReadCallback	fs_wget.h	/^typedef size_t WGetReadCallback(void *opaque, void *data, size_t size);$/;"	t
WGetWriteCallback	fs_wget.h	/^typedef void WGetWriteCallback(void *opaque, int err, void *data, size_t size);$/;"	t
WIN_ACKMEDIACHANGE	ide.c	160;"	d	file:
WIN_CHECKPOWERMODE1	ide.c	170;"	d	file:
WIN_CHECKPOWERMODE2	ide.c	139;"	d	file:
WIN_DEVICE_RESET	ide.c	76;"	d	file:
WIN_DIAGNOSE	ide.c	133;"	d	file:
WIN_DOORLOCK	ide.c	163;"	d	file:
WIN_DOORUNLOCK	ide.c	164;"	d	file:
WIN_DOWNLOAD_MICROCODE	ide.c	135;"	d	file:
WIN_FLUSH_CACHE	ide.c	172;"	d	file:
WIN_FLUSH_CACHE_EXT	ide.c	176;"	d	file:
WIN_FORMAT	ide.c	123;"	d	file:
WIN_GETMEDIASTATUS	ide.c	159;"	d	file:
WIN_IDENTIFY	ide.c	177;"	d	file:
WIN_IDENTIFY_DMA	ide.c	179;"	d	file:
WIN_IDLEIMMEDIATE	ide.c	166;"	d	file:
WIN_INIT	ide.c	127;"	d	file:
WIN_MEDIAEJECT	ide.c	178;"	d	file:
WIN_MULTREAD	ide.c	149;"	d	file:
WIN_MULTREAD_EXT	ide.c	96;"	d	file:
WIN_MULTWRITE	ide.c	150;"	d	file:
WIN_MULTWRITE_EXT	ide.c	109;"	d	file:
WIN_NOP	ide.c	67;"	d	file:
WIN_PACKETCMD	ide.c	144;"	d	file:
WIN_PIDENTIFY	ide.c	145;"	d	file:
WIN_POSTBOOT	ide.c	161;"	d	file:
WIN_PREBOOT	ide.c	162;"	d	file:
WIN_QUEUED_SERVICE	ide.c	146;"	d	file:
WIN_READ	ide.c	85;"	d	file:
WIN_READDMA	ide.c	153;"	d	file:
WIN_READDMA_EXT	ide.c	90;"	d	file:
WIN_READDMA_ONCE	ide.c	154;"	d	file:
WIN_READDMA_QUEUED	ide.c	152;"	d	file:
WIN_READDMA_QUEUED_EXT	ide.c	91;"	d	file:
WIN_READ_BUFFER	ide.c	169;"	d	file:
WIN_READ_EXT	ide.c	89;"	d	file:
WIN_READ_LONG	ide.c	87;"	d	file:
WIN_READ_LONG_ONCE	ide.c	88;"	d	file:
WIN_READ_NATIVE_MAX	ide.c	188;"	d	file:
WIN_READ_NATIVE_MAX_EXT	ide.c	92;"	d	file:
WIN_READ_ONCE	ide.c	86;"	d	file:
WIN_RECAL	ide.c	80;"	d	file:
WIN_RESTORE	ide.c	81;"	d	file:
WIN_SECURITY_DISABLE	ide.c	187;"	d	file:
WIN_SECURITY_ERASE_PREPARE	ide.c	184;"	d	file:
WIN_SECURITY_ERASE_UNIT	ide.c	185;"	d	file:
WIN_SECURITY_FREEZE_LOCK	ide.c	186;"	d	file:
WIN_SECURITY_SET_PASS	ide.c	182;"	d	file:
WIN_SECURITY_UNLOCK	ide.c	183;"	d	file:
WIN_SEEK	ide.c	131;"	d	file:
WIN_SETFEATURES	ide.c	180;"	d	file:
WIN_SETIDLE1	ide.c	168;"	d	file:
WIN_SETIDLE2	ide.c	138;"	d	file:
WIN_SETMULT	ide.c	151;"	d	file:
WIN_SET_MAX	ide.c	189;"	d	file:
WIN_SET_MAX_EXT	ide.c	107;"	d	file:
WIN_SLEEPNOW1	ide.c	171;"	d	file:
WIN_SLEEPNOW2	ide.c	140;"	d	file:
WIN_SMART	ide.c	147;"	d	file:
WIN_SPECIFY	ide.c	134;"	d	file:
WIN_SRST	ide.c	75;"	d	file:
WIN_STANDBY	ide.c	167;"	d	file:
WIN_STANDBY2	ide.c	137;"	d	file:
WIN_STANDBYNOW1	ide.c	165;"	d	file:
WIN_STANDBYNOW2	ide.c	136;"	d	file:
WIN_VERIFY	ide.c	117;"	d	file:
WIN_VERIFY_EXT	ide.c	119;"	d	file:
WIN_VERIFY_ONCE	ide.c	118;"	d	file:
WIN_WRITE	ide.c	100;"	d	file:
WIN_WRITEDMA	ide.c	155;"	d	file:
WIN_WRITEDMA_EXT	ide.c	105;"	d	file:
WIN_WRITEDMA_ONCE	ide.c	156;"	d	file:
WIN_WRITEDMA_QUEUED	ide.c	157;"	d	file:
WIN_WRITEDMA_QUEUED_EXT	ide.c	106;"	d	file:
WIN_WRITE_BUFFER	ide.c	173;"	d	file:
WIN_WRITE_EXT	ide.c	104;"	d	file:
WIN_WRITE_LONG	ide.c	102;"	d	file:
WIN_WRITE_LONG_ONCE	ide.c	103;"	d	file:
WIN_WRITE_ONCE	ide.c	101;"	d	file:
WIN_WRITE_SAME	ide.c	174;"	d	file:
WIN_WRITE_VERIFY	ide.c	113;"	d	file:
WORD_SIZE	riscvsim/cache.h	38;"	d
WRERR_STAT	ide.c	42;"	d	file:
Write	riscvsim/memory_controller_utils.h	/^    Write = 0x1,$/;"	e	enum:MemAccessType
WriteAllocate	riscvsim/cache.h	/^    WriteAllocate = 0x0,$/;"	e	enum:CacheWriteAllocPolicy
WriteBack	riscvsim/cache.h	/^    WriteBack = 0x0,$/;"	e	enum:CacheWritePolicy
WriteNoAllocate	riscvsim/cache.h	/^    WriteNoAllocate = 0x1,$/;"	e	enum:CacheWriteAllocPolicy
WriteThrough	riscvsim/cache.h	/^    WriteThrough = 0x1,$/;"	e	enum:CacheWritePolicy
XHRState	fs_wget.c	/^struct XHRState {$/;"	s	file:
XHRState	fs_wget.h	/^typedef struct XHRState XHRState;$/;"	t	typeref:struct:XHRState
XLEN	riscv_cpu.c	1489;"	d	file:
XLEN	riscv_cpu.c	1493;"	d	file:
XLEN	riscv_cpu.c	1498;"	d	file:
XLEN	riscv_cpu_template.h	1942;"	d
_ADAPTIVE_PREDICTOR_H_	riscvsim/adaptive_predictor.h	31;"	d
_BHT_H_	riscvsim/bht.h	28;"	d
_BOOL_defined	cutils.h	48;"	d
_BRANCH_PRED_UNIT_H_	riscvsim/bpu.h	31;"	d
_BRANCH_TARGET_BUFFER_H_	riscvsim/btb.h	31;"	d
_CACHE_H_	riscvsim/cache.h	31;"	d
_CIRCULAR_QUEUE_H_	riscvsim/circular_queue.h	34;"	d
_COMMON_CORE_UTILS_H_	riscvsim/common_core_utils.h	31;"	d
_DRAMSIM_WRAPPER_C_CONNECTOR_H_	riscvsim/dramsim_wrapper_c_connector.h	28;"	d
_DRAMSIM_WRAPPER_H_	riscvsim/dramsim_wrapper.h	28;"	d
_IF_H_	slirp/if.h	9;"	d
_INORDER_H_	riscvsim/inorder.h	31;"	d
_IP_H_	slirp/ip.h	34;"	d
_LIBSLIRP_H	slirp/libslirp.h	2;"	d
_MBUF_H_	slirp/mbuf.h	34;"	d
_MEMORY_CONTROLLER_H_	riscvsim/memory_controller.h	31;"	d
_MEM_CONTROLLER_UTILS_H_	riscvsim/memory_controller_utils.h	28;"	d
_MISC_H_	slirp/misc.h	9;"	d
_MMU_H_	riscvsim/mmu.h	31;"	d
_NETINET_IP_ICMP_H_	slirp/ip_icmp.h	34;"	d
_OOO_H_	riscvsim/ooo.h	28;"	d
_RISCV_CPU_XLEN_TYPEDEFS_	riscv_cpu_xlen_typedefs.h	2;"	d
_RISCV_INSTRUCTION_H_	riscvsim/riscv_instruction.h	31;"	d
_RISCV_INS_STR_CREATOR_H_	riscvsim/riscv_ins_str_creator.h	31;"	d
_RISCV_ISA_DECODER_LIB_H_	riscvsim/riscv_isa_decoder_lib.h	31;"	d
_RISCV_ISA_EXECUTE_LIB_H_	riscvsim/riscv_ins_execute_lib.h	31;"	d
_RISCV_SIM_CPU_H_	riscvsim/riscv_sim_cpu.h	31;"	d
_RISCV_SIM_MACROS_H_	riscvsim/riscv_sim_macros.h	33;"	d
_RISCV_SIM_TYPEDEFS_H_	riscvsim/riscv_sim_typedefs.h	33;"	d
_SBUF_H_	slirp/sbuf.h	9;"	d
_SIM_PARAMS_STATS_H_	riscvsim/sim_params_stats.h	31;"	d
_SLIRP_SOCKET_H_	slirp/socket.h	9;"	d
_TCPIP_H_	slirp/tcpip.h	34;"	d
_TCP_H_	slirp/tcp.h	34;"	d
_TCP_TIMER_H_	slirp/tcp_timer.h	34;"	d
_TCP_VAR_H_	slirp/tcp_var.h	34;"	d
_UDP_H_	slirp/udp.h	34;"	d
__COMMON_H__	slirp/slirp.h	2;"	d
__code_end	riscv_cpu_priv.h	/^    uint8_t *__code_ptr, *__code_end;$/;"	m	struct:RISCVCPUState
__code_ptr	riscv_cpu_priv.h	/^    uint8_t *__code_ptr, *__code_end;$/;"	m	struct:RISCVCPUState
__code_to_pc_addend	riscv_cpu_priv.h	/^    target_ulong __code_to_pc_addend;$/;"	m	struct:RISCVCPUState
__exception	riscv_cpu_priv.h	44;"	d
__list_add	list.h	/^static inline void __list_add(struct list_head *el, $/;"	f
__maybe_unused	cutils.h	33;"	d
_sf32	softfp_template.h	/^uint32_t glue(glue(cvt_sf, F_SIZE), _sf32)(F_UINT a, RoundingModeEnum rm,$/;"	f
_sf64	softfp_template.h	/^uint64_t glue(glue(cvt_sf, F_SIZE), _sf64)(F_UINT a, RoundingModeEnum rm,$/;"	f
absolute	vmmouse.c	/^    BOOL absolute;$/;"	m	struct:VMMouseState	file:
accel_enable	machine.h	/^    BOOL accel_enable; \/* enable acceleration (KVM) *\/$/;"	m	struct:__anon32
adaptive_predictor_add	riscvsim/adaptive_predictor.c	/^adaptive_predictor_add(AdaptivePredictor *a, target_ulong pc)$/;"	f
adaptive_predictor_flush	riscvsim/adaptive_predictor.c	/^adaptive_predictor_flush(AdaptivePredictor *a)$/;"	f
adaptive_predictor_free	riscvsim/adaptive_predictor.c	/^adaptive_predictor_free(AdaptivePredictor **a)$/;"	f
adaptive_predictor_get_prediction	riscvsim/adaptive_predictor.c	/^adaptive_predictor_get_prediction(AdaptivePredictor *a, target_ulong pc)$/;"	f
adaptive_predictor_ght_probe	riscvsim/adaptive_predictor.c	/^adaptive_predictor_ght_probe(AdaptivePredictor *a, target_ulong pc)$/;"	f	file:
adaptive_predictor_init	riscvsim/adaptive_predictor.c	/^adaptive_predictor_init(const SimParams *p)$/;"	f
adaptive_predictor_pht_probe	riscvsim/adaptive_predictor.c	/^adaptive_predictor_pht_probe(AdaptivePredictor *a, target_ulong pc)$/;"	f	file:
adaptive_predictor_probe	riscvsim/adaptive_predictor.c	/^adaptive_predictor_probe(AdaptivePredictor *a, target_ulong pc)$/;"	f
adaptive_predictor_update	riscvsim/adaptive_predictor.c	/^adaptive_predictor_update(AdaptivePredictor *a, target_ulong pc, int pred)$/;"	f
add_exec	slirp/misc.c	/^int add_exec(struct ex_list **ex_ptr, int do_pty, char *exec,$/;"	f
add_file_size	build_filelist.c	/^static void add_file_size(ScanState *s, uint64_t size)$/;"	f	file:
add_sf	softfp_template.h	/^F_UINT add_sf(F_UINT a, F_UINT b, RoundingModeEnum rm,$/;"	f
add_sf	softfp_template.h	1119;"	d
add_sf	softfp_template.h	64;"	d
add_transaction	riscvsim/dramsim_wrapper.cpp	/^dramsim_wrapper::add_transaction(target_ulong addr, bool isWrite)$/;"	f	class:dramsim_wrapper
addr	iomem.h	/^    uint64_t addr;$/;"	m	struct:__anon2
addr	riscvsim/memory_controller_utils.h	/^    target_ulong addr;$/;"	m	struct:PendingMemAccessEntry
addr	virtio.c	/^    uint64_t addr;$/;"	m	struct:__anon11	file:
addr	virtio.h	/^    uint64_t addr;$/;"	m	struct:__anon51
address	riscv_machine.c	/^       uint64_t address;$/;"	m	struct:fdt_reserve_entry	file:
aes_key_st	aes.h	/^struct aes_key_st {$/;"	s
aes_state	fs_net.c	/^    AES_KEY aes_state;$/;"	m	struct:CmdXHRState	file:
aes_state	fs_net.c	/^    AES_KEY aes_state;$/;"	m	struct:FSBaseURL	file:
aes_state	fs_wget.c	/^    AES_KEY *aes_state;$/;"	m	struct:DecryptFileState	file:
allocate_imap_entry	riscvsim/common_core_utils.c	/^allocate_imap_entry(IMapEntry *imap)$/;"	f
allocated	slirp/bootp.h	/^    uint16_t allocated;$/;"	m	struct:__anon50
allocated_size	cutils.h	/^    size_t allocated_size;$/;"	m	struct:__anon6
allocated_size	fbuf.h	/^    size_t allocated_size;$/;"	m	struct:__anon36
alu_stage_latency	riscvsim/sim_params_stats.h	/^    int *alu_stage_latency;$/;"	m	struct:SimParams
and_aliasing_func	riscvsim/adaptive_predictor.c	/^and_aliasing_func(AdaptivePredictor *a, uint32_t hr, target_ulong pc)$/;"	f	file:
ap	riscvsim/bpu.h	/^    AdaptivePredictor *ap;$/;"	m	struct:BranchPredUnit
ap_probe_status	riscvsim/bpu.h	/^    int ap_probe_status;$/;"	m	struct:BPUResponsePkt
aqrl_suffix	riscvsim/riscv_ins_str_creator.c	/^static const char* const aqrl_suffix[4] = {"", ".rl", ".aq", ".aqrl"};$/;"	v	file:
ar	vga.c	/^    uint8_t ar[21];$/;"	m	struct:VGAState	file:
ar_flip_flop	vga.c	/^    int ar_flip_flop;$/;"	m	struct:VGAState	file:
ar_hln	slirp/slirp.c	/^	unsigned char	ar_hln;		\/* length of hardware address	*\/$/;"	m	struct:arphdr	file:
ar_hrd	slirp/slirp.c	/^	unsigned short	ar_hrd;		\/* format of hardware address	*\/$/;"	m	struct:arphdr	file:
ar_index	vga.c	/^    uint8_t ar_index;$/;"	m	struct:VGAState	file:
ar_op	slirp/slirp.c	/^	unsigned short	ar_op;		\/* ARP opcode (command)		*\/$/;"	m	struct:arphdr	file:
ar_pln	slirp/slirp.c	/^	unsigned char	ar_pln;		\/* length of protocol address	*\/$/;"	m	struct:arphdr	file:
ar_pro	slirp/slirp.c	/^	unsigned short	ar_pro;		\/* format of protocol address	*\/$/;"	m	struct:arphdr	file:
ar_sha	slirp/slirp.c	/^	unsigned char		ar_sha[ETH_ALEN];	\/* sender hardware address	*\/$/;"	m	struct:arphdr	file:
ar_sip	slirp/slirp.c	/^	uint32_t		ar_sip;			\/* sender IP address		*\/$/;"	m	struct:arphdr	file:
ar_tha	slirp/slirp.c	/^	unsigned char		ar_tha[ETH_ALEN];	\/* target hardware address	*\/$/;"	m	struct:arphdr	file:
ar_tip	slirp/slirp.c	/^	uint32_t		ar_tip	;		\/* target IP address		*\/$/;"	m	struct:arphdr	file:
archive_file_list	fs_net.c	/^    struct list_head archive_file_list; \/* FS_OPEN_WGET_ARCHIVE *\/$/;"	m	struct:FSOpenInfo	typeref:struct:FSOpenInfo::list_head	file:
archive_link	fs_net.c	/^    struct list_head archive_link; \/* FS_OPEN_WGET_ARCHIVE_FILE *\/$/;"	m	struct:FSOpenInfo	typeref:struct:FSOpenInfo::list_head	file:
archive_offset	fs_net.c	/^    uint64_t archive_offset;  \/* FS_OPEN_WGET_ARCHIVE_FILE *\/$/;"	m	struct:FSOpenInfo	file:
arp_input	slirp/slirp.c	/^static void arp_input(Slirp *slirp, const uint8_t *pkt, int pkt_len)$/;"	f	file:
arphdr	slirp/slirp.c	/^struct arphdr$/;"	s	file:
array	json.h	/^        struct JSONArray *array;$/;"	m	union:JSONValue::__anon39	typeref:struct:JSONValue::__anon39::JSONArray
avail_addr	virtio.c	/^    virtio_phys_addr_t avail_addr;$/;"	m	struct:__anon10	file:
b	json.h	/^        BOOL b;$/;"	m	union:JSONValue::__anon39
backend_mem_access_queue	riscvsim/dramsim_wrapper.h	/^    StageMemAccessQueue *backend_mem_access_queue;$/;"	m	class:dramsim_wrapper
backend_mem_access_queue	riscvsim/memory_controller.h	/^    StageMemAccessQueue backend_mem_access_queue;$/;"	m	struct:MemoryController
bar_set	pci.c	/^    PCIBarSetFunc *bar_set;$/;"	m	struct:__anon1	file:
base_url	fs_net.c	/^            FSBaseURL *base_url;$/;"	m	struct:FSINode::__anon60::__anon61	file:
base_url_id	fs_net.c	/^    char *base_url_id;$/;"	m	struct:FSBaseURL	file:
base_url_list	fs_net.c	/^    struct list_head base_url_list; \/* list of FSBaseURL.link *\/$/;"	m	struct:FSDeviceMem	typeref:struct:FSDeviceMem::list_head	file:
bf	block_net.c	/^    struct BlockDeviceHTTP *bf;$/;"	m	struct:CachedBlock	typeref:struct:CachedBlock::BlockDeviceHTTP	file:
bf	block_net.c	/^    struct BlockDeviceHTTP *bf;$/;"	m	struct:__anon9	typeref:struct:__anon9::BlockDeviceHTTP	file:
bf_add_block	block_net.c	/^static CachedBlock *bf_add_block(BlockDeviceHTTP *bf, unsigned int block_num)$/;"	f	file:
bf_find_block	block_net.c	/^static CachedBlock *bf_find_block(BlockDeviceHTTP *bf, unsigned int block_num)$/;"	f	file:
bf_free_block	block_net.c	/^static void bf_free_block(BlockDeviceHTTP *bf, CachedBlock *b)$/;"	f	file:
bf_get_sector_count	block_net.c	/^static int64_t bf_get_sector_count(BlockDevice *bs)$/;"	f	file:
bf_get_sector_count	temu.c	/^static int64_t bf_get_sector_count(BlockDevice *bs)$/;"	f	file:
bf_init_onload	block_net.c	/^static void bf_init_onload(void *opaque, int err, void *data, size_t size)$/;"	f	file:
bf_prefetch_group_onload	block_net.c	/^static void bf_prefetch_group_onload(void *opaque, int err, void *data,$/;"	f	file:
bf_read_async	block_net.c	/^static int bf_read_async(BlockDevice *bs,$/;"	f	file:
bf_read_async	temu.c	/^static int bf_read_async(BlockDevice *bs,$/;"	f	file:
bf_read_onload	block_net.c	/^static void bf_read_onload(void *opaque, int err, void *data, size_t size)$/;"	f	file:
bf_rw_async1	block_net.c	/^static int bf_rw_async1(BlockDevice *bs, BOOL is_sync)$/;"	f	file:
bf_start_load_block	block_net.c	/^static void bf_start_load_block(BlockDevice *bs, int block_num)$/;"	f	file:
bf_start_load_prefetch_group	block_net.c	/^static void bf_start_load_prefetch_group(BlockDevice *bs, int group_num,$/;"	f	file:
bf_update_block	block_net.c	/^static void bf_update_block(CachedBlock *b, const uint8_t *data)$/;"	f	file:
bf_write_async	block_net.c	/^static int bf_write_async(BlockDevice *bs,$/;"	f	file:
bf_write_async	temu.c	/^static int bf_write_async(BlockDevice *bs,$/;"	f	file:
bht	riscvsim/bpu.h	/^    Bht *bht;$/;"	m	struct:BranchPredUnit
bht_add	riscvsim/bht.c	/^bht_add(Bht *b, target_ulong pc)$/;"	f
bht_entry	riscvsim/bht.h	/^    BhtEntry *bht_entry;$/;"	m	struct:Bht
bht_flush	riscvsim/bht.c	/^bht_flush(Bht *b)$/;"	f
bht_free	riscvsim/bht.c	/^bht_free(Bht **b)$/;"	f
bht_get_pred	riscvsim/bht.c	/^bht_get_pred(Bht *b, target_ulong pc)$/;"	f
bht_index_bits	riscvsim/bht.h	/^    int bht_index_bits;$/;"	m	struct:Bht
bht_init	riscvsim/bht.c	/^bht_init(const SimParams *p)$/;"	f
bht_size	riscvsim/bht.h	/^    int bht_size;$/;"	m	struct:Bht
bht_size	riscvsim/sim_params_stats.h	/^    int bht_size;$/;"	m	struct:SimParams
bht_update	riscvsim/bht.c	/^bht_update(Bht *b, target_ulong pc, int pred)$/;"	f
binary	riscvsim/riscv_instruction.h	/^    uint32_t binary;$/;"	m	struct:RVInstruction
bindir	Makefile	/^bindir=\/usr\/local\/bin$/;"	m
blk	riscvsim/cache.h	/^    CacheBlk **blk;$/;"	m	struct:Cache
block_align	fs_utils.h	/^static inline uint64_t block_align(uint64_t val, uint64_t align)$/;"	f
block_dev	machine.h	/^    BlockDevice *block_dev;$/;"	m	struct:__anon29
block_device_init	temu.c	/^static BlockDevice *block_device_init(const char *filename,$/;"	f	file:
block_device_init_http	block_net.c	/^BlockDevice *block_device_init_http(const char *url,$/;"	f
block_num	block_net.c	/^    unsigned int block_num;$/;"	m	struct:CachedBlock	file:
block_size	block_net.c	/^    int block_size; \/* in sectors, power of two *\/$/;"	m	struct:BlockDeviceHTTP	file:
block_size	fs_net.c	/^    uint32_t block_size; \/* for stat\/statfs *\/$/;"	m	struct:FSDeviceMem	file:
block_size_log2	fs_net.c	/^    int block_size_log2;$/;"	m	struct:FSDeviceMem	file:
boot_cpuid_phys	riscv_machine.c	/^    uint32_t boot_cpuid_phys;$/;"	m	struct:fdt_header	file:
bootp_clients	slirp/slirp.h	/^    BOOTPClient bootp_clients[NB_BOOTP_CLIENTS];$/;"	m	struct:Slirp
bootp_filename	slirp/slirp.h	/^    char *bootp_filename;$/;"	m	struct:Slirp
bootp_input	slirp/bootp.c	/^void bootp_input(struct mbuf *m)$/;"	f
bootp_reply	slirp/bootp.c	/^static void bootp_reply(Slirp *slirp, const struct bootp_t *bp)$/;"	f	file:
bootp_t	slirp/bootp.h	/^struct bootp_t {$/;"	s
bp_ciaddr	slirp/bootp.h	/^    struct in_addr bp_ciaddr;$/;"	m	struct:bootp_t	typeref:struct:bootp_t::in_addr
bp_file	slirp/bootp.h	/^    uint8_t bp_file[128];$/;"	m	struct:bootp_t
bp_giaddr	slirp/bootp.h	/^    struct in_addr bp_giaddr;$/;"	m	struct:bootp_t	typeref:struct:bootp_t::in_addr
bp_hlen	slirp/bootp.h	/^    uint8_t bp_hlen;$/;"	m	struct:bootp_t
bp_hops	slirp/bootp.h	/^    uint8_t bp_hops;$/;"	m	struct:bootp_t
bp_htype	slirp/bootp.h	/^    uint8_t bp_htype;$/;"	m	struct:bootp_t
bp_hwaddr	slirp/bootp.h	/^    uint8_t bp_hwaddr[16];$/;"	m	struct:bootp_t
bp_op	slirp/bootp.h	/^    uint8_t bp_op;$/;"	m	struct:bootp_t
bp_secs	slirp/bootp.h	/^    uint16_t bp_secs;$/;"	m	struct:bootp_t
bp_siaddr	slirp/bootp.h	/^    struct in_addr bp_siaddr;$/;"	m	struct:bootp_t	typeref:struct:bootp_t::in_addr
bp_sname	slirp/bootp.h	/^    uint8_t bp_sname[64];$/;"	m	struct:bootp_t
bp_vend	slirp/bootp.h	/^    uint8_t bp_vend[DHCP_OPT_LEN];$/;"	m	struct:bootp_t
bp_xid	slirp/bootp.h	/^    uint32_t bp_xid;$/;"	m	struct:bootp_t
bp_yiaddr	slirp/bootp.h	/^    struct in_addr bp_yiaddr;$/;"	m	struct:bootp_t	typeref:struct:bootp_t::in_addr
bpu	riscvsim/riscv_sim_cpu.h	/^    BranchPredUnit *bpu;    \/* Branch prediction unit *\/$/;"	m	struct:RISCVSIMCPUState
bpu_add	riscvsim/bpu.c	/^bpu_add(BranchPredUnit *u, target_ulong pc, int type, BPUResponsePkt *p,$/;"	f
bpu_aliasing_func_type	riscvsim/sim_params_stats.h	/^    int bpu_aliasing_func_type;$/;"	m	struct:SimParams
bpu_aliasing_func_type_str	riscvsim/sim_params_stats.c	/^const char *bpu_aliasing_func_type_str[] = {"xor", "and", "none"};$/;"	v
bpu_cond_correct	riscvsim/sim_params_stats.h	/^    uint64_t bpu_cond_correct;$/;"	m	struct:SimStats
bpu_cond_incorrect	riscvsim/sim_params_stats.h	/^    uint64_t bpu_cond_incorrect;$/;"	m	struct:SimStats
bpu_flush	riscvsim/bpu.c	/^bpu_flush(BranchPredUnit *u)$/;"	f
bpu_free	riscvsim/bpu.c	/^bpu_free(BranchPredUnit **u)$/;"	f
bpu_get_target	riscvsim/bpu.c	/^bpu_get_target(BranchPredUnit *u, target_ulong pc, BtbEntry *btb_entry)$/;"	f
bpu_ght_size	riscvsim/sim_params_stats.h	/^    int bpu_ght_size;$/;"	m	struct:SimParams
bpu_history_bits	riscvsim/sim_params_stats.h	/^    int bpu_history_bits;$/;"	m	struct:SimParams
bpu_init	riscvsim/bpu.c	/^bpu_init(const SimParams *p, SimStats *s)$/;"	f
bpu_pht_size	riscvsim/sim_params_stats.h	/^    int bpu_pht_size;$/;"	m	struct:SimParams
bpu_probe	riscvsim/bpu.c	/^bpu_probe(BranchPredUnit *u, target_ulong pc, BPUResponsePkt *p, int priv)$/;"	f
bpu_probe	riscvsim/common_core_utils.h	/^    uint32_t bpu_probe;$/;"	m	struct:InstructionMapEntry
bpu_probe_status	riscvsim/bpu.h	/^    int bpu_probe_status;$/;"	m	struct:BPUResponsePkt
bpu_resp_pkt	riscvsim/common_core_utils.h	/^    BPUResponsePkt bpu_resp_pkt;$/;"	m	struct:InstructionMapEntry
bpu_type	riscvsim/bpu.h	/^    int bpu_type;$/;"	m	struct:BranchPredUnit
bpu_type	riscvsim/sim_params_stats.h	/^    int bpu_type;$/;"	m	struct:SimParams
bpu_type_str	riscvsim/sim_params_stats.c	/^const char *bpu_type_str[] = {"bimodal", "adaptive"};$/;"	v
bpu_uncond_correct	riscvsim/sim_params_stats.h	/^    uint64_t bpu_uncond_correct;$/;"	m	struct:SimStats
bpu_uncond_incorrect	riscvsim/sim_params_stats.h	/^    uint64_t bpu_uncond_incorrect;$/;"	m	struct:SimStats
bpu_update	riscvsim/bpu.c	/^bpu_update(BranchPredUnit *u, target_ulong pc, target_ulong target, int pred,$/;"	f
branch_processed	riscvsim/common_core_utils.h	/^    int branch_processed;$/;"	m	struct:InstructionMapEntry
branch_target	riscvsim/common_core_utils.h	/^    target_ulong branch_target;$/;"	m	struct:InstructionMapEntry
branch_type	riscvsim/riscv_instruction.h	/^    int branch_type;$/;"	m	struct:RVInstruction
bs	block_net.c	/^    BlockDevice *bs;$/;"	m	struct:BlockDeviceHTTP	file:
bs	ide.c	/^    BlockDevice *bs;$/;"	m	struct:IDEState	file:
bs	virtio.c	/^    BlockDevice *bs;$/;"	m	struct:VIRTIOBlockDevice	file:
bswap_32	cutils.h	/^static inline uint32_t bswap_32(uint32_t v)$/;"	f
btb	riscvsim/bpu.h	/^    BranchTargetBuffer *btb;$/;"	m	struct:BranchPredUnit
btb_add	riscvsim/btb.c	/^btb_add(BranchTargetBuffer *b, target_ulong pc, int type)$/;"	f
btb_entry	riscvsim/bpu.h	/^    BtbEntry *btb_entry;$/;"	m	struct:BPUResponsePkt
btb_evict_policy_lru	riscvsim/btb.c	/^btb_evict_policy_lru(BranchTargetBuffer *b, int set)$/;"	f	file:
btb_evict_policy_random	riscvsim/btb.c	/^btb_evict_policy_random(BranchTargetBuffer *b, int set)$/;"	f	file:
btb_evict_str	riscvsim/sim_params_stats.c	/^const char *btb_evict_str[] = {"random", "lru"};$/;"	v
btb_eviction_policy	riscvsim/sim_params_stats.h	/^    int btb_eviction_policy;$/;"	m	struct:SimParams
btb_flush	riscvsim/btb.c	/^btb_flush(BranchTargetBuffer *b)$/;"	f
btb_free	riscvsim/btb.c	/^btb_free(BranchTargetBuffer **b)$/;"	f
btb_hits	riscvsim/sim_params_stats.h	/^    uint64_t btb_hits;$/;"	m	struct:SimStats
btb_init	riscvsim/btb.c	/^btb_init(const SimParams *p)$/;"	f
btb_inserts	riscvsim/sim_params_stats.h	/^    uint64_t btb_inserts;$/;"	m	struct:SimStats
btb_probe	riscvsim/btb.c	/^btb_probe(BranchTargetBuffer *b, target_ulong pc, BtbEntry **btb_entry)$/;"	f
btb_probe_status	riscvsim/bpu.h	/^    int btb_probe_status;$/;"	m	struct:BPUResponsePkt
btb_probes	riscvsim/sim_params_stats.h	/^    uint64_t btb_probes;$/;"	m	struct:SimStats
btb_size	riscvsim/sim_params_stats.h	/^    int btb_size;$/;"	m	struct:SimParams
btb_update	riscvsim/btb.c	/^btb_update(BtbEntry *btb_entry, target_ulong target,int type)$/;"	f
btb_update_lru_status_bits	riscvsim/btb.c	/^btb_update_lru_status_bits(BranchTargetBuffer *b, int set, int way)$/;"	f	file:
btb_updates	riscvsim/sim_params_stats.h	/^    uint64_t btb_updates;$/;"	m	struct:SimStats
btb_ways	riscvsim/sim_params_stats.h	/^    int btb_ways;$/;"	m	struct:SimParams
buf	cutils.h	/^    uint8_t *buf;$/;"	m	struct:__anon6
buf	machine.h	/^    uint8_t *buf;$/;"	m	struct:__anon28
buf	sha256.h	/^    uint8_t buf[64];$/;"	m	struct:__anon24
buf	virtio.c	/^    uint8_t *buf;$/;"	m	struct:__anon12	file:
buffer	riscvsim/common_core_utils.h	/^    uint64_t buffer;$/;"	m	struct:DataFWDLatch
buffer	riscvsim/riscv_instruction.h	/^    uint64_t buffer;$/;"	m	struct:RVInstruction
bus	pci.c	/^    PCIBus *bus;$/;"	m	struct:PCIDevice	file:
bus_map_irq	pci.c	/^static int bus_map_irq(PCIDevice *d, int irq_num)$/;"	f	file:
bus_num	pci.c	/^    int bus_num;$/;"	m	struct:PCIBus	file:
buttons_list	virtio.c	/^static const uint16_t buttons_list[] = {$/;"	v	file:
buttons_state	virtio.c	/^    uint32_t buttons_state;$/;"	m	struct:VIRTIOInputDevice	file:
bytes_to_access	riscvsim/memory_controller_utils.h	/^    int bytes_to_access;$/;"	m	struct:PendingMemAccessEntry
bytes_to_rw	riscvsim/riscv_instruction.h	/^    int bytes_to_rw;$/;"	m	struct:RVInstruction
c6_to_8	vga.c	/^static inline int c6_to_8(int v)$/;"	f	file:
cache_evict_policy	riscvsim/cache.h	/^    CacheEvictionPolicy cache_evict_policy;$/;"	m	struct:Cache
cache_evict_str	riscvsim/sim_params_stats.c	/^const char *cache_evict_str[] = {"random", "lru"};$/;"	v
cache_flush	riscvsim/cache.c	/^cache_flush(const Cache *c)$/;"	f
cache_ra_str	riscvsim/sim_params_stats.c	/^const char *cache_ra_str[] = {"true", "false"};$/;"	v
cache_read	riscvsim/cache.c	/^cache_read(const Cache *c, target_ulong paddr, int bytes_to_read,$/;"	f
cache_read_alloc_policy	riscvsim/cache.h	/^    CacheReadAllocPolicy cache_read_alloc_policy;$/;"	m	struct:Cache
cache_read_allocate_policy	riscvsim/sim_params_stats.h	/^    int cache_read_allocate_policy;$/;"	m	struct:SimParams
cache_wa_str	riscvsim/sim_params_stats.c	/^const char *cache_wa_str[] = {"true", "false"};$/;"	v
cache_wp_str	riscvsim/sim_params_stats.c	/^const char *cache_wp_str[] = {"writeback", "writethrough"};$/;"	v
cache_write	riscvsim/cache.c	/^cache_write(const Cache *c, target_ulong paddr, int bytes_to_write,$/;"	f
cache_write_alloc_policy	riscvsim/cache.h	/^    CacheWriteAllocPolicy cache_write_alloc_policy;$/;"	m	struct:Cache
cache_write_allocate_policy	riscvsim/sim_params_stats.h	/^    int cache_write_allocate_policy;$/;"	m	struct:SimParams
cache_write_policy	riscvsim/cache.h	/^    CacheWritePolicy cache_write_policy;$/;"	m	struct:Cache
cache_write_policy	riscvsim/sim_params_stats.h	/^    int cache_write_policy;$/;"	m	struct:SimParams
cached_blocks	block_net.c	/^    struct list_head cached_blocks; \/* list of CachedBlock *\/$/;"	m	struct:BlockDeviceHTTP	typeref:struct:BlockDeviceHTTP::list_head	file:
caches_enabled	riscvsim/mmu.h	/^    int caches_enabled;$/;"	m	struct:MemoryManagementUnit
caddr_t	slirp/slirp.h	/^typedef char *caddr_t;$/;"	t
can_add_transaction	riscvsim/dramsim_wrapper.cpp	/^dramsim_wrapper::can_add_transaction(target_ulong addr)$/;"	f	class:dramsim_wrapper
cb	block_net.c	/^    BlockDeviceCompletionFunc *cb;$/;"	m	struct:BlockDeviceHTTP	file:
cb	fs_net.c	/^    FSOpenCompletionFunc *cb;$/;"	m	struct:FSOpenInfo	file:
cb	fs_wget.c	/^    FSWGetFileCB *cb;$/;"	m	struct:__anon21	file:
cb	fs_wget.c	/^    WGetWriteCallback *cb;$/;"	m	struct:XHRState	file:
cb	fs_wget.c	/^    void (*cb)(void *opaque);$/;"	m	struct:__anon20	file:
cfg_filename	machine.h	/^    char *cfg_filename;$/;"	m	struct:__anon32
cget_field1	riscvsim/riscv_isa_decoder.c	/^cget_field1(uint32_t val, int src_pos, int dst_pos, int dst_pos_max)$/;"	f	file:
chk_op_exceptions	riscvsim/riscv_isa_decoder.c	/^chk_op_exceptions(RVInstruction *i)$/;"	f	file:
chk_op_imm_exceptions	riscvsim/riscv_isa_decoder.c	/^chk_op_imm_exceptions(RVInstruction *i, uint32_t bit_size)$/;"	f	file:
cksum	slirp/cksum.c	/^int cksum(struct mbuf *m, int len)$/;"	f
class_ptr	riscv_cpu.h	/^    const RISCVCPUClass *class_ptr;$/;"	m	struct:__anon26
client_ethaddr	slirp/slirp.h	/^    uint8_t client_ethaddr[6];$/;"	m	struct:Slirp
client_hostname	slirp/slirp.h	/^    char client_hostname[33];$/;"	m	struct:Slirp
client_id	fs.h	/^    char *client_id;$/;"	m	struct:__anon57
client_ip	slirp/tftp.h	/^    struct in_addr client_ip;$/;"	m	struct:tftp_session	typeref:struct:tftp_session::in_addr
client_ipaddr	slirp/slirp.h	/^    struct in_addr client_ipaddr;$/;"	m	struct:Slirp	typeref:struct:Slirp::in_addr
client_port	slirp/tftp.h	/^    uint16_t client_port;$/;"	m	struct:tftp_session
clint_read	riscv_machine.c	/^static uint32_t clint_read(void *opaque, uint32_t offset, int size_log2)$/;"	f	file:
clint_write	riscv_machine.c	/^static void clint_write(void *opaque, uint32_t offset, uint32_t val,$/;"	f	file:
clock	riscvsim/riscv_sim_cpu.h	/^    uint64_t clock;         \/* Clock cycles elapsed *\/$/;"	m	struct:RISCVSIMCPUState
closesocket	slirp/slirp.h	27;"	d
clusters	block_net.c	/^    Cluster **clusters; \/* NULL if no written data *\/$/;"	m	struct:BlockDeviceHTTP	file:
clz	softfp_template.h	1084;"	d
clz	softfp_template.h	55;"	d
clz128	softfp.c	/^static inline int clz128(uint128_t a)$/;"	f	file:
clz32	softfp.c	/^static inline int clz32(uint32_t a)$/;"	f	file:
clz64	softfp.c	/^static inline int clz64(uint64_t a)$/;"	f	file:
cmd	ide.c	/^    uint8_t cmd;$/;"	m	struct:IDEIFState	file:
cmdline	machine.h	/^    char *cmdline; \/* bios or kernel command line *\/$/;"	m	struct:__anon32
cmdline_subst	machine.c	/^static char *cmdline_subst(const char *cmdline)$/;"	f	file:
code_end	riscv_cpu.c	76;"	d	file:
code_end	riscv_cpu_priv.h	/^    uint8_t *code_ptr, *code_end;$/;"	m	struct:RISCVCPUState
code_guest_paddr	riscv_cpu_priv.h	/^    target_ulong code_guest_paddr; \/* keep track of the physical address of the current instruction fetched *\/$/;"	m	struct:RISCVCPUState
code_ptr	riscv_cpu.c	75;"	d	file:
code_ptr	riscv_cpu_priv.h	/^    uint8_t *code_ptr, *code_end;$/;"	m	struct:RISCVCPUState
code_tlb_access_and_ins_fetch	riscvsim/common_core_utils.c	/^code_tlb_access_and_ins_fetch(RISCVCPUState *s, IMapEntry *e)$/;"	f
code_tlb_hits	riscvsim/sim_params_stats.h	/^    uint64_t code_tlb_hits;$/;"	m	struct:SimStats
code_tlb_lookups	riscvsim/sim_params_stats.h	/^    uint64_t code_tlb_lookups;$/;"	m	struct:SimStats
code_to_pc_addend	riscv_cpu.c	77;"	d	file:
code_to_pc_addend	riscv_cpu_priv.h	/^    target_ulong code_to_pc_addend;$/;"	m	struct:RISCVCPUState
commit	riscvsim/inorder.h	/^    CPUStage commit;$/;"	m	struct:INCore
common	fs_disk.c	/^    FSDevice common;$/;"	m	struct:__anon74	file:
common	fs_net.c	/^    FSDevice common;$/;"	m	struct:FSDeviceMem	file:
common	ps2.c	/^    PS2State common;$/;"	m	struct:PS2KbdState	file:
common	ps2.c	/^    PS2State common;$/;"	m	struct:PS2MouseState	file:
common	riscv_cpu_priv.h	/^    RISCVCPUCommonState common; \/* must be first *\/$/;"	m	struct:RISCVCPUState
common	riscv_machine.c	/^    VirtMachine common;$/;"	m	struct:RISCVMachine	file:
common	virtio.c	/^    VIRTIODevice common;$/;"	m	struct:VIRTIO9PDevice	file:
common	virtio.c	/^    VIRTIODevice common;$/;"	m	struct:VIRTIOBlockDevice	file:
common	virtio.c	/^    VIRTIODevice common;$/;"	m	struct:VIRTIOConsoleDevice	file:
common	virtio.c	/^    VIRTIODevice common;$/;"	m	struct:VIRTIOInputDevice	file:
common	virtio.c	/^    VIRTIODevice common;$/;"	m	struct:VIRTIONetDevice	file:
compose_path	fs_disk.c	/^static char *compose_path(const char *path, const char *name)$/;"	f	file:
compose_path	fs_utils.c	/^char *compose_path(const char *path, const char *name)$/;"	f
compose_url	fs_utils.c	/^char *compose_url(const char *base_url, const char *name)$/;"	f
cond	riscvsim/riscv_instruction.h	/^    int32_t cond;$/;"	m	struct:RVInstruction
config	pci.c	/^    uint8_t config[256];$/;"	m	struct:PCIDevice	file:
config_additional_file_load	machine.c	/^static void config_additional_file_load(VMConfigLoadState *s)$/;"	f	file:
config_additional_file_load_cb	machine.c	/^static void config_additional_file_load_cb(void *opaque,$/;"	f	file:
config_file_loaded	machine.c	/^static void config_file_loaded(void *opaque, uint8_t *buf, int buf_len)$/;"	f	file:
config_load_file	machine.c	/^static void config_load_file(VMConfigLoadState *s, const char *filename,$/;"	f	file:
config_load_file_cb	machine.c	/^static void config_load_file_cb(void *opaque, int err, void *data, size_t size)$/;"	f	file:
config_reg	pci.c	/^    uint32_t config_reg;$/;"	m	struct:I440FXState	file:
config_space	virtio.c	/^    uint8_t config_space[MAX_CONFIG_SPACE_SIZE];$/;"	m	struct:VIRTIODevice	file:
config_space_size	virtio.c	/^    uint32_t config_space_size; \/* in bytes, must be multiple of 4 *\/$/;"	m	struct:VIRTIODevice	file:
config_write	virtio.c	/^    void (*config_write)(VIRTIODevice *s); \/* called after the config$/;"	m	struct:VIRTIODevice	file:
console	machine.h	/^    CharacterDevice *console;$/;"	m	struct:VirtMachine
console	machine.h	/^    CharacterDevice *console;$/;"	m	struct:__anon32
console_dev	machine.h	/^    VIRTIODevice *console_dev;$/;"	m	struct:VirtMachine
console_esc_state	temu.c	/^    int console_esc_state;$/;"	m	struct:__anon33	file:
console_get_size	temu.c	/^static void console_get_size(STDIODevice *s, int *pw, int *ph)$/;"	f	file:
console_init	temu.c	/^CharacterDevice *console_init(BOOL allow_ctrlc)$/;"	f
console_read	temu.c	/^static int console_read(void *opaque, uint8_t *buf, int len)$/;"	f	file:
console_write	temu.c	/^static void console_write(void *opaque, const uint8_t *buf, int len)$/;"	f	file:
console_write_char	riscv_machine.c	/^static inline void console_write_char(RISCVMachine *s, uint8_t c)$/;"	f	file:
console_write_string	riscv_machine.c	/^static void console_write_string(RISCVMachine *s, char *str)$/;"	f	file:
container_of	slirp/ip_input.c	44;"	d	file:
copy_bios	riscv_machine.c	/^static void copy_bios(RISCVMachine *s, const uint8_t *buf, int buf_len,$/;"	f	file:
copy_cache_stats_to_global_stats	riscvsim/common_core_utils.c	/^copy_cache_stats_to_global_stats(struct RISCVCPUState *s)$/;"	f
copy_file	build_filelist.c	/^static void copy_file(const char *src_filename, const char *dst_filename)$/;"	f	file:
copy_kernel	riscv_machine.c	/^static void copy_kernel(RISCVMachine *s, const uint8_t *buf, int buf_len,$/;"	f	file:
core	riscvsim/riscv_sim_cpu.h	/^    void* core;$/;"	m	struct:RISCVSIMCPUState
core_name	riscvsim/sim_params_stats.h	/^    char *core_name;$/;"	m	struct:SimParams
core_type	riscvsim/sim_params_stats.h	/^    int core_type;$/;"	m	struct:SimParams
core_type_str	riscvsim/sim_params_stats.c	/^const char *core_type_str[] = {"in-order", "out-of-order"};$/;"	v
count	ps2.c	/^    int rptr, wptr, count;$/;"	m	struct:__anon42	file:
countof	cutils.h	43;"	d
cpu_abort	riscv_cpu.c	/^static __attribute__((unused)) void cpu_abort(RISCVCPUState *s)$/;"	f	file:
cpu_mode_str	riscvsim/common_core_utils.c	/^static char cpu_mode_str[][128] = { "U-mode", "S-mode", "H-mode", "M-mode" };$/;"	v	file:
cpu_register_device	iomem.c	/^PhysMemoryRange *cpu_register_device(PhysMemoryMap *s, uint64_t addr,$/;"	f
cpu_register_ram	iomem.h	/^static inline PhysMemoryRange *cpu_register_ram(PhysMemoryMap *s, uint64_t addr,$/;"	f
cpu_stage_flush	riscvsim/common_core_utils.c	/^cpu_stage_flush(CPUStage *stage)$/;"	f
cpu_state	riscv_machine.c	/^    RISCVCPUState *cpu_state;$/;"	m	struct:RISCVMachine	file:
cpu_to_be32	cutils.h	/^static inline uint32_t cpu_to_be32(uint32_t v)$/;"	f
cq	riscvsim/inorder.h	/^    CQ cq;$/;"	m	struct:InsDispatchQueue
cq	riscvsim/memory_controller.h	/^    CQ cq;$/;"	m	struct:MemRequestQueue
cq	riscvsim/ooo.h	/^    CQ cq;$/;"	m	struct:LSQ
cq	riscvsim/ooo.h	/^    CQ cq;$/;"	m	struct:ReOrderBuffer
cq_dequeue	riscvsim/circular_queue.c	/^cq_dequeue(CQ *p)$/;"	f
cq_empty	riscvsim/circular_queue.c	/^cq_empty(CQ *p)$/;"	f
cq_enqueue	riscvsim/circular_queue.c	/^cq_enqueue(CQ *p)$/;"	f
cq_front	riscvsim/circular_queue.c	/^cq_front(CQ *p)$/;"	f
cq_full	riscvsim/circular_queue.c	/^cq_full(CQ *p)$/;"	f
cq_init	riscvsim/circular_queue.c	/^cq_init(CQ *p, int max_size_val)$/;"	f
cq_rear	riscvsim/circular_queue.c	/^cq_rear(CQ *p)$/;"	f
cq_reset	riscvsim/circular_queue.c	/^cq_reset(CQ *p)$/;"	f
cq_set_rear	riscvsim/circular_queue.c	/^cq_set_rear(CQ *p, int rear)$/;"	f
cr	vga.c	/^    uint8_t cr[256]; \/* CRT registers *\/$/;"	m	struct:VGAState	file:
cr_index	vga.c	/^    uint8_t cr_index;$/;"	m	struct:VGAState	file:
create_cache	riscvsim/cache.c	/^create_cache(CacheTypes type, CacheLevels level, uint32_t blks, uint32_t ways,$/;"	f
create_ins_str	riscvsim/sim_params_stats.h	/^    int create_ins_str;$/;"	m	struct:SimParams
create_str	riscvsim/riscv_instruction.h	/^    int create_str;$/;"	m	struct:RVInstruction
cs	virtio.c	/^    CharacterDevice *cs;$/;"	m	struct:VIRTIOConsoleDevice	file:
csr_names	riscvsim/riscv_ins_str_creator.c	/^static const CsrName csr_names[] = {$/;"	v	file:
csr_read	riscv_cpu.c	/^static int csr_read(RISCVCPUState *s, target_ulong *pval, uint32_t csr,$/;"	f	file:
csr_reads	riscvsim/sim_params_stats.h	/^    uint64_t csr_reads;$/;"	m	struct:SimStats
csr_write	riscv_cpu.c	/^static int csr_write(RISCVCPUState *s, uint32_t csr, target_ulong val)$/;"	f	file:
csr_writes	riscvsim/sim_params_stats.h	/^    uint64_t csr_writes;$/;"	m	struct:SimStats
csum_offset	virtio.c	/^    uint16_t csum_offset;$/;"	m	struct:__anon14	file:
csum_start	virtio.c	/^    uint16_t csum_start;$/;"	m	struct:__anon14	file:
ctime_nsec	fs_net.c	/^    uint32_t ctime_nsec;$/;"	m	struct:FSINode	file:
ctime_sec	fs_net.c	/^    uint32_t ctime_sec;$/;"	m	struct:FSINode	file:
ctr	riscvsim/adaptive_predictor.h	/^    int *ctr;        \/* Array of 2-bit saturating counters *\/$/;"	m	struct:PHTEntry
ctx	fs_wget.c	/^    SHA256_CTX ctx;$/;"	m	struct:__anon22	file:
ctz32	cutils.h	/^static inline int ctz32(uint32_t a)$/;"	f
cur_block_num	block_net.c	/^    int cur_block_num;$/;"	m	struct:BlockDeviceHTTP	file:
cur_drive	ide.c	/^    IDEState *cur_drive;$/;"	m	struct:IDEIFState	file:
cur_idx	riscvsim/memory_controller_utils.h	/^    int cur_idx;$/;"	m	struct:StageMemAccessQueue
cur_pos	fs_net.c	/^    size_t cur_pos;$/;"	m	struct:FSOpenInfo	file:
cur_size	riscvsim/memory_controller_utils.h	/^    int cur_size;$/;"	m	struct:StageMemAccessQueue
cur_size	riscvsim/ras.h	/^    int cur_size;$/;"	m	struct:Ras
cur_xlen	riscv_cpu_priv.h	/^    uint8_t cur_xlen;  \/* current XLEN value, <= MAX_XLEN *\/$/;"	m	struct:RISCVCPUState
curl_multi_ctx	fs_wget.c	/^static CURLM *curl_multi_ctx;$/;"	v	file:
curlen	sha256.h	/^    uint32_t state[8], curlen;$/;"	m	struct:__anon24
current_fs	riscvsim/riscv_instruction.h	/^    int current_fs;$/;"	m	struct:RVInstruction
current_latency	riscvsim/common_core_utils.h	/^    int current_latency;$/;"	m	struct:InstructionMapEntry
current_latency	riscvsim/memory_controller.h	/^    int current_latency;$/;"	m	struct:MemoryController
cursor_glyph	vga.c	/^static const uint8_t cursor_glyph[32] = {$/;"	v	file:
curtime	slirp/slirp.c	/^u_int curtime;$/;"	v
cvt_sf32_sf	softfp_template.h	/^F_UINT cvt_sf32_sf(uint32_t a, uint32_t *pfflags)$/;"	f
cvt_sf32_sf	softfp_template.h	1128;"	d
cvt_sf32_sf	softfp_template.h	73;"	d
cvt_sf64_sf	softfp_template.h	/^F_UINT cvt_sf64_sf(uint64_t a, uint32_t *pfflags)$/;"	f
cvt_sf64_sf	softfp_template.h	1129;"	d
cvt_sf64_sf	softfp_template.h	74;"	d
cycle	riscvsim/common_core_utils.h	/^    uint32_t cycle;$/;"	m	struct:SimTracePacket
cycles	riscvsim/sim_params_stats.h	/^    uint64_t cycles;$/;"	m	struct:SimStats
cylinders	ide.c	/^    int cylinders, heads, sectors;$/;"	m	struct:IDEState	file:
dac_cache	vga.c	/^    uint8_t dac_cache[3]; \/* used when writing *\/$/;"	m	struct:VGAState	file:
dac_read_index	vga.c	/^    uint8_t dac_read_index;$/;"	m	struct:VGAState	file:
dac_state	vga.c	/^    uint8_t dac_state;$/;"	m	struct:VGAState	file:
dac_sub_index	vga.c	/^    uint8_t dac_sub_index;$/;"	m	struct:VGAState	file:
dac_write_index	vga.c	/^    uint8_t dac_write_index;$/;"	m	struct:VGAState	file:
data	json.h	/^    char data[0];$/;"	m	struct:__anon38
data	ps2.c	/^    uint8_t data[PS2_QUEUE_SIZE];$/;"	m	struct:__anon42	file:
data	riscvsim/btb.h	/^    BtbEntry **data;$/;"	m	struct:BranchTargetBuffer
data	riscvsim/inorder.h	/^    uint64_t data[INCORE_NUM_INS_DISPATCH_QUEUE_ENTRY];$/;"	m	struct:InsDispatchQueue
data_class	riscvsim/riscv_instruction.h	/^    int data_class;$/;"	m	struct:RVInstruction
data_end	ide.c	/^    int data_end;$/;"	m	struct:IDEState	file:
data_fwd_done	riscvsim/common_core_utils.h	/^    int data_fwd_done;$/;"	m	struct:InstructionMapEntry
data_guest_paddr	riscv_cpu_priv.h	/^    target_ulong data_guest_paddr; \/* Keep track of the physical address of the current load-store memory access *\/$/;"	m	struct:RISCVCPUState
data_index	ide.c	/^    int data_index;$/;"	m	struct:IDEState	file:
data_mem_delay	riscvsim/sim_params_stats.h	/^    uint64_t data_mem_delay;$/;"	m	struct:SimStats
dbuf	fs_wget.c	/^    DynBuf dbuf; \/* used if single_write *\/$/;"	m	struct:XHRState	file:
dbuf_free	cutils.c	/^void dbuf_free(DynBuf *s)$/;"	f
dbuf_init	cutils.c	/^void dbuf_init(DynBuf *s)$/;"	f
dbuf_putc	cutils.c	/^void dbuf_putc(DynBuf *s, uint8_t c)$/;"	f
dbuf_putstr	cutils.c	/^void dbuf_putstr(DynBuf *s, const char *str)$/;"	f
dbuf_write	cutils.c	/^void dbuf_write(DynBuf *s, size_t offset, const uint8_t *data, size_t len)$/;"	f
dcache	riscvsim/mmu.h	/^    Cache *dcache;$/;"	m	struct:MemoryManagementUnit
dcache_read	riscvsim/sim_params_stats.h	/^    uint64_t dcache_read;$/;"	m	struct:SimStats
dcache_read_miss	riscvsim/sim_params_stats.h	/^    uint64_t dcache_read_miss;$/;"	m	struct:SimStats
dcache_write	riscvsim/sim_params_stats.h	/^    uint64_t dcache_write;$/;"	m	struct:SimStats
dcache_write_miss	riscvsim/sim_params_stats.h	/^    uint64_t dcache_write_miss;$/;"	m	struct:SimStats
de_list	fs_net.c	/^            struct list_head de_list; \/* list of FSDirEntry *\/$/;"	m	struct:FSINode::__anon60::__anon62	typeref:struct:FSINode::__anon60::__anon62::list_head	file:
debug	virtio.c	/^    int debug;$/;"	m	struct:VIRTIODevice	file:
dec_buf	fs_wget.c	/^    uint8_t dec_buf[DEC_BUF_SIZE];$/;"	m	struct:DecryptFileState	file:
dec_buf_pos	fs_wget.c	/^    int dec_buf_pos;$/;"	m	struct:DecryptFileState	file:
dec_state	fs_net.c	/^    DecryptFileState *dec_state;$/;"	m	struct:FSOpenInfo	file:
dec_state	fs_wget.c	/^    DecryptFileState *dec_state;$/;"	m	struct:__anon21	file:
dec_state	fs_wget.c	/^    int dec_state;$/;"	m	struct:DecryptFileState	file:
decode	riscvsim/inorder.h	/^    CPUStage decode;$/;"	m	struct:INCore
decode	riscvsim/ooo.h	/^    CPUStage decode;$/;"	m	struct:OOCore
decode_compressed_q0	riscvsim/riscv_isa_decoder.c	/^decode_compressed_q0(struct RVInstruction *ins)$/;"	f	file:
decode_compressed_q1	riscvsim/riscv_isa_decoder.c	/^decode_compressed_q1(struct RVInstruction *ins)$/;"	f	file:
decode_compressed_q2	riscvsim/riscv_isa_decoder.c	/^decode_compressed_q2(struct RVInstruction *ins)$/;"	f	file:
decode_compressed_type	riscvsim/riscv_isa_decoder.c	/^decode_compressed_type(struct RVInstruction *ins)$/;"	f	file:
decode_hex	fs_utils.c	/^int decode_hex(uint8_t *buf, const char *str, int len)$/;"	f
decode_riscv_binary	riscvsim/riscv_isa_decoder.c	/^decode_riscv_binary(struct RVInstruction *ins, uint32_t insn)$/;"	f
decrypt_file	fs_wget.c	/^int decrypt_file(DecryptFileState *s, const uint8_t *data,$/;"	f
decrypt_file_end	fs_wget.c	/^void decrypt_file_end(DecryptFileState *s)$/;"	f
decrypt_file_flush	fs_wget.c	/^int decrypt_file_flush(DecryptFileState *s)$/;"	f
decrypt_file_init	fs_wget.c	/^DecryptFileState *decrypt_file_init(AES_KEY *aes_state,$/;"	f
default_free_ram	iomem.c	/^static void default_free_ram(PhysMemoryMap *s, PhysMemoryRange *pr)$/;"	f	file:
default_get_dirty_bits	iomem.c	/^static const uint32_t *default_get_dirty_bits(PhysMemoryMap *map,$/;"	f	file:
default_register_ram	iomem.c	/^static PhysMemoryRange *default_register_ram(PhysMemoryMap *s, uint64_t addr,$/;"	f	file:
default_set_addr	iomem.c	/^static void default_set_addr(PhysMemoryMap *map,$/;"	f	file:
delete_cache	riscvsim/cache.c	/^delete_cache(Cache **c)$/;"	f
desc_addr	virtio.c	/^    virtio_phys_addr_t desc_addr;$/;"	m	struct:__anon10	file:
desc_idx	virtio.c	/^    int desc_idx;$/;"	m	struct:__anon12	file:
desc_idx	virtio.c	/^    int desc_idx;$/;"	m	struct:__anon18	file:
dev	fs_net.c	/^        } dev;$/;"	m	union:FSINode::__anon60	typeref:struct:FSINode::__anon60::__anon63	file:
dev	virtio.c	/^    VIRTIO9PDevice *dev;$/;"	m	struct:__anon18	file:
devfn	pci.c	/^    uint8_t devfn;$/;"	m	struct:PCIDevice	file:
devfn_alloc	pci.c	/^static int devfn_alloc(PCIBus *b)$/;"	f	file:
device	machine.h	/^    char *device;$/;"	m	struct:__anon29
device	machine.h	/^    char *device;$/;"	m	struct:__anon30
device	pci.c	/^    PCIDevice *device[256];$/;"	m	struct:PCIBus	file:
device_can_write_packet	virtio.h	/^    BOOL (*device_can_write_packet)(EthernetDevice *net);$/;"	m	struct:EthernetDevice
device_features	virtio.c	/^    uint32_t device_features;$/;"	m	struct:VIRTIODevice	file:
device_features_sel	virtio.c	/^    uint32_t device_features_sel;$/;"	m	struct:VIRTIODevice	file:
device_id	virtio.c	/^    uint32_t device_id;$/;"	m	struct:VIRTIODevice	file:
device_opaque	machine.h	/^    void *device_opaque;$/;"	m	struct:FBDevice
device_opaque	virtio.h	/^    void *device_opaque;$/;"	m	struct:EthernetDevice
device_recv	virtio.c	/^    VIRTIODeviceRecvFunc *device_recv;$/;"	m	struct:VIRTIODevice	file:
device_set_carrier	virtio.h	/^    void (*device_set_carrier)(EthernetDevice *net, BOOL carrier_state);$/;"	m	struct:EthernetDevice
device_write_packet	virtio.h	/^    void (*device_write_packet)(EthernetDevice *net,$/;"	m	struct:EthernetDevice
devio_flags	iomem.h	/^    int devio_flags;$/;"	m	struct:__anon2
devram_flags	iomem.h	/^    int devram_flags;$/;"	m	struct:__anon2
dfd	slirp/debug.h	16;"	d
dhcp_decode	slirp/bootp.c	/^static void dhcp_decode(const struct bootp_t *bp, int *pmsg_type,$/;"	f	file:
dir	fs_net.c	/^        } dir;$/;"	m	union:FSINode::__anon60	typeref:struct:FSINode::__anon60::__anon62	file:
dirp	fs_disk.c	/^        DIR *dirp;$/;"	m	union:FSFile::__anon75	file:
dirty	riscvsim/cache.h	/^    uint8_t dirty;$/;"	m	struct:CacheBlk
dirty_bits	iomem.h	/^    uint32_t *dirty_bits; \/* NULL if not used *\/$/;"	m	struct:__anon2
dirty_bits_index	iomem.h	/^    int dirty_bits_index; \/* 0-1 *\/$/;"	m	struct:__anon2
dirty_bits_size	iomem.h	/^    int dirty_bits_size; \/* in bytes *\/$/;"	m	struct:__anon2
dirty_bits_tab	iomem.h	/^    uint32_t *dirty_bits_tab[2];$/;"	m	struct:__anon2
dispatch	riscvsim/ooo.h	/^    CPUStage dispatch;$/;"	m	struct:OOCore
display_device	machine.h	/^    char *display_device; \/* NULL means no display *\/$/;"	m	struct:__anon32
div_sf	softfp_template.h	/^F_UINT div_sf(F_UINT a, F_UINT b, RoundingModeEnum rm,$/;"	f
div_sf	softfp_template.h	1122;"	d
div_sf	softfp_template.h	67;"	d
div_stage_latency	riscvsim/sim_params_stats.h	/^    int *div_stage_latency;$/;"	m	struct:SimParams
divrem_u	softfp_template.h	/^static F_UINT divrem_u(F_UINT *pr, F_UINT a1, F_UINT a0, F_UINT b)$/;"	f
divrem_u	softfp_template.h	/^static F_UINT divrem_u(F_UINT *pr, F_UINT ah, F_UINT al, F_UINT b)$/;"	f
divrem_u	softfp_template.h	1125;"	d
divrem_u	softfp_template.h	70;"	d
dns_addr	slirp/slirp.c	/^static struct in_addr dns_addr;$/;"	v	typeref:struct:in_addr	file:
dns_addr_stat	slirp/slirp.c	/^static struct stat dns_addr_stat;$/;"	v	typeref:struct:stat	file:
dns_addr_time	slirp/slirp.c	/^static u_int dns_addr_time;$/;"	v	file:
do_decode_stage_exec	riscvsim/common_core_utils.c	/^do_decode_stage_exec(RISCVCPUState *s, IMapEntry *e)$/;"	f
do_exec_insn	riscvsim/inorder_backend.c	/^do_exec_insn(RISCVCPUState *s, INCore *core, IMapEntry *e, int fu_type)$/;"	f	file:
do_fetch_stage_exec	riscvsim/common_core_utils.c	/^do_fetch_stage_exec(RISCVCPUState *s, IMapEntry *e)$/;"	f
do_fwd_data_from_ex_to_drf	riscvsim/inorder_backend.c	/^do_fwd_data_from_ex_to_drf(INCore *core, IMapEntry *e, int fu_type)$/;"	f	file:
do_insn_rename_and_read_reg_file	riscvsim/ooo_frontend.c	/^do_insn_rename_and_read_reg_file(OOCore *core, IMapEntry *e)$/;"	f	file:
do_sim_trace	riscvsim/sim_params_stats.h	/^    int do_sim_trace;$/;"	m	struct:SimParams
do_slowtimo	slirp/slirp.c	/^static int do_slowtimo;$/;"	v	file:
downloading_count	fs_wget.c	/^static int downloading_count;$/;"	v	file:
dram_burst_size	riscvsim/memory_controller.h	/^    uint32_t dram_burst_size;$/;"	m	struct:MemoryController
dram_burst_size	riscvsim/sim_params_stats.h	/^    uint32_t dram_burst_size;$/;"	m	struct:SimParams
dramsim	riscvsim/dramsim_wrapper.h	/^    MultiChannelMemorySystem *dramsim;$/;"	m	class:dramsim_wrapper
dramsim_get_burst_size	riscvsim/dramsim_wrapper_c_connector.cpp	/^dramsim_get_burst_size()$/;"	f
dramsim_ini_file	riscvsim/sim_params_stats.h	/^    char *dramsim_ini_file;$/;"	m	struct:SimParams
dramsim_stats_dir	riscvsim/sim_params_stats.h	/^    char *dramsim_stats_dir;$/;"	m	struct:SimParams
dramsim_system_ini_file	riscvsim/sim_params_stats.h	/^    char *dramsim_system_ini_file;$/;"	m	struct:SimParams
dramsim_wrapper	riscvsim/dramsim_wrapper.cpp	/^dramsim_wrapper::dramsim_wrapper(const char *dram_ini_file,$/;"	f	class:dramsim_wrapper
dramsim_wrapper	riscvsim/dramsim_wrapper.h	/^class dramsim_wrapper$/;"	c
dramsim_wrapper_add_transaction	riscvsim/dramsim_wrapper_c_connector.cpp	/^dramsim_wrapper_add_transaction(target_ulong addr, int isWrite)$/;"	f
dramsim_wrapper_can_add_transaction	riscvsim/dramsim_wrapper_c_connector.cpp	/^dramsim_wrapper_can_add_transaction(target_ulong addr)$/;"	f
dramsim_wrapper_destroy	riscvsim/dramsim_wrapper_c_connector.cpp	/^dramsim_wrapper_destroy()$/;"	f
dramsim_wrapper_init	riscvsim/dramsim_wrapper_c_connector.cpp	/^dramsim_wrapper_init(const char *dram_ini_file, const char *system_ini_file,$/;"	f
dramsim_wrapper_obj	riscvsim/dramsim_wrapper_c_connector.cpp	/^static dramsim_wrapper *dramsim_wrapper_obj = NULL;$/;"	v	file:
dramsim_wrapper_print_stats	riscvsim/dramsim_wrapper_c_connector.cpp	/^dramsim_wrapper_print_stats()$/;"	f
dramsim_wrapper_update	riscvsim/dramsim_wrapper_c_connector.cpp	/^dramsim_wrapper_update()$/;"	f
drive_count	machine.h	/^    int drive_count;$/;"	m	struct:__anon32
driver	machine.h	/^    char *driver;$/;"	m	struct:__anon31
drives	ide.c	/^    IDEState *drives[2];$/;"	m	struct:IDEIFState	file:
dtom	slirp/mbuf.c	/^dtom(Slirp *slirp, void *dat)$/;"	f
dummy	slirp/ip.h	/^	uint32_t dummy;$/;"	m	struct:mbuf_ptr
dummy	slirp/tcpip.h	/^	struct tcpiphdr dummy;$/;"	m	struct:tcpiphdr_2	typeref:struct:tcpiphdr_2::tcpiphdr
dump_archive_file	fs_net.c	/^    FILE *dump_archive_file;$/;"	m	struct:FSDeviceMem	file:
dump_archive_name	fs_net.c	/^    char *dump_archive_name;$/;"	m	struct:FSDeviceMem	file:
dump_archive_num	fs_net.c	/^    int dump_archive_num;$/;"	m	struct:FSDeviceMem	file:
dump_archive_size	fs_net.c	/^    uint64_t dump_archive_size;$/;"	m	struct:FSDeviceMem	file:
dump_cache_load	fs_net.c	/^    BOOL dump_cache_load;$/;"	m	struct:FSDeviceMem	file:
dump_close_archive	fs_net.c	/^static void dump_close_archive(FSDevice *fs1)$/;"	f	file:
dump_exclude_list	fs_net.c	/^    struct list_head dump_exclude_list; \/* list of PreloadFile.link *\/$/;"	m	struct:FSDeviceMem	typeref:struct:FSDeviceMem::list_head	file:
dump_loaded_file	fs_net.c	/^static void dump_loaded_file(FSDevice *fs1, FSINode *n)$/;"	f	file:
dump_preload_archive_file	fs_net.c	/^    FILE *dump_preload_archive_file;$/;"	m	struct:FSDeviceMem	file:
dump_preload_dir	fs_net.c	/^    char *dump_preload_dir;$/;"	m	struct:FSDeviceMem	file:
dump_preload_file	fs_net.c	/^    FILE *dump_preload_file;$/;"	m	struct:FSDeviceMem	file:
dump_preload_list	fs_net.c	/^    struct list_head dump_preload_list; \/* list of PreloadFile.link *\/$/;"	m	struct:FSDeviceMem	typeref:struct:FSDeviceMem::list_head	file:
dump_regs	riscv_cpu.c	/^static void dump_regs(RISCVCPUState *s)$/;"	f	file:
dump_simulation_stats	riscv_cpu.c	/^dump_simulation_stats(RISCVCPUState *s)$/;"	f	file:
dump_started	fs_net.c	/^    BOOL dump_started;$/;"	m	struct:FSDeviceMem	file:
e	riscvsim/common_core_utils.h	/^    IMapEntry *e;$/;"	m	struct:SimTracePacket
e	riscvsim/ooo.h	/^    IMapEntry *e;$/;"	m	struct:IssueQueueEntry
e	riscvsim/ooo.h	/^    IMapEntry *e;$/;"	m	struct:LSQEntry
e	riscvsim/ooo.h	/^    IMapEntry *e;$/;"	m	struct:ROBEntry
ecall	riscvsim/sim_params_stats.h	/^    uint64_t ecall;$/;"	m	struct:SimStats
eh	fs_wget.c	/^    CURL *eh;$/;"	m	struct:XHRState	file:
empty_reg	riscvsim/ras.h	/^    target_ulong empty_reg;$/;"	m	struct:Ras
emu	slirp/misc.h	/^    uint8_t emu;$/;"	m	struct:emu_t
emu	slirp/misc.h	/^    uint8_t emu;$/;"	m	struct:tos_t
emu_cpu_state	riscvsim/riscv_sim_cpu.h	/^    struct RISCVCPUState *emu_cpu_state;   \/* Pointer to emulated CPU state *\/$/;"	m	struct:RISCVSIMCPUState	typeref:struct:RISCVSIMCPUState::RISCVCPUState
emu_t	slirp/misc.h	/^struct emu_t {$/;"	s
enable_bpu	riscvsim/sim_params_stats.h	/^    int enable_bpu;$/;"	m	struct:SimParams
enable_l1_caches	riscvsim/sim_params_stats.h	/^    int enable_l1_caches;$/;"	m	struct:SimParams
enable_l2_cache	riscvsim/sim_params_stats.h	/^    int enable_l2_cache;$/;"	m	struct:SimParams
enable_parallel_fu	riscvsim/sim_params_stats.h	/^    int enable_parallel_fu;$/;"	m	struct:SimParams
enable_stats_display	riscvsim/sim_params_stats.h	/^    int enable_stats_display;$/;"	m	struct:SimParams
enabled	pci.c	/^    uint8_t enabled; \/* true if mapping is enabled *\/$/;"	m	struct:__anon1	file:
enabled	vmmouse.c	/^    BOOL enabled;$/;"	m	struct:VMMouseState	file:
encode_hex	fs_utils.c	/^void encode_hex(char *str, const uint8_t *buf, int len)$/;"	f
encrypted	fs_net.c	/^    BOOL encrypted;$/;"	m	struct:FSBaseURL	file:
encrypted_file_magic	fs_utils.c	/^const uint8_t encrypted_file_magic[4] = { 0xfb, 0xa2, 0xe9, 0x01 };$/;"	v
end_transfer_func	ide.c	/^    EndTransferFunc *end_transfer_func;$/;"	m	struct:IDEState	file:
entries	riscvsim/ooo.h	/^    LSQEntry *entries;$/;"	m	struct:LSQ
entries	riscvsim/ooo.h	/^    ROBEntry *entries;$/;"	m	struct:ReOrderBuffer
entry	riscvsim/memory_controller.h	/^    PendingMemAccessEntry entry[MEM_REQUEST_QUEUE_SIZE];$/;"	m	struct:MemRequestQueue
entry	riscvsim/memory_controller_utils.h	/^    PendingMemAccessEntry *entry;$/;"	m	struct:StageMemAccessQueue
entry	riscvsim/ras.h	/^    target_ulong *entry;$/;"	m	struct:Ras
errno	slirp/slirp.h	309;"	d
errno	slirp/slirp.h	310;"	d
errno_table	fs_disk.c	/^static int errno_table[][2] = {$/;"	v	file:
errno_to_p9	fs_disk.c	/^static int errno_to_p9(int err)$/;"	f	file:
error	ide.c	/^    uint8_t error;$/;"	m	struct:IDEState	file:
es	virtio.c	/^    EthernetDevice *es;$/;"	m	struct:VIRTIONetDevice	file:
eth_count	machine.h	/^    int eth_count;$/;"	m	struct:__anon32
ethhdr	slirp/slirp.c	/^struct ethhdr$/;"	s	file:
ex_addr	slirp/misc.h	/^	struct in_addr ex_addr;		\/* Server address *\/$/;"	m	struct:ex_list	typeref:struct:ex_list::in_addr
ex_exec	slirp/misc.h	/^	const char *ex_exec;            \/* Command line of what to exec *\/$/;"	m	struct:ex_list
ex_fport	slirp/misc.h	/^	int ex_fport;                   \/* Port to telnet to *\/$/;"	m	struct:ex_list
ex_list	slirp/misc.h	/^struct ex_list {$/;"	s
ex_next	slirp/misc.h	/^	struct ex_list *ex_next;$/;"	m	struct:ex_list	typeref:struct:ex_list::ex_list
ex_pty	slirp/misc.h	/^	int ex_pty;			\/* Do we want a pty? *\/$/;"	m	struct:ex_list
exception	riscvsim/riscv_instruction.h	/^    int exception;$/;"	m	struct:RVInstruction
exception_cause	riscvsim/riscv_instruction.h	/^    int exception_cause;$/;"	m	struct:RVInstruction
exec_list	slirp/slirp.h	/^    struct ex_list *exec_list;$/;"	m	struct:Slirp	typeref:struct:Slirp::ex_list
exec_unit_delay	riscvsim/sim_params_stats.h	/^    uint64_t exec_unit_delay;$/;"	m	struct:SimStats
exec_unit_flush	riscvsim/common_core_utils.c	/^exec_unit_flush(CPUStage *stage, int num_stages)$/;"	f
execute_atomic	riscvsim/common_core_utils.c	/^execute_atomic(RISCVCPUState *s, IMapEntry *e)$/;"	f	file:
execute_ext_c_path	riscvsim/riscv_ins_execute.c	/^execute_ext_c_path(RVInstruction *i)$/;"	f	file:
execute_ext_c_q0	riscvsim/riscv_ins_execute.c	/^execute_ext_c_q0(RVInstruction *i)$/;"	f	file:
execute_ext_c_q1	riscvsim/riscv_ins_execute.c	/^execute_ext_c_q1(RVInstruction *i)$/;"	f	file:
execute_ext_c_q2	riscvsim/riscv_ins_execute.c	/^execute_ext_c_q2(RVInstruction *i)$/;"	f	file:
execute_load_store	riscvsim/common_core_utils.c	/^execute_load_store(RISCVCPUState *s, IMapEntry *e)$/;"	f
execute_op	riscvsim/riscv_ins_execute.c	/^execute_op(RVInstruction *i)$/;"	f	file:
execute_op_32	riscvsim/riscv_ins_execute.c	/^execute_op_32(RVInstruction *i)$/;"	f	file:
execute_op_imm	riscvsim/riscv_ins_execute.c	/^execute_op_imm(RVInstruction *i)$/;"	f	file:
execute_op_imm_32	riscvsim/riscv_ins_execute.c	/^execute_op_imm_32(RVInstruction *i)$/;"	f	file:
execute_riscv_instruction	riscvsim/riscv_ins_execute.c	/^execute_riscv_instruction(RVInstruction *i, uint32_t *fflags)$/;"	f
execute_stage_busy	riscvsim/inorder_frontend.c	/^execute_stage_busy(INCore *core, int* busy_stage_id)$/;"	f	file:
execute_type_b	riscvsim/riscv_ins_execute.c	/^execute_type_b(RVInstruction *i)$/;"	f	file:
extra	slirp/socket.h	/^  void * extra;			\/* Extra pointer *\/$/;"	m	struct:socket
f	build_filelist.c	/^    FILE *f;$/;"	m	struct:__anon7	file:
f	fs_net.c	/^    FSFile *f;$/;"	m	struct:FSOpenInfo	file:
f	fs_wget.c	/^    FSFile *f;$/;"	m	struct:__anon21	file:
f	temu.c	/^    FILE *f;$/;"	m	struct:BlockDeviceFile	file:
f32_mask	riscvsim/riscv_instruction.h	/^    int f32_mask;$/;"	m	struct:RVInstruction
f64_mask	riscvsim/riscv_instruction.h	/^    int f64_mask;$/;"	m	struct:RVInstruction
f_bavail	fs.h	/^    uint64_t f_bavail;$/;"	m	struct:__anon54
f_bfree	fs.h	/^    uint64_t f_bfree;$/;"	m	struct:__anon54
f_blocks	fs.h	/^    uint64_t f_blocks;$/;"	m	struct:__anon54
f_bsize	fs.h	/^    uint32_t f_bsize;$/;"	m	struct:__anon54
f_ffree	fs.h	/^    uint64_t f_ffree;$/;"	m	struct:__anon54
f_files	fs.h	/^    uint64_t f_files;$/;"	m	struct:__anon54
fatal_error	fs_net.c	/^static void __attribute__((format(printf, 1, 2))) fatal_error(const char *fmt, ...)$/;"	f	file:
fb_data	machine.h	/^    uint8_t *fb_data; \/* current pointer to the pixel data *\/$/;"	m	struct:FBDevice
fb_dev	machine.h	/^    FBDevice *fb_dev;$/;"	m	struct:VirtMachine
fb_dev	simplefb.c	/^    FBDevice *fb_dev;$/;"	m	struct:SimpleFBState	file:
fb_dev	vga.c	/^    FBDevice *fb_dev;$/;"	m	struct:VGAState	file:
fb_height	sdl.c	/^static int screen_width, screen_height, fb_width, fb_height, fb_stride;$/;"	v	file:
fb_page_count	simplefb.c	/^    int fb_page_count;$/;"	m	struct:SimpleFBState	file:
fb_page_count	vga.c	/^    int fb_page_count;$/;"	m	struct:VGAState	file:
fb_size	machine.h	/^    int fb_size; \/* frame buffer memory size (info only) *\/$/;"	m	struct:FBDevice
fb_stride	sdl.c	/^static int screen_width, screen_height, fb_width, fb_height, fb_stride;$/;"	v	file:
fb_surface	sdl.c	/^static SDL_Surface *fb_surface;$/;"	v	file:
fb_width	sdl.c	/^static int screen_width, screen_height, fb_width, fb_height, fb_stride;$/;"	v	file:
fbuf	block_net.c	/^    FileBuffer fbuf;$/;"	m	struct:CachedBlock	file:
fbuf	block_net.c	/^    FileBuffer fbuf;$/;"	m	struct:Cluster	file:
fbuf	fs_net.c	/^            FileBuffer fbuf;$/;"	m	struct:FSINode::__anon60::__anon61	file:
fcr	vga.c	/^    uint8_t fcr; \/* Feature Control Register *\/$/;"	m	struct:VGAState	file:
fd	fs_disk.c	/^        int fd;$/;"	m	union:FSFile::__anon75	file:
fd	fs_net.c	/^    FSFile *fd;$/;"	m	struct:CmdXHRState	file:
fd	fs_net.c	/^    FSFile *fd;$/;"	m	struct:__anon73	file:
fd	temu.c	/^    int fd;$/;"	m	struct:__anon35	file:
fd	virtio.c	/^    FSFile *fd;$/;"	m	struct:__anon16	file:
fd_block	slirp/misc.c	/^fd_block(int fd)$/;"	f
fd_nonblock	slirp/misc.c	/^fd_nonblock(int fd)$/;"	f
fdt_alloc_len	riscv_machine.c	/^static void fdt_alloc_len(FDTState *s, int len)$/;"	f	file:
fdt_begin_node	riscv_machine.c	/^static void fdt_begin_node(FDTState *s, const char *name)$/;"	f	file:
fdt_begin_node_num	riscv_machine.c	/^static void fdt_begin_node_num(FDTState *s, const char *name, uint64_t n)$/;"	f	file:
fdt_end	riscv_machine.c	/^void fdt_end(FDTState *s)$/;"	f
fdt_end_node	riscv_machine.c	/^static void fdt_end_node(FDTState *s)$/;"	f	file:
fdt_get_string_offset	riscv_machine.c	/^static int fdt_get_string_offset(FDTState *s, const char *name)$/;"	f	file:
fdt_header	riscv_machine.c	/^struct fdt_header {$/;"	s	file:
fdt_init	riscv_machine.c	/^static FDTState *fdt_init(void)$/;"	f	file:
fdt_output	riscv_machine.c	/^int fdt_output(FDTState *s, uint8_t *dst)$/;"	f
fdt_prop	riscv_machine.c	/^static void fdt_prop(FDTState *s, const char *prop_name,$/;"	f	file:
fdt_prop_str	riscv_machine.c	/^static void fdt_prop_str(FDTState *s, const char *prop_name,$/;"	f	file:
fdt_prop_tab_str	riscv_machine.c	/^static void fdt_prop_tab_str(FDTState *s, const char *prop_name,$/;"	f	file:
fdt_prop_tab_u32	riscv_machine.c	/^static void fdt_prop_tab_u32(FDTState *s, const char *prop_name,$/;"	f	file:
fdt_prop_tab_u64	riscv_machine.c	/^static void fdt_prop_tab_u64(FDTState *s, const char *prop_name,$/;"	f	file:
fdt_prop_tab_u64_2	riscv_machine.c	/^static void fdt_prop_tab_u64_2(FDTState *s, const char *prop_name,$/;"	f	file:
fdt_prop_u32	riscv_machine.c	/^static void fdt_prop_u32(FDTState *s, const char *prop_name, uint32_t val)$/;"	f	file:
fdt_put32	riscv_machine.c	/^static void fdt_put32(FDTState *s, int v)$/;"	f	file:
fdt_put_data	riscv_machine.c	/^static void fdt_put_data(FDTState *s, const uint8_t *data, int len)$/;"	f	file:
fdt_reserve_entry	riscv_machine.c	/^struct fdt_reserve_entry {$/;"	s	file:
feature	ide.c	/^    uint8_t feature;$/;"	m	struct:IDEState	file:
fetch	riscvsim/inorder.h	/^    CPUStage fetch;$/;"	m	struct:INCore
fetch	riscvsim/ooo.h	/^    CPUStage fetch;$/;"	m	struct:OOCore
fflags	riscv_cpu_priv.h	/^    uint32_t fflags;$/;"	m	struct:RISCVCPUState
fid	virtio.c	/^    uint32_t fid;$/;"	m	struct:__anon16	file:
fid_create	fs_disk.c	/^static FSFile *fid_create(FSDevice *s1, char *path, uint32_t uid)$/;"	f	file:
fid_create	fs_net.c	/^static FSFile *fid_create(FSDevice *fs1, FSINode *n, uint32_t uid)$/;"	f	file:
fid_delete	virtio.c	/^static void fid_delete(VIRTIO9PDevice *s, uint32_t fid)$/;"	f	file:
fid_find	virtio.c	/^static FSFile *fid_find(VIRTIO9PDevice *s, uint32_t fid)$/;"	f	file:
fid_find1	virtio.c	/^static FIDDesc *fid_find1(VIRTIO9PDevice *s, uint32_t fid)$/;"	f	file:
fid_list	virtio.c	/^    struct list_head fid_list; \/* list of FIDDesc *\/$/;"	m	struct:VIRTIO9PDevice	typeref:struct:VIRTIO9PDevice::list_head	file:
fid_set	virtio.c	/^static void fid_set(VIRTIO9PDevice *s, uint32_t fid, FSFile *fd)$/;"	f	file:
fifo_buf	vmmouse.c	/^    uint32_t fifo_buf[FIFO_SIZE];$/;"	m	struct:VMMouseState	file:
fifo_count	vmmouse.c	/^    int fifo_count, fifo_rindex, fifo_windex;$/;"	m	struct:VMMouseState	file:
fifo_rindex	vmmouse.c	/^    int fifo_count, fifo_rindex, fifo_windex;$/;"	m	struct:VMMouseState	file:
fifo_windex	vmmouse.c	/^    int fifo_count, fifo_rindex, fifo_windex;$/;"	m	struct:VMMouseState	file:
file_buffer_init	fs_net.c	/^void file_buffer_init(FileBuffer *bs)$/;"	f
file_buffer_read	fs_net.c	/^void file_buffer_read(FileBuffer *bs, size_t offset, uint8_t *buf,$/;"	f
file_buffer_reset	fs_net.c	/^void file_buffer_reset(FileBuffer *bs)$/;"	f
file_buffer_resize	fs_net.c	/^int file_buffer_resize(FileBuffer *bs, size_t new_size)$/;"	f
file_buffer_set	fs_net.c	/^void file_buffer_set(FileBuffer *bs, size_t offset, int val, size_t size)$/;"	f
file_buffer_write	fs_net.c	/^void file_buffer_write(FileBuffer *bs, size_t offset, const uint8_t *buf,$/;"	f
file_id	fs_net.c	/^            FSFileID file_id; \/* network file ID *\/$/;"	m	struct:FSINode::__anon60::__anon61	file:
file_id	fs_net.c	/^    FSFileID file_id;$/;"	m	struct:__anon69	file:
file_id	fs_net.c	/^    FSFileID file_id;$/;"	m	struct:__anon70	file:
file_id_to_filename	fs_utils.c	/^char *file_id_to_filename(char *buf, FSFileID file_id)$/;"	f
file_index	fs_net.c	/^    int file_index;$/;"	m	struct:__anon73	file:
file_index	machine.c	/^    int file_index;$/;"	m	struct:__anon19	file:
file_list	fs_net.c	/^    struct list_head file_list; \/* list of PreloadArchiveFile.link *\/$/;"	m	struct:__anon71	typeref:struct:__anon71::list_head	file:
file_list	fs_net.c	/^    struct list_head file_list; \/* list of PreloadFile.link *\/$/;"	m	struct:__anon69	typeref:struct:__anon69::list_head	file:
file_load_cb	machine.c	/^    FSLoadFileCB *file_load_cb;$/;"	m	struct:__anon19	file:
file_load_opaque	machine.c	/^    void *file_load_opaque;$/;"	m	struct:__anon19	file:
filelist_load	fs_net.c	/^static int filelist_load(FSDevice *fs1, const char *str)$/;"	f	file:
filelist_load_rec	fs_net.c	/^static int filelist_load_rec(FSDevice *fs1, const char **pp, FSINode *dir,$/;"	f	file:
filelist_loaded	fs_net.c	/^static void filelist_loaded(FSDevice *fs, FSFile *f, int64_t size, void *opaque)$/;"	f	file:
filename	fs_net.c	/^            char *filename;$/;"	m	struct:FSINode::__anon60::__anon61	file:
filename	machine.h	/^    char *filename;$/;"	m	struct:__anon28
filename	machine.h	/^    char *filename;$/;"	m	struct:__anon29
filename	machine.h	/^    char *filename;$/;"	m	struct:__anon30
filename	slirp/tftp.h	/^    char *filename;$/;"	m	struct:tftp_session
files	machine.h	/^    VMFileEntry files[VM_FILE_COUNT];$/;"	m	struct:__anon32
files_path	build_filelist.c	/^    char *files_path;$/;"	m	struct:__anon7	file:
find_addr	slirp/bootp.c	/^static BOOTPClient *find_addr(Slirp *slirp, struct in_addr *paddr,$/;"	f	file:
find_name	machine.c	/^static BOOL find_name(const char *name, const char *name_list)$/;"	f	file:
find_preload_archive	fs_net.c	/^static PreloadArchive *find_preload_archive(FSDeviceMem *fs,$/;"	f	file:
first_char	slirp/tcpip.h	/^	char first_char;$/;"	m	struct:tcpiphdr_2
fix_rename_tables	riscvsim/ooo_branch.c	/^fix_rename_tables(OOCore *core, RenameTableEntry *rat, int num_regs)$/;"	f	file:
flags	fs.h	/^    uint32_t flags;$/;"	m	struct:__anon57
flags	virtio.c	/^    uint16_t flags; \/* VRING_DESC_F_x *\/$/;"	m	struct:__anon11	file:
flags	virtio.c	/^    uint8_t flags;$/;"	m	struct:__anon14	file:
flush_dir	fs_net.c	/^static void flush_dir(FSDevice *fs, FSINode *n)$/;"	f	file:
flush_fu_stage	riscvsim/inorder_backend.c	/^flush_fu_stage(INCore *core, CPUStage *fu, int stages)$/;"	f	file:
flush_sim_mem	riscvsim/sim_params_stats.h	/^    int flush_sim_mem;$/;"	m	struct:SimParams
flush_speculated_cpu_state	riscvsim/inorder_backend.c	/^flush_speculated_cpu_state(INCore *core, IMapEntry *e)$/;"	f	file:
flush_tlb_write_range	iomem.h	/^    void (*flush_tlb_write_range)(void *opaque, uint8_t *ram_addr,$/;"	m	struct:PhysMemoryMap
fma_sf	softfp_template.h	/^F_UINT fma_sf(F_UINT a, F_UINT b, F_UINT c, RoundingModeEnum rm,$/;"	f
fma_sf	softfp_template.h	1121;"	d
fma_sf	softfp_template.h	66;"	d
force_inline	cutils.h	31;"	d
fork_exec	slirp/misc.c	/^fork_exec(struct socket *so, const char *ex, int do_pty)$/;"	f
fp_dest	riscvsim/common_core_utils.h	/^    int fp_dest;$/;"	m	struct:DataFWDLatch
fp_rat	riscvsim/ooo.h	/^    RenameTableEntry *fp_rat;$/;"	m	struct:OOCore
fp_reg	riscv_cpu_priv.h	/^    fp_uint fp_reg[32];$/;"	m	struct:RISCVCPUState
fp_reg	riscvsim/riscv_ins_str_creator.c	/^static const char fp_reg[][6] = {$/;"	v	file:
fp_reg_status	riscvsim/inorder.h	/^    uint32_t fp_reg_status[NUM_FP_REG];$/;"	m	struct:INCore
fp_regfile_reads	riscvsim/sim_params_stats.h	/^    uint64_t fp_regfile_reads;$/;"	m	struct:SimStats
fp_regfile_writes	riscvsim/sim_params_stats.h	/^    uint64_t fp_regfile_writes;$/;"	m	struct:SimStats
fp_uint	riscv_cpu_xlen_typedefs.h	/^typedef uint128_t fp_uint;$/;"	t
fp_uint	riscv_cpu_xlen_typedefs.h	/^typedef uint32_t fp_uint;$/;"	t
fp_uint	riscv_cpu_xlen_typedefs.h	/^typedef uint64_t fp_uint;$/;"	t
fport	slirp/misc.h	/^    uint16_t fport;$/;"	m	struct:emu_t
fport	slirp/misc.h	/^    uint16_t fport;$/;"	m	struct:tos_t
fprint_target_ulong	riscv_cpu.c	/^static void fprint_target_ulong(FILE *f, target_ulong a)$/;"	f	file:
fpu_alu	riscvsim/inorder.h	/^    CPUStage fpu_alu;$/;"	m	struct:INCore
fpu_alu	riscvsim/ooo.h	/^    CPUStage fpu_alu; \/* FP ALU *\/$/;"	m	struct:OOCore
fpu_alu_latency	riscvsim/sim_params_stats.h	/^    int fpu_alu_latency[MAX_FU_FPU_ALU_TYPES];$/;"	m	struct:SimParams
fpu_alu_type	riscvsim/riscv_instruction.h	/^    int fpu_alu_type;$/;"	m	struct:RVInstruction
fpu_fma	riscvsim/inorder.h	/^    CPUStage *fpu_fma;$/;"	m	struct:INCore
fpu_fma	riscvsim/ooo.h	/^    CPUStage *fpu_fma; \/* FP Fused Multiply Add *\/$/;"	m	struct:OOCore
fpu_fma_stage_latency	riscvsim/sim_params_stats.h	/^    int *fpu_fma_stage_latency;$/;"	m	struct:SimParams
frag_link	slirp/ip.h	/^        struct qlink frag_link;			\/* to ip headers of fragments *\/$/;"	m	struct:ipq	typeref:struct:ipq::qlink
fragtoip	slirp/ip_input.c	236;"	d	file:
free_ram	iomem.h	/^    void (*free_ram)(PhysMemoryMap *s, PhysMemoryRange *pr);$/;"	m	struct:PhysMemoryMap
frm	riscv_cpu_priv.h	/^    uint8_t frm;$/;"	m	struct:RISCVCPUState
from_hex	fs_utils.h	/^static inline int from_hex(int c)$/;"	f
front	riscvsim/circular_queue.h	/^    int front;$/;"	m	struct:CircularQueue
frontend_mem_access_queue	riscvsim/dramsim_wrapper.h	/^    StageMemAccessQueue *frontend_mem_access_queue;$/;"	m	class:dramsim_wrapper
frontend_mem_access_queue	riscvsim/memory_controller.h	/^    StageMemAccessQueue frontend_mem_access_queue;$/;"	m	struct:MemoryController
fs	fs_net.c	/^    FSDevice *fs;$/;"	m	struct:FSOpenInfo	file:
fs	fs_net.c	/^    FSDevice *fs;$/;"	m	struct:__anon73	file:
fs	fs_wget.c	/^    FSDevice *fs;$/;"	m	struct:__anon21	file:
fs	riscv_cpu_priv.h	/^    uint8_t fs; \/* MSTATUS_FS value *\/$/;"	m	struct:RISCVCPUState
fs	virtio.c	/^    FSDevice *fs;$/;"	m	struct:VIRTIO9PDevice	file:
fs_attach	fs.h	/^    int (*fs_attach)(FSDevice *fs, FSFile **pf, FSQID *qid, uint32_t uid,$/;"	m	struct:FSDevice
fs_attach	fs_disk.c	/^static int fs_attach(FSDevice *fs1, FSFile **pf,$/;"	f	file:
fs_attach	fs_net.c	/^static int fs_attach(FSDevice *fs1, FSFile **pf, FSQID *qid, uint32_t uid,$/;"	f	file:
fs_base_url_decref	fs_net.c	/^static void fs_base_url_decref(FSDevice *fs, FSBaseURL *bu)$/;"	f	file:
fs_blocks	fs_net.c	/^    int64_t fs_blocks;$/;"	m	struct:FSDeviceMem	file:
fs_close	fs.h	/^    void (*fs_close)(FSDevice *fs, FSFile *f);$/;"	m	struct:FSDevice
fs_close	fs_disk.c	/^static void fs_close(FSDevice *fs, FSFile *f)$/;"	f	file:
fs_close	fs_net.c	/^static void fs_close(FSDevice *fs, FSFile *f)$/;"	f	file:
fs_cmd_close	fs_net.c	/^static void fs_cmd_close(FSDevice *fs, FSFile *f)$/;"	f	file:
fs_cmd_export_file	fs_net.c	/^static int fs_cmd_export_file(FSDevice *fs, const char *p)$/;"	f	file:
fs_cmd_pbkdf2	fs_net.c	/^static int fs_cmd_pbkdf2(FSDevice *fs, FSFile *f, const char *p)$/;"	f	file:
fs_cmd_read	fs_net.c	/^static int fs_cmd_read(FSDevice *fs, FSFile *f, uint64_t offset,$/;"	f	file:
fs_cmd_reset_base_url	fs_net.c	/^static int fs_cmd_reset_base_url(FSDevice *fs, const char *p)$/;"	f	file:
fs_cmd_set_base_url	fs_net.c	/^static int fs_cmd_set_base_url(FSDevice *fs, const char *p)$/;"	f	file:
fs_cmd_set_import_dir	fs_net.c	/^static int fs_cmd_set_import_dir(FSDevice *fs, FSFile *f, const char *p)$/;"	f	file:
fs_cmd_set_url	fs_net.c	/^static int fs_cmd_set_url(FSDevice *fs, const char *p)$/;"	f	file:
fs_cmd_write	fs_net.c	/^static int fs_cmd_write(FSDevice *fs, FSFile *f, uint64_t offset,$/;"	f	file:
fs_cmd_xhr	fs_net.c	/^static int fs_cmd_xhr(FSDevice *fs, FSFile *f,$/;"	f	file:
fs_cmd_xhr_on_load	fs_net.c	/^static void fs_cmd_xhr_on_load(FSDevice *fs, FSFile *f, int64_t size,$/;"	f	file:
fs_count	machine.h	/^    int fs_count;$/;"	m	struct:__anon32
fs_create	fs.h	/^    int (*fs_create)(FSDevice *fs, FSQID *qid, FSFile *f, const char *name, $/;"	m	struct:FSDevice
fs_create	fs_disk.c	/^static int fs_create(FSDevice *fs, FSQID *qid, FSFile *f, const char *name, $/;"	f	file:
fs_create	fs_net.c	/^static int fs_create(FSDevice *fs, FSQID *qid, FSFile *f, const char *name, $/;"	f	file:
fs_create_cmd	fs_net.c	/^static void fs_create_cmd(FSDevice *fs)$/;"	f	file:
fs_delete	fs.h	/^    void (*fs_delete)(FSDevice *s, FSFile *f);$/;"	m	struct:FSDevice
fs_delete	fs_disk.c	/^static void fs_delete(FSDevice *fs, FSFile *f)$/;"	f	file:
fs_delete	fs_net.c	/^static void fs_delete(FSDevice *fs, FSFile *f)$/;"	f	file:
fs_dev	machine.h	/^    FSDevice *fs_dev;$/;"	m	struct:__anon30
fs_disk_end	fs_disk.c	/^static void fs_disk_end(FSDevice *fs1)$/;"	f	file:
fs_disk_init	fs_disk.c	/^FSDevice *fs_disk_init(const char *root_path)$/;"	f
fs_dump_add_file	fs_net.c	/^static void fs_dump_add_file(struct list_head *head, const char *name)$/;"	f	file:
fs_dump_cache_load	fs_net.c	/^void fs_dump_cache_load(FSDevice *fs1, const char *cfg_filename)$/;"	f
fs_dump_find_file	fs_net.c	/^static PreloadFile *fs_dump_find_file(struct list_head *head, const char *name)$/;"	f	file:
fs_dup	fs.c	/^FSFile *fs_dup(FSDevice *fs, FSFile *f)$/;"	f
fs_end	fs.c	/^void fs_end(FSDevice *fs)$/;"	f
fs_end	fs.h	/^    void (*fs_end)(FSDevice *s);$/;"	m	struct:FSDevice
fs_error_archive	fs_net.c	/^static void fs_error_archive(FSOpenInfo *oi)$/;"	f	file:
fs_export_file	fs_net.c	/^void fs_export_file(const char *filename,$/;"	f
fs_find_base_url	fs_net.c	/^static FSBaseURL *fs_find_base_url(FSDevice *fs1,$/;"	f	file:
fs_getlock	fs.h	/^    int (*fs_getlock)(FSDevice *fs, FSFile *f, FSLock *lock);$/;"	m	struct:FSDevice
fs_getlock	fs_disk.c	/^static int fs_getlock(FSDevice *fs, FSFile *f, FSLock *lock)$/;"	f	file:
fs_getlock	fs_net.c	/^static int fs_getlock(FSDevice *fs, FSFile *f, FSLock *lock)$/;"	f	file:
fs_import_file	fs_net.c	/^void fs_import_file(const char *filename, uint8_t *buf, int buf_len)$/;"	f
fs_import_fs	fs_net.c	/^static FSDevice *fs_import_fs;$/;"	v	file:
fs_initial_sync	fs_net.c	/^static void fs_initial_sync(FSDevice *fs,$/;"	f	file:
fs_is_net	fs_net.c	/^static BOOL fs_is_net(FSDevice *fs)$/;"	f	file:
fs_link	fs.h	/^    int (*fs_link)(FSDevice *fs, FSFile *df, FSFile *f, const char *name);$/;"	m	struct:FSDevice
fs_link	fs_disk.c	/^static int fs_link(FSDevice *fs, FSFile *df, FSFile *f, const char *name)$/;"	f	file:
fs_link	fs_net.c	/^static int fs_link(FSDevice *fs, FSFile *df, FSFile *f, const char *name)$/;"	f	file:
fs_lock	fs.h	/^    int (*fs_lock)(FSDevice *fs, FSFile *f, const FSLock *lock);$/;"	m	struct:FSDevice
fs_lock	fs_disk.c	/^static int fs_lock(FSDevice *fs, FSFile *f, const FSLock *lock)$/;"	f	file:
fs_lock	fs_net.c	/^static int fs_lock(FSDevice *fs, FSFile *f, const FSLock *lock)$/;"	f	file:
fs_max_blocks	fs_net.c	/^    uint64_t fs_max_blocks;$/;"	m	struct:FSDeviceMem	file:
fs_max_size	build_filelist.c	/^    uint64_t fs_max_size;$/;"	m	struct:__anon7	file:
fs_mem_end	fs_net.c	/^static void fs_mem_end(FSDevice *fs1)$/;"	f	file:
fs_mem_init	fs_net.c	/^FSDevice *fs_mem_init(void)$/;"	f
fs_mkdir	fs.h	/^    int (*fs_mkdir)(FSDevice *fs, FSQID *qid, FSFile *f,$/;"	m	struct:FSDevice
fs_mkdir	fs_disk.c	/^static int fs_mkdir(FSDevice *fs, FSQID *qid, FSFile *f,$/;"	f	file:
fs_mkdir	fs_net.c	/^static int fs_mkdir(FSDevice *fs, FSQID *qid, FSFile *f,$/;"	f	file:
fs_mknod	fs.h	/^    int (*fs_mknod)(FSDevice *fs, FSQID *qid,$/;"	m	struct:FSDevice
fs_mknod	fs_disk.c	/^static int fs_mknod(FSDevice *fs, FSQID *qid,$/;"	f	file:
fs_mknod	fs_net.c	/^static int fs_mknod(FSDevice *fs, FSQID *qid,$/;"	f	file:
fs_net_event_loop	fs_wget.c	/^void fs_net_event_loop(FSNetEventLoopCompletionFunc *cb, void *opaque)$/;"	f
fs_net_init	fs_net.c	/^FSDevice *fs_net_init(const char *url, void (*start_cb)(void *opaque),$/;"	f
fs_net_reset_base_url	fs_net.c	/^static int fs_net_reset_base_url(FSDevice *fs1,$/;"	f	file:
fs_net_set_base_url	fs_net.c	/^static FSBaseURL *fs_net_set_base_url(FSDevice *fs1,$/;"	f	file:
fs_net_set_fdset	fs_wget.c	/^void fs_net_set_fdset(int *pfd_max, fd_set *rfds, fd_set *wfds, fd_set *efds,$/;"	f
fs_net_set_fs_max_size	fs_net.c	/^static void fs_net_set_fs_max_size(FSDevice *fs1, uint64_t fs_max_size)$/;"	f	file:
fs_net_set_pwd	fs_net.c	/^void fs_net_set_pwd(FSDevice *fs, const char *pwd)$/;"	f
fs_net_set_url	fs_net.c	/^static int fs_net_set_url(FSDevice *fs1, FSINode *n,$/;"	f	file:
fs_open	fs.h	/^    int (*fs_open)(FSDevice *fs, FSQID *qid, FSFile *f, uint32_t flags,$/;"	m	struct:FSDevice
fs_open	fs_disk.c	/^static int fs_open(FSDevice *fs, FSQID *qid, FSFile *f, uint32_t flags,$/;"	f	file:
fs_open	fs_net.c	/^static int fs_open(FSDevice *fs1, FSQID *qid, FSFile *f, uint32_t flags,$/;"	f	file:
fs_open_cb	fs_net.c	/^static void fs_open_cb(void *opaque, int err, void *data, size_t size)$/;"	f	file:
fs_open_end	fs_net.c	/^static void fs_open_end(FSOpenInfo *oi)$/;"	f	file:
fs_open_wget	fs_net.c	/^static int fs_open_wget(FSDevice *fs1, FSINode *n, FSOpenWgetEnum open_type)$/;"	f	file:
fs_open_write_cb	fs_net.c	/^static int fs_open_write_cb(void *opaque, const uint8_t *data, size_t size)$/;"	f	file:
fs_preload_archive	fs_net.c	/^static void fs_preload_archive(FSDevice *fs1, const char *filename)$/;"	f	file:
fs_preload_file	fs_net.c	/^static void fs_preload_file(FSDevice *fs1, const char *filename)$/;"	f	file:
fs_preload_files	fs_net.c	/^static void fs_preload_files(FSDevice *fs1, FSFileID file_id)$/;"	f	file:
fs_read	fs.h	/^    int (*fs_read)(FSDevice *fs, FSFile *f, uint64_t offset,$/;"	m	struct:FSDevice
fs_read	fs_disk.c	/^static int fs_read(FSDevice *fs, FSFile *f, uint64_t offset,$/;"	f	file:
fs_read	fs_net.c	/^static int fs_read(FSDevice *fs, FSFile *f, uint64_t offset,$/;"	f	file:
fs_read_archive	fs_net.c	/^static void fs_read_archive(FSOpenInfo *oi)$/;"	f	file:
fs_readdir	fs.h	/^    int (*fs_readdir)(FSDevice *fs, FSFile *f, uint64_t offset,$/;"	m	struct:FSDevice
fs_readdir	fs_disk.c	/^static int fs_readdir(FSDevice *fs, FSFile *f, uint64_t offset,$/;"	f	file:
fs_readdir	fs_net.c	/^static int fs_readdir(FSDevice *fs, FSFile *f, uint64_t offset1,$/;"	f	file:
fs_readlink	fs.h	/^    int (*fs_readlink)(FSDevice *fs, char *buf, int buf_size, FSFile *f);$/;"	m	struct:FSDevice
fs_readlink	fs_disk.c	/^static int fs_readlink(FSDevice *fs, char *buf, int buf_size, FSFile *f)$/;"	f	file:
fs_readlink	fs_net.c	/^static int fs_readlink(FSDevice *fs, char *buf, int buf_size, FSFile *f)$/;"	f	file:
fs_renameat	fs.h	/^    int (*fs_renameat)(FSDevice *fs, FSFile *f, const char *name, $/;"	m	struct:FSDevice
fs_renameat	fs_disk.c	/^static int fs_renameat(FSDevice *fs, FSFile *f, const char *name, $/;"	f	file:
fs_renameat	fs_net.c	/^static int fs_renameat(FSDevice *fs, FSFile *f, const char *name, $/;"	f	file:
fs_setattr	fs.h	/^    int (*fs_setattr)(FSDevice *fs, FSFile *f, uint32_t mask,$/;"	m	struct:FSDevice
fs_setattr	fs_disk.c	/^static int fs_setattr(FSDevice *fs, FSFile *f, uint32_t mask,$/;"	f	file:
fs_setattr	fs_net.c	/^static int fs_setattr(FSDevice *fs1, FSFile *f, uint32_t mask,$/;"	f	file:
fs_size	build_filelist.c	/^    uint64_t fs_size;$/;"	m	struct:__anon7	file:
fs_stat	fs.h	/^    int (*fs_stat)(FSDevice *fs, FSFile *f, FSStat *st);$/;"	m	struct:FSDevice
fs_stat	fs_disk.c	/^static int fs_stat(FSDevice *fs, FSFile *f, FSStat *st)$/;"	f	file:
fs_stat	fs_net.c	/^static int fs_stat(FSDevice *fs1, FSFile *f, FSStat *st)$/;"	f	file:
fs_statfs	fs.h	/^    void (*fs_statfs)(FSDevice *fs, FSStatFS *st);$/;"	m	struct:FSDevice
fs_statfs	fs_disk.c	/^static void fs_statfs(FSDevice *fs1, FSStatFS *st)$/;"	f	file:
fs_statfs	fs_net.c	/^static void fs_statfs(FSDevice *fs1, FSStatFS *st)$/;"	f	file:
fs_symlink	fs.h	/^    int (*fs_symlink)(FSDevice *fs, FSQID *qid,$/;"	m	struct:FSDevice
fs_symlink	fs_disk.c	/^static int fs_symlink(FSDevice *fs, FSQID *qid,$/;"	f	file:
fs_symlink	fs_net.c	/^static int fs_symlink(FSDevice *fs, FSQID *qid,$/;"	f	file:
fs_trim_cache	fs_net.c	/^static void fs_trim_cache(FSDevice *fs1, int64_t added_size)$/;"	f	file:
fs_truncate	fs_net.c	/^static int fs_truncate(FSDevice *fs1, FSINode *n, uint64_t size)$/;"	f	file:
fs_unlinkat	fs.h	/^    int (*fs_unlinkat)(FSDevice *fs, FSFile *f, const char *name);$/;"	m	struct:FSDevice
fs_unlinkat	fs_disk.c	/^static int fs_unlinkat(FSDevice *fs, FSFile *f, const char *name)$/;"	f	file:
fs_unlinkat	fs_net.c	/^static int fs_unlinkat(FSDevice *fs, FSFile *f, const char *name)$/;"	f	file:
fs_walk	fs.h	/^    int (*fs_walk)(FSDevice *fs, FSFile **pf, FSQID *qids,$/;"	m	struct:FSDevice
fs_walk	fs_disk.c	/^static int fs_walk(FSDevice *fs, FSFile **pf, FSQID *qids,$/;"	f	file:
fs_walk	fs_net.c	/^static int fs_walk(FSDevice *fs, FSFile **pf, FSQID *qids,$/;"	f	file:
fs_walk_path	fs.c	/^FSFile *fs_walk_path(FSDevice *fs, FSFile *f, const char *path)$/;"	f
fs_walk_path1	fs.c	/^FSFile *fs_walk_path1(FSDevice *fs, FSFile *f, const char *path,$/;"	f
fs_wget	fs_wget.c	/^XHRState *fs_wget(const char *url, const char *user, const char *password,$/;"	f
fs_wget2	fs_wget.c	/^XHRState *fs_wget2(const char *url, const char *user, const char *password,$/;"	f
fs_wget_end	fs_wget.c	/^void fs_wget_end(void)$/;"	f
fs_wget_file2	fs_wget.c	/^void fs_wget_file2(FSDevice *fs, FSFile *f, const char *url,$/;"	f
fs_wget_file_on_load	fs_wget.c	/^static void fs_wget_file_on_load(void *opaque, int err, void *data, size_t size)$/;"	f	file:
fs_wget_file_read_cb	fs_wget.c	/^static size_t fs_wget_file_read_cb(void *opaque, void *data, size_t size)$/;"	f	file:
fs_wget_file_write_cb	fs_wget.c	/^static int fs_wget_file_write_cb(void *opaque, const uint8_t *data,$/;"	f	file:
fs_wget_free	fs_wget.c	/^void fs_wget_free(XHRState *s)$/;"	f
fs_wget_init	fs_wget.c	/^void fs_wget_init(void)$/;"	f
fs_wget_onerror	fs_wget.c	/^static void fs_wget_onerror(unsigned int handle, void *opaque, int status,$/;"	f	file:
fs_wget_onload	fs_wget.c	/^static void fs_wget_onload(unsigned int handle,$/;"	f	file:
fs_wget_read_cb	fs_wget.c	/^static size_t fs_wget_read_cb(char *ptr, size_t size, size_t nmemb,$/;"	f	file:
fs_wget_set_error	fs_net.c	/^static void fs_wget_set_error(FSINode *n)$/;"	f	file:
fs_wget_set_loaded	fs_net.c	/^static void fs_wget_set_loaded(FSINode *n)$/;"	f	file:
fs_wget_update_downloading_count	fs_wget.c	/^static void fs_wget_update_downloading_count(int incr)$/;"	f	file:
fs_wget_write_cb	fs_wget.c	/^static size_t fs_wget_write_cb(char *ptr, size_t size, size_t nmemb,$/;"	f	file:
fs_write	fs.h	/^    int (*fs_write)(FSDevice *fs, FSFile *f, uint64_t offset,$/;"	m	struct:FSDevice
fs_write	fs_disk.c	/^static int fs_write(FSDevice *fs, FSFile *f, uint64_t offset,$/;"	f	file:
fs_write	fs_net.c	/^static int fs_write(FSDevice *fs1, FSFile *f, uint64_t offset,$/;"	f	file:
fu_access	riscvsim/sim_params_stats.h	/^    uint64_t fu_access[NUM_MAX_FU];$/;"	m	struct:SimStats
fu_type	riscvsim/riscv_instruction.h	/^    int fu_type;$/;"	m	struct:RVInstruction
funct3	riscvsim/riscv_instruction.h	/^    int32_t funct3;$/;"	m	struct:RVInstruction
funct4	riscvsim/riscv_instruction.h	/^    int32_t funct4;$/;"	m	struct:RVInstruction
funct5	riscvsim/riscv_instruction.h	/^    int32_t funct5;$/;"	m	struct:RVInstruction
funct7	riscvsim/riscv_instruction.h	/^    int32_t funct7;$/;"	m	struct:RVInstruction
fwd_latch	riscvsim/inorder.h	/^    DataFWDLatch fwd_latch[NUM_FWD_BUS];$/;"	m	struct:INCore
get_9p_op_name	virtio.c	/^static const char *get_9p_op_name(int tag)$/;"	f	file:
get_base_from_xlen	riscv_cpu.c	/^static int get_base_from_xlen(int xlen)$/;"	f	file:
get_be32	cutils.h	/^static inline uint32_t get_be32(const uint8_t *d)$/;"	f
get_burst_size	riscvsim/dramsim_wrapper.cpp	/^dramsim_wrapper::get_burst_size()$/;"	f	class:dramsim_wrapper
get_cache_stats	riscvsim/cache.c	/^get_cache_stats(Cache *c)$/;"	f
get_data_mem_access_latency	riscvsim/common_core_utils.c	/^get_data_mem_access_latency(RISCVCPUState *s, IMapEntry *e)$/;"	f
get_desc	virtio.c	/^static int get_desc(VIRTIODevice *s, VIRTIODesc *desc,  $/;"	f	file:
get_desc_rw_size	virtio.c	/^static int get_desc_rw_size(VIRTIODevice *s, $/;"	f	file:
get_dirty_bits	iomem.h	/^    const uint32_t *(*get_dirty_bits)(PhysMemoryMap *s, PhysMemoryRange *pr);$/;"	m	struct:PhysMemoryMap
get_dns_addr	slirp/slirp.c	/^int get_dns_addr(struct in_addr *pdns_addr)$/;"	f
get_field1	riscv_cpu.c	/^static inline uint32_t get_field1(uint32_t val, int src_pos, $/;"	f	file:
get_file_path	machine.c	/^char *get_file_path(const char *base_filename, const char *filename)$/;"	f
get_flen_suffix	riscvsim/riscv_ins_str_creator.c	/^static const char get_flen_suffix[][3] = {"", ".s", ".d"};$/;"	v	file:
get_free_imap_entry	riscvsim/common_core_utils.c	/^get_free_imap_entry(IMapEntry *imap)$/;"	f	file:
get_imap_entry	riscvsim/common_core_utils.c	/^get_imap_entry(IMapEntry *imap, int index)$/;"	f
get_insn32	riscv_cpu.c	/^uint32_t get_insn32(uint8_t *ptr)$/;"	f
get_insn_rm	riscv_cpu.c	/^int get_insn_rm(RISCVCPUState *s, unsigned int rm)$/;"	f
get_le16	cutils.h	/^static inline uint16_t get_le16(const uint8_t *ptr)$/;"	f
get_le32	cutils.h	/^static inline uint32_t get_le32(const uint8_t *ptr)$/;"	f
get_le64	cutils.h	/^static inline uint64_t get_le64(const uint8_t *ptr)$/;"	f
get_lru_victim_index	riscvsim/cache.c	/^get_lru_victim_index(const Cache *c, int set)$/;"	f	file:
get_mstatus	riscv_cpu.c	/^static target_ulong get_mstatus(RISCVCPUState *s, target_ulong mask)$/;"	f	file:
get_new_addr	slirp/bootp.c	/^static BOOTPClient *get_new_addr(Slirp *slirp, struct in_addr *paddr,$/;"	f	file:
get_next_exec_stage	riscvsim/inorder_backend.c	/^get_next_exec_stage(INCore *core, int cur_stage_id, int fu_type)$/;"	f	file:
get_next_exec_stage	riscvsim/ooo_backend.c	/^get_next_exec_stage(OOCore *core, int cur_stage_id, int fu_type)$/;"	f	file:
get_num_cache_blks_from_cache_size_kb	riscvsim/mmu.c	/^get_num_cache_blks_from_cache_size_kb(int size_kb, int num_words_per_line)$/;"	f	file:
get_pending_irq_mask	riscv_cpu.c	/^static inline uint32_t get_pending_irq_mask(RISCVCPUState *s)$/;"	f	file:
get_phys_addr	riscv_cpu.c	/^static int get_phys_addr(RISCVCPUState *s,$/;"	f	file:
get_phys_mem_range	iomem.c	/^PhysMemoryRange *get_phys_mem_range(PhysMemoryMap *s, uint64_t paddr)$/;"	f
get_ram_ptr	riscv_machine.c	/^static uint8_t *get_ram_ptr(RISCVMachine *s, uint64_t paddr, BOOL is_rw)$/;"	f	file:
get_ram_ptr	virtio.c	/^    VIRTIOGetRAMPtrFunc *get_ram_ptr;$/;"	m	struct:VIRTIODevice	file:
get_random_victim_index	riscvsim/cache.c	/^get_random_victim_index(const Cache *c, int set)$/;"	f	file:
get_riscv_ins_str	riscvsim/riscv_ins_str_creator.c	/^get_riscv_ins_str(RVInstruction *i)$/;"	f
get_sector_count	virtio.h	/^    int64_t (*get_sector_count)(BlockDevice *bs);$/;"	m	struct:BlockDevice
ghr	riscvsim/adaptive_predictor.h	/^    uint32_t ghr;    \/* History register *\/$/;"	m	struct:GHTEntry
ght	riscvsim/adaptive_predictor.h	/^    GHTEntry *ght;           \/* GHT *\/$/;"	m	struct:AdaptivePredictor
ght_index_bits	riscvsim/adaptive_predictor.h	/^    uint32_t ght_index_bits; \/* Number of lowest bits of PC required to index into GHT *\/$/;"	m	struct:AdaptivePredictor
ght_size	riscvsim/adaptive_predictor.h	/^    int ght_size;            \/* Number of entries in GHT *\/$/;"	m	struct:AdaptivePredictor
gid	fs_net.c	/^    uint32_t gid;$/;"	m	struct:FSINode	file:
global_readfds	slirp/slirp.c	/^fd_set *global_readfds, *global_writefds, *global_xfds;$/;"	v
global_stdio_device	temu.c	/^static STDIODevice *global_stdio_device;$/;"	v	file:
global_writefds	slirp/slirp.c	/^fd_set *global_readfds, *global_writefds, *global_xfds;$/;"	v
global_xfds	slirp/slirp.c	/^fd_set *global_readfds, *global_writefds, *global_xfds;$/;"	v
glue	cutils.h	36;"	d
glue	riscv_cpu.c	/^static BOOL glue(riscv_cpu_get_power_down, MAX_XLEN)(RISCVCPUState *s)$/;"	f	file:
glue	riscv_cpu.c	/^static RISCVCPUState *glue(riscv_cpu_init, MAX_XLEN)(PhysMemoryMap *mem_map, const SimParams *p)$/;"	f	file:
glue	riscv_cpu.c	/^static uint32_t glue(riscv_cpu_get_mip, MAX_XLEN)(RISCVCPUState *s)$/;"	f	file:
glue	riscv_cpu.c	/^static uint32_t glue(riscv_cpu_get_misa, MAX_XLEN)(RISCVCPUState *s)$/;"	f	file:
glue	riscv_cpu.c	/^static uint64_t glue(riscv_cpu_get_cycles, MAX_XLEN)(RISCVCPUState *s)$/;"	f	file:
glue	riscv_cpu.c	/^static void glue(riscv_cpu_end, MAX_XLEN)(RISCVCPUState *s)$/;"	f	file:
glue	riscv_cpu.c	/^static void glue(riscv_cpu_flush_tlb_write_range_ram,$/;"	f	file:
glue	riscv_cpu.c	/^static void glue(riscv_cpu_interp, MAX_XLEN)(RISCVCPUState *s, int n_cycles)$/;"	f	file:
glue	riscv_cpu.c	/^static void glue(riscv_cpu_reset_mip, MAX_XLEN)(RISCVCPUState *s, uint32_t mask)$/;"	f	file:
glue	riscv_cpu.c	/^static void glue(riscv_cpu_set_mip, MAX_XLEN)(RISCVCPUState *s, uint32_t mask)$/;"	f	file:
glue	riscv_cpu_template.h	/^static inline intx_t glue(div, XLEN)(intx_t a, intx_t b)$/;"	f
glue	riscv_cpu_template.h	/^static inline intx_t glue(rem, XLEN)(intx_t a, intx_t b)$/;"	f
glue	riscv_cpu_template.h	/^static inline uintx_t glue(divu, XLEN)(uintx_t a, uintx_t b)$/;"	f
glue	riscv_cpu_template.h	/^static inline uintx_t glue(mulh, XLEN)(intx_t a, intx_t b)$/;"	f
glue	riscv_cpu_template.h	/^static inline uintx_t glue(mulhsu, XLEN)(intx_t a, uintx_t b)$/;"	f
glue	riscv_cpu_template.h	/^static inline uintx_t glue(remu, XLEN)(uintx_t a, uintx_t b)$/;"	f
glue	riscv_cpu_template.h	/^static uintx_t glue(mulhu, XLEN)(uintx_t a, uintx_t b)$/;"	f
glue	riscv_cpu_template.h	/^static void no_inline glue(riscv_cpu_interp_x, XLEN)(RISCVCPUState *s,$/;"	f
glue	softfp_template.h	/^F_UINT glue(max_sf, F_SIZE)(F_UINT a, F_UINT b, uint32_t *pfflags,$/;"	f
glue	softfp_template.h	/^F_UINT glue(min_sf, F_SIZE)(F_UINT a, F_UINT b, uint32_t *pfflags,$/;"	f
glue	softfp_template.h	/^F_UINT glue(sub_sf, F_SIZE)(F_UINT a, F_UINT b, RoundingModeEnum rm,$/;"	f
glue	softfp_template.h	/^int glue(eq_quiet_sf, F_SIZE)(F_UINT a, F_UINT b, uint32_t *pfflags)$/;"	f
glue	softfp_template.h	/^int glue(le_sf, F_SIZE)(F_UINT a, F_UINT b, uint32_t *pfflags)$/;"	f
glue	softfp_template.h	/^int glue(lt_sf, F_SIZE)(F_UINT a, F_UINT b, uint32_t *pfflags)$/;"	f
glue	softfp_template.h	/^static F_UINT glue(min_max_nan_sf, F_SIZE)(F_UINT a, F_UINT b, uint32_t *pfflags, SoftFPMinMaxTypeEnum minmax_type)$/;"	f
glue	softfp_template.h	/^uint32_t glue(fclass_sf, F_SIZE)(F_UINT a)$/;"	f
gr	vga.c	/^    uint8_t gr[16];$/;"	m	struct:VGAState	file:
gr_index	vga.c	/^    uint8_t gr_index;$/;"	m	struct:VGAState	file:
gr_mask	vga.c	/^static const uint8_t gr_mask[16] = {$/;"	v	file:
group_num	block_net.c	/^    int group_num;$/;"	m	struct:__anon9	file:
gso_size	virtio.c	/^    uint16_t gso_size;$/;"	m	struct:__anon14	file:
gso_type	virtio.c	/^    uint8_t gso_type;$/;"	m	struct:__anon14	file:
guest_paddr	riscv_cpu_priv.h	/^    target_ulong guest_paddr;$/;"	m	struct:__anon44
guest_ram_size	riscvsim/sim_params_stats.h	/^    uint64_t guest_ram_size;$/;"	m	struct:SimParams
h_dest	slirp/slirp.c	/^	unsigned char	h_dest[ETH_ALEN];	\/* destination eth addr	*\/$/;"	m	struct:ethhdr	file:
h_proto	slirp/slirp.c	/^	unsigned short	h_proto;		\/* packet type ID field	*\/$/;"	m	struct:ethhdr	file:
h_source	slirp/slirp.c	/^	unsigned char	h_source[ETH_ALEN];	\/* source ether addr	*\/$/;"	m	struct:ethhdr	file:
handle	fbuf.h	/^    int handle;$/;"	m	struct:__anon36
handle_bpu_frontend_probe	riscvsim/common_core_utils.c	/^handle_bpu_frontend_probe(struct RISCVCPUState *s, IMapEntry *e)$/;"	f
handle_branch_decode_no_bpu	riscvsim/common_core_utils.c	/^handle_branch_decode_no_bpu(struct RISCVCPUState *s, IMapEntry *e)$/;"	f
handle_branch_decode_with_bpu	riscvsim/common_core_utils.c	/^handle_branch_decode_with_bpu(struct RISCVCPUState *s, IMapEntry *e)$/;"	f
handle_branch_no_bpu	riscvsim/common_core_utils.c	/^handle_branch_no_bpu(struct RISCVCPUState *s, IMapEntry *e)$/;"	f
handle_branch_with_bpu	riscvsim/common_core_utils.c	/^handle_branch_with_bpu(struct RISCVCPUState *s, IMapEntry *e)$/;"	f
handle_cond_bpu	riscvsim/common_core_utils.c	/^handle_cond_bpu(RISCVCPUState *s, IMapEntry *e)$/;"	f	file:
handle_mret	riscv_cpu.c	/^static void handle_mret(RISCVCPUState *s)$/;"	f	file:
handle_no_bpu_frontend_probe	riscvsim/common_core_utils.c	/^handle_no_bpu_frontend_probe(struct RISCVCPUState *s, IMapEntry *e)$/;"	f
handle_sret	riscv_cpu.c	/^static void handle_sret(RISCVCPUState *s)$/;"	f	file:
handle_uncond_bpu	riscvsim/common_core_utils.c	/^handle_uncond_bpu(RISCVCPUState *s, IMapEntry *e)$/;"	f	file:
has_data	riscvsim/common_core_utils.h	/^    uint32_t has_data;$/;"	m	struct:CPUStage
has_dest	riscvsim/riscv_instruction.h	/^    int has_dest;$/;"	m	struct:RVInstruction
has_fp_dest	riscvsim/riscv_instruction.h	/^    int has_fp_dest;$/;"	m	struct:RVInstruction
has_fp_src1	riscvsim/riscv_instruction.h	/^    int has_fp_src1;$/;"	m	struct:RVInstruction
has_fp_src2	riscvsim/riscv_instruction.h	/^    int has_fp_src2;$/;"	m	struct:RVInstruction
has_fp_src3	riscvsim/riscv_instruction.h	/^    int has_fp_src3;$/;"	m	struct:RVInstruction
has_src1	riscvsim/riscv_instruction.h	/^    int has_src1;$/;"	m	struct:RVInstruction
has_src2	riscvsim/riscv_instruction.h	/^    int has_src2;$/;"	m	struct:RVInstruction
hcyl	ide.c	/^    uint8_t hcyl;$/;"	m	struct:IDEState	file:
hdr_len	virtio.c	/^    uint16_t hdr_len;$/;"	m	struct:__anon14	file:
head_loaded	fs_net.c	/^static void head_loaded(FSDevice *fs, FSFile *f, int64_t size, void *opaque)$/;"	f	file:
header_size	virtio.c	/^    int header_size;$/;"	m	struct:VIRTIONetDevice	file:
heads	ide.c	/^    int cylinders, heads, sectors;$/;"	m	struct:IDEState	file:
height	machine.h	/^    int height;$/;"	m	struct:FBDevice
height	machine.h	/^    int width, height; \/* graphic width & height *\/$/;"	m	struct:__anon32
help	build_filelist.c	/^void help(void)$/;"	f
help	temu.c	/^void help(void)$/;"	f
hmac_sha256_final	fs_wget.c	/^void hmac_sha256_final(HMAC_SHA256_CTX *s, uint8_t *out)$/;"	f
hmac_sha256_init	fs_wget.c	/^void hmac_sha256_init(HMAC_SHA256_CTX *s, const uint8_t *key, int key_len)$/;"	f
hmac_sha256_update	fs_wget.c	/^void hmac_sha256_update(HMAC_SHA256_CTX *s, const uint8_t *buf, int len)$/;"	f
hreg_bits	riscvsim/adaptive_predictor.h	/^    uint32_t hreg_bits;      \/* Number of bits in history register present in GHT entry *\/$/;"	m	struct:AdaptivePredictor
htif_fromhost	riscv_machine.c	/^    uint64_t htif_tohost, htif_fromhost;$/;"	m	struct:RISCVMachine	file:
htif_handle_cmd	riscv_machine.c	/^static void htif_handle_cmd(RISCVMachine *s)$/;"	f	file:
htif_read	riscv_machine.c	/^static uint32_t htif_read(void *opaque, uint32_t offset,$/;"	f	file:
htif_tohost	riscv_machine.c	/^    uint64_t htif_tohost, htif_fromhost;$/;"	m	struct:RISCVMachine	file:
htif_write	riscv_machine.c	/^static void htif_write(void *opaque, uint32_t offset, uint32_t val,$/;"	f	file:
hw_pg_tb_wlk_latency	riscv_cpu_priv.h	/^    int hw_pg_tb_wlk_latency;   \/* latency for reading\/writing page table entries during page walk *\/$/;"	m	struct:RISCVCPUState
hw_pg_tb_wlk_stage_id	riscv_cpu_priv.h	/^    int hw_pg_tb_wlk_stage_id;  \/* id of the stage (FETCH, MEMORY) which initiated page table walk *\/$/;"	m	struct:RISCVCPUState
i	riscvsim/riscv_ins_str_creator.c	/^  int i;$/;"	m	struct:CsrName	file:
i440fx_init	pci.c	/^I440FXState *i440fx_init(PCIBus **pbus, int *ppiix3_devfn,$/;"	f
i440fx_map_interrupts	pci.c	/^void i440fx_map_interrupts(I440FXState *s, uint8_t *elcr,$/;"	f
i440fx_read_addr	pci.c	/^static uint32_t i440fx_read_addr(void *opaque, uint32_t offset, int size_log2)$/;"	f	file:
i440fx_read_data	pci.c	/^static uint32_t i440fx_read_data(void *opaque, uint32_t offset, int size_log2)$/;"	f	file:
i440fx_set_irq	pci.c	/^static void i440fx_set_irq(void *opaque, int irq_num, int irq_level)$/;"	f	file:
i440fx_write_addr	pci.c	/^static void i440fx_write_addr(void *opaque, uint32_t offset,$/;"	f	file:
i440fx_write_data	pci.c	/^static void i440fx_write_data(void *opaque, uint32_t offset,$/;"	f	file:
i8042_init	pckbd.c	/^KBDState *i8042_init(PS2KbdState **pkbd,$/;"	f
ialu	riscvsim/inorder.h	/^    CPUStage *ialu;$/;"	m	struct:INCore
ialu	riscvsim/ooo.h	/^    CPUStage *ialu;    \/* INT ALU *\/$/;"	m	struct:OOCore
icache	riscvsim/mmu.h	/^    Cache *icache;$/;"	m	struct:MemoryManagementUnit
icache_read	riscvsim/sim_params_stats.h	/^    uint64_t icache_read;$/;"	m	struct:SimStats
icache_read_miss	riscvsim/sim_params_stats.h	/^    uint64_t icache_read_miss;$/;"	m	struct:SimStats
icd_id	slirp/ip_icmp.h	/^			u_short	icd_id;$/;"	m	struct:icmp::__anon48::ih_idseq
icd_seq	slirp/ip_icmp.h	/^			u_short	icd_seq;$/;"	m	struct:icmp::__anon48::ih_idseq
icmp	slirp/ip_icmp.h	/^struct icmp {$/;"	s
icmp_cksum	slirp/ip_icmp.h	/^	u_short	icmp_cksum;		\/* ones complement cksum of struct *\/$/;"	m	struct:icmp
icmp_code	slirp/ip_icmp.h	/^	u_char	icmp_code;		\/* type sub code *\/$/;"	m	struct:icmp
icmp_data	slirp/ip_icmp.h	90;"	d
icmp_dun	slirp/ip_icmp.h	/^	} icmp_dun;$/;"	m	struct:icmp	typeref:union:icmp::__anon49
icmp_error	slirp/ip_icmp.c	/^icmp_error(struct mbuf *msrc, u_char type, u_char code, int minsize,$/;"	f
icmp_flush	slirp/ip_icmp.c	/^static const int icmp_flush[19] = {$/;"	v	file:
icmp_gwaddr	slirp/ip_icmp.h	66;"	d
icmp_hun	slirp/ip_icmp.h	/^	} icmp_hun;$/;"	m	struct:icmp	typeref:union:icmp::__anon48
icmp_id	slirp/ip_icmp.h	67;"	d
icmp_input	slirp/ip_icmp.c	/^icmp_input(struct mbuf *m, int hlen)$/;"	f
icmp_ip	slirp/ip_icmp.h	88;"	d
icmp_mask	slirp/ip_icmp.h	89;"	d
icmp_nextmtu	slirp/ip_icmp.h	71;"	d
icmp_otime	slirp/ip_icmp.h	85;"	d
icmp_ping_msg	slirp/ip_icmp.c	/^static const char icmp_ping_msg[] = "This is a pseudo-PING packet used by Slirp to emulate ICMP ECHO-REQUEST packets.\\n";$/;"	v	file:
icmp_pmvoid	slirp/ip_icmp.h	70;"	d
icmp_pptr	slirp/ip_icmp.h	65;"	d
icmp_reflect	slirp/ip_icmp.c	/^icmp_reflect(struct mbuf *m)$/;"	f
icmp_rtime	slirp/ip_icmp.h	86;"	d
icmp_seq	slirp/ip_icmp.h	68;"	d
icmp_ttime	slirp/ip_icmp.h	87;"	d
icmp_type	slirp/ip_icmp.h	/^	u_char	icmp_type;		\/* type of message, see below *\/$/;"	m	struct:icmp
icmp_void	slirp/ip_icmp.h	69;"	d
id_data	slirp/ip_icmp.h	/^		char		id_data[1];$/;"	m	union:icmp::__anon49
id_ip	slirp/ip_icmp.h	/^		struct id_ip  {$/;"	s	union:icmp::__anon49
id_ip	slirp/ip_icmp.h	/^		} id_ip;$/;"	m	union:icmp::__anon49	typeref:struct:icmp::__anon49::id_ip
id_mask	slirp/ip_icmp.h	/^		uint32_t	id_mask;$/;"	m	union:icmp::__anon49
id_ts	slirp/ip_icmp.h	/^		struct id_ts {$/;"	s	union:icmp::__anon49
id_ts	slirp/ip_icmp.h	/^		} id_ts;$/;"	m	union:icmp::__anon49	typeref:struct:icmp::__anon49::id_ts
ide_abort_command	ide.c	/^static void ide_abort_command(IDEState *s) $/;"	f	file:
ide_cmd_write	ide.c	/^static void ide_cmd_write(void *opaque, uint32_t offset,$/;"	f	file:
ide_data_readw	ide.c	/^static uint32_t ide_data_readw(void *opaque, uint32_t offset, int size_log2)$/;"	f	file:
ide_data_writew	ide.c	/^static void ide_data_writew(void *opaque, uint32_t offset,$/;"	f	file:
ide_drive_init	ide.c	/^static IDEState *ide_drive_init(IDEIFState *ide_if, BlockDevice *bs)$/;"	f	file:
ide_exec_cmd	ide.c	/^static void ide_exec_cmd(IDEState *s, int val)$/;"	f	file:
ide_get_sector	ide.c	/^static int64_t ide_get_sector(IDEState *s)$/;"	f	file:
ide_identify	ide.c	/^static void ide_identify(IDEState *s)$/;"	f	file:
ide_identify_cb	ide.c	/^static void ide_identify_cb(IDEState *s)$/;"	f	file:
ide_if	ide.c	/^    IDEIFState *ide_if;$/;"	m	struct:IDEState	file:
ide_init	ide.c	/^IDEIFState *ide_init(PhysMemoryMap *port_map, uint32_t addr, uint32_t addr2,$/;"	f
ide_ioport_read	ide.c	/^static uint32_t ide_ioport_read(void *opaque, uint32_t offset, int size_log2)$/;"	f	file:
ide_ioport_write	ide.c	/^static void ide_ioport_write(void *opaque, uint32_t offset,$/;"	f	file:
ide_sector_read	ide.c	/^static void ide_sector_read(IDEState *s)$/;"	f	file:
ide_sector_read_cb	ide.c	/^static void ide_sector_read_cb(void *opaque, int ret)$/;"	f	file:
ide_sector_read_cb_end	ide.c	/^static void ide_sector_read_cb_end(IDEState *s)$/;"	f	file:
ide_sector_write	ide.c	/^static void ide_sector_write(IDEState *s)$/;"	f	file:
ide_sector_write_cb1	ide.c	/^static void ide_sector_write_cb1(IDEState *s)$/;"	f	file:
ide_sector_write_cb2	ide.c	/^static void ide_sector_write_cb2(void *opaque, int ret)$/;"	f	file:
ide_set_irq	ide.c	/^static void ide_set_irq(IDEState *s) $/;"	f	file:
ide_set_sector	ide.c	/^static void ide_set_sector(IDEState *s, int64_t sector_num)$/;"	f	file:
ide_set_signature	ide.c	/^static void ide_set_signature(IDEState *s) $/;"	f	file:
ide_status_read	ide.c	/^static uint32_t ide_status_read(void *opaque, uint32_t offset, int size_log2)$/;"	f	file:
ide_transfer_start	ide.c	/^static void ide_transfer_start(IDEState *s, int size,$/;"	f	file:
ide_transfer_stop	ide.c	/^static void ide_transfer_stop(IDEState *s)$/;"	f	file:
idi_ip	slirp/ip_icmp.h	/^			struct ip idi_ip;$/;"	m	struct:icmp::__anon49::id_ip	typeref:struct:icmp::__anon49::id_ip::ip
idiv	riscvsim/inorder.h	/^    CPUStage *idiv;$/;"	m	struct:INCore
idiv	riscvsim/ooo.h	/^    CPUStage *idiv;    \/* INT Divider *\/$/;"	m	struct:OOCore
if_batchq	slirp/slirp.h	/^    struct mbuf if_batchq;  \/* queue for non-interactive data *\/$/;"	m	struct:Slirp	typeref:struct:Slirp::mbuf
if_encap	slirp/slirp.c	/^void if_encap(Slirp *slirp, const uint8_t *ip_data, int ip_data_len)$/;"	f
if_fastq	slirp/slirp.h	/^    struct mbuf if_fastq;   \/* fast queue (for interactive data) *\/$/;"	m	struct:Slirp	typeref:struct:Slirp::mbuf
if_init	slirp/if.c	/^if_init(Slirp *slirp)$/;"	f
if_output	slirp/if.c	/^if_output(struct socket *so, struct mbuf *ifm)$/;"	f
if_queued	slirp/slirp.h	/^    int if_queued;          \/* number of packets queued so far *\/$/;"	m	struct:Slirp
if_start	slirp/if.c	/^if_start(Slirp *slirp)$/;"	f
ifname	machine.h	/^    char *ifname;$/;"	m	struct:__anon31
ifq_next	slirp/mbuf.h	107;"	d
ifq_prev	slirp/mbuf.h	106;"	d
ifq_so	slirp/mbuf.h	110;"	d
ifs_init	slirp/if.c	10;"	d	file:
ifs_init	slirp/if.h	23;"	d
ifs_insque	slirp/if.c	/^ifs_insque(struct mbuf *ifm, struct mbuf *ifmhead)$/;"	f	file:
ifs_next	slirp/mbuf.h	109;"	d
ifs_prev	slirp/mbuf.h	108;"	d
ifs_remque	slirp/if.c	/^ifs_remque(struct mbuf *ifm)$/;"	f	file:
ih_dst	slirp/ip.h	/^	struct	in_addr ih_dst;		\/* destination internet address *\/$/;"	m	struct:ipovly	typeref:struct:ipovly::in_addr
ih_gwaddr	slirp/ip_icmp.h	/^		struct in_addr ih_gwaddr;	\/* ICMP_REDIRECT *\/$/;"	m	union:icmp::__anon48	typeref:struct:icmp::__anon48::in_addr
ih_idseq	slirp/ip_icmp.h	/^		struct ih_idseq {$/;"	s	union:icmp::__anon48
ih_idseq	slirp/ip_icmp.h	/^		} ih_idseq;$/;"	m	union:icmp::__anon48	typeref:struct:icmp::__anon48::ih_idseq
ih_len	slirp/ip.h	/^	uint16_t	ih_len;			\/* protocol length *\/$/;"	m	struct:ipovly
ih_mbuf	slirp/ip.h	/^	struct mbuf_ptr ih_mbuf;	\/* backpointer to mbuf *\/$/;"	m	struct:ipovly	typeref:struct:ipovly::mbuf_ptr
ih_pmtu	slirp/ip_icmp.h	/^		struct ih_pmtu {$/;"	s	union:icmp::__anon48
ih_pmtu	slirp/ip_icmp.h	/^		} ih_pmtu;$/;"	m	union:icmp::__anon48	typeref:struct:icmp::__anon48::ih_pmtu
ih_pptr	slirp/ip_icmp.h	/^		u_char ih_pptr;			\/* ICMP_PARAMPROB *\/$/;"	m	union:icmp::__anon48
ih_pr	slirp/ip.h	/^	uint8_t	ih_pr;			\/* protocol *\/$/;"	m	struct:ipovly
ih_src	slirp/ip.h	/^	struct	in_addr ih_src;		\/* source internet address *\/$/;"	m	struct:ipovly	typeref:struct:ipovly::in_addr
ih_void	slirp/ip_icmp.h	/^		int ih_void;$/;"	m	union:icmp::__anon48
ih_x1	slirp/ip.h	/^	uint8_t	ih_x1;			\/* (unused) *\/$/;"	m	struct:ipovly
imap	riscvsim/riscv_sim_cpu.h	/^    IMapEntry *imap;        \/* Instruction map to store data of active instructions *\/$/;"	m	struct:RISCVSIMCPUState
imap_index	riscvsim/common_core_utils.h	/^    int imap_index;$/;"	m	struct:CPUStage
imap_index	riscvsim/common_core_utils.h	/^    int imap_index;$/;"	m	struct:InstructionMapEntry
imm	riscvsim/riscv_instruction.h	/^    int32_t imm;$/;"	m	struct:RVInstruction
import_dir	fs_net.c	/^    char *import_dir;$/;"	m	struct:FSDeviceMem	file:
imul	riscvsim/inorder.h	/^    CPUStage *imul;$/;"	m	struct:INCore
imul	riscvsim/ooo.h	/^    CPUStage *imul;    \/* INT Multiplier *\/$/;"	m	struct:OOCore
in_core_commit	riscvsim/inorder_backend.c	/^in_core_commit(INCore *core)$/;"	f
in_core_decode	riscvsim/inorder_frontend.c	/^in_core_decode(INCore *core)$/;"	f
in_core_execute_all	riscvsim/inorder_backend.c	/^in_core_execute_all(INCore *core)$/;"	f
in_core_execute_non_pipe	riscvsim/inorder_backend.c	/^in_core_execute_non_pipe(INCore *core, int fu_type, CPUStage *stage)$/;"	f	file:
in_core_execute_pipe	riscvsim/inorder_backend.c	/^in_core_execute_pipe(INCore *core, int cur_stage_id, int fu_type, CPUStage *stage,$/;"	f	file:
in_core_fetch	riscvsim/inorder_frontend.c	/^in_core_fetch(INCore *core)$/;"	f
in_core_free	riscvsim/inorder.c	/^in_core_free(void *core_type)$/;"	f
in_core_init	riscvsim/inorder.c	/^in_core_init(const SimParams *p, struct RISCVSIMCPUState *simcpu)$/;"	f
in_core_memory	riscvsim/inorder_backend.c	/^in_core_memory(INCore *core)$/;"	f
in_core_pcgen	riscvsim/inorder_frontend.c	/^in_core_pcgen(INCore *core)$/;"	f
in_core_pipeline_drained	riscvsim/inorder.c	/^in_core_pipeline_drained(INCore *core)$/;"	f	file:
in_core_reset	riscvsim/inorder.c	/^in_core_reset(void *core_type)$/;"	f
in_core_run	riscvsim/inorder.c	/^in_core_run(void *core_type)$/;"	f
in_core_run_5_stage	riscvsim/inorder.c	/^in_core_run_5_stage(INCore *core)$/;"	f
in_core_run_6_stage	riscvsim/inorder.c	/^in_core_run_6_stage(INCore *core)$/;"	f
init_list_head	list.h	/^static inline void init_list_head(struct list_head *head)$/;"	f
inode	fs_net.c	/^    FSINode *inode;$/;"	m	struct:FSFile	file:
inode	fs_net.c	/^    FSINode *inode;$/;"	m	struct:__anon65	file:
inode_cache_list	fs_net.c	/^    struct list_head inode_cache_list; \/* list of FSINode.u.reg.link *\/$/;"	m	struct:FSDeviceMem	typeref:struct:FSDeviceMem::list_head	file:
inode_cache_size	fs_net.c	/^    int64_t inode_cache_size;$/;"	m	struct:FSDeviceMem	file:
inode_cache_size_limit	fs_net.c	/^    int64_t inode_cache_size_limit;$/;"	m	struct:FSDeviceMem	file:
inode_count	fs_net.c	/^    int64_t inode_count; \/* current number of inodes *\/$/;"	m	struct:FSDeviceMem	file:
inode_dec_open	fs_net.c	/^static void inode_dec_open(FSDevice *fs1, FSINode *n)$/;"	f	file:
inode_decref	fs_net.c	/^static void inode_decref(FSDevice *fs1, FSINode *n)$/;"	f	file:
inode_dir_add	fs_net.c	/^static FSDirEntry *inode_dir_add(FSDevice *fs1, FSINode *n, const char *name,$/;"	f	file:
inode_dirent_delete	fs_net.c	/^static void inode_dirent_delete(FSDevice *fs, FSINode *n, FSDirEntry *de)$/;"	f	file:
inode_dirent_delete_no_decref	fs_net.c	/^static void inode_dirent_delete_no_decref(FSDevice *fs1, FSINode *n, FSDirEntry *de)$/;"	f	file:
inode_free	fs_net.c	/^static void inode_free(FSDevice *fs1, FSINode *n)$/;"	f	file:
inode_inc_open	fs_net.c	/^static FSINode *inode_inc_open(FSDevice *fs, FSINode *n)$/;"	f	file:
inode_incref	fs_net.c	/^static FSINode *inode_incref(FSDevice *fs, FSINode *n)$/;"	f	file:
inode_limit	fs_net.c	/^    uint64_t inode_limit;$/;"	m	struct:FSDeviceMem	file:
inode_list	fs_net.c	/^    struct list_head inode_list; \/* list of FSINode *\/$/;"	m	struct:FSDeviceMem	typeref:struct:FSDeviceMem::list_head	file:
inode_new	fs_net.c	/^static FSINode *inode_new(FSDevice *fs1, FSINodeTypeEnum type,$/;"	f	file:
inode_num	fs_net.c	/^    uint64_t inode_num; \/* inode number *\/$/;"	m	struct:FSINode	file:
inode_num_alloc	fs_net.c	/^    uint64_t inode_num_alloc;$/;"	m	struct:FSDeviceMem	file:
inode_search	fs_net.c	/^static FSDirEntry *inode_search(FSINode *n, const char *name)$/;"	f	file:
inode_search_path	fs_net.c	/^static FSINode *inode_search_path(FSDevice *fs1, const char *path)$/;"	f	file:
inode_search_path1	fs_net.c	/^static FSINode *inode_search_path1(FSDevice *fs, FSINode *n, const char *path)$/;"	f	file:
inode_to_qid	fs_net.c	/^static void inode_to_qid(FSQID *qid, FSINode *n)$/;"	f	file:
inode_update_mtime	fs_net.c	/^static void inode_update_mtime(FSDevice *fs, FSINode *n)$/;"	f	file:
input_device	machine.h	/^    char *input_device; \/* NULL means no input *\/$/;"	m	struct:__anon32
ins	riscvsim/common_core_utils.h	/^    struct RVInstruction ins;$/;"	m	struct:InstructionMapEntry	typeref:struct:InstructionMapEntry::RVInstruction
ins_cond_branch_taken	riscvsim/sim_params_stats.h	/^    uint64_t ins_cond_branch_taken;$/;"	m	struct:SimStats
ins_dispatch_id	riscvsim/common_core_utils.h	/^    uint64_t ins_dispatch_id;$/;"	m	struct:InstructionMapEntry
ins_dispatch_id	riscvsim/inorder.h	/^    uint64_t ins_dispatch_id;$/;"	m	struct:INCore
ins_dispatch_id	riscvsim/ooo.h	/^    uint64_t ins_dispatch_id; \/* Support for speculative execution *\/$/;"	m	struct:OOCore
ins_dispatch_queue	riscvsim/inorder.h	/^    InsDispatchQueue ins_dispatch_queue;$/;"	m	struct:INCore
ins_emulated	riscvsim/sim_params_stats.h	/^    uint64_t ins_emulated;$/;"	m	struct:SimStats
ins_fetch	riscvsim/sim_params_stats.h	/^    uint64_t ins_fetch;$/;"	m	struct:SimStats
ins_page_faults	riscvsim/sim_params_stats.h	/^    uint64_t ins_page_faults;$/;"	m	struct:SimStats
ins_page_walks	riscvsim/sim_params_stats.h	/^    uint64_t ins_page_walks;$/;"	m	struct:SimStats
ins_simulated	riscvsim/sim_params_stats.h	/^    uint64_t ins_simulated;$/;"	m	struct:SimStats
ins_tlb_hit_accounted	riscv_cpu_priv.h	/^    int ins_tlb_hit_accounted;$/;"	m	struct:RISCVCPUState
ins_tlb_lookup_accounted	riscv_cpu_priv.h	/^    int ins_tlb_lookup_accounted;$/;"	m	struct:RISCVCPUState
ins_type	riscvsim/sim_params_stats.h	/^    uint64_t ins_type[NUM_MAX_INS_TYPES];$/;"	m	struct:SimStats
insn_counter	riscv_cpu_priv.h	/^    uint64_t insn_counter;$/;"	m	struct:RISCVCPUState
insn_mem_delay	riscvsim/sim_params_stats.h	/^    uint64_t insn_mem_delay;$/;"	m	struct:SimStats
insque	slirp/misc.c	/^insque(void *a, void *b)$/;"	f
insque	slirp/slirp.h	138;"	d
int128_t	cutils.h	/^typedef __int128 int128_t;$/;"	t
int32	json.h	/^        int int32;$/;"	m	union:JSONValue::__anon39
int_dest	riscvsim/common_core_utils.h	/^    int int_dest;$/;"	m	struct:DataFWDLatch
int_rat	riscvsim/ooo.h	/^    RenameTableEntry *int_rat;$/;"	m	struct:OOCore
int_reg_status	riscvsim/inorder.h	/^    uint32_t int_reg_status[NUM_INT_REG];$/;"	m	struct:INCore
int_regfile_reads	riscvsim/sim_params_stats.h	/^    uint64_t int_regfile_reads;$/;"	m	struct:SimStats
int_regfile_writes	riscvsim/sim_params_stats.h	/^    uint64_t int_regfile_writes;$/;"	m	struct:SimStats
int_status	virtio.c	/^    uint32_t int_status;$/;"	m	struct:VIRTIODevice	file:
interrupts	riscvsim/sim_params_stats.h	/^    uint64_t interrupts;$/;"	m	struct:SimStats
intx_t	riscv_cpu_template.h	1941;"	d
intx_t	riscv_cpu_template.h	34;"	d
intx_t	riscv_cpu_template.h	37;"	d
intx_t	riscv_cpu_template.h	40;"	d
io_buf	block_net.c	/^    uint8_t *io_buf;$/;"	m	struct:BlockDeviceHTTP	file:
io_buffer	ide.c	/^    uint8_t io_buffer[MAX_MULT_SECTORS*512 + 4];$/;"	m	struct:IDEState	file:
io_nb_sectors	ide.c	/^    int io_nb_sectors;$/;"	m	struct:IDEState	file:
io_regions	pci.c	/^    PCIIORegion io_regions[PCI_NUM_REGIONS];$/;"	m	struct:PCIDevice	file:
ioctlsocket	slirp/slirp.h	26;"	d
ioport_get_a20	pckbd.c	/^static int ioport_get_a20(void)$/;"	f	file:
ioport_set_a20	pckbd.c	/^static void ioport_set_a20(int val)$/;"	f	file:
ioprio	virtio.c	/^    uint32_t ioprio;$/;"	m	struct:__anon13	file:
ip	slirp/bootp.h	/^    struct ip ip;$/;"	m	struct:bootp_t	typeref:struct:bootp_t::ip
ip	slirp/ip.h	/^struct ip {$/;"	s
ip	slirp/tftp.h	/^  struct ip ip;$/;"	m	struct:tftp_t	typeref:struct:tftp_t::ip
ip_deq	slirp/ip_input.c	/^ip_deq(register struct ipasfrag *p)$/;"	f	file:
ip_dooptions	slirp/ip_input.c	/^ip_dooptions(m)$/;"	f
ip_dst	slirp/ip.h	/^	struct	in_addr ip_src,ip_dst;	\/* source and dest address *\/$/;"	m	struct:ip	typeref:struct:ip::
ip_enq	slirp/ip_input.c	/^ip_enq(register struct ipasfrag *p, register struct ipasfrag *prev)$/;"	f	file:
ip_freef	slirp/ip_input.c	/^ip_freef(Slirp *slirp, struct ipq *fp)$/;"	f	file:
ip_hl	slirp/ip.h	/^		ip_hl:4;		\/* header length *\/$/;"	m	struct:ip
ip_id	slirp/ip.h	/^	uint16_t	ip_id;			\/* identification *\/$/;"	m	struct:ip
ip_id	slirp/slirp.h	/^    uint16_t ip_id;         \/* ip packet ctr, for ids *\/$/;"	m	struct:Slirp
ip_init	slirp/ip_input.c	/^ip_init(Slirp *slirp)$/;"	f
ip_input	slirp/ip_input.c	/^ip_input(struct mbuf *m)$/;"	f
ip_len	slirp/ip.h	/^	uint16_t	ip_len;			\/* total length *\/$/;"	m	struct:ip
ip_link	slirp/ip.h	/^	struct qlink ip_link;				\/* to other reass headers *\/$/;"	m	struct:ipq	typeref:struct:ipq::qlink
ip_off	slirp/ip.h	/^	uint16_t	ip_off;			\/* fragment offset field *\/$/;"	m	struct:ip
ip_output	slirp/ip_output.c	/^ip_output(struct socket *so, struct mbuf *m0)$/;"	f
ip_p	slirp/ip.h	/^	uint8_t ip_p;			\/* protocol *\/$/;"	m	struct:ip
ip_reass	slirp/ip_input.c	/^ip_reass(Slirp *slirp, struct ip *ip, struct ipq *fp)$/;"	f	file:
ip_slowtimo	slirp/ip_input.c	/^ip_slowtimo(Slirp *slirp)$/;"	f
ip_src	slirp/ip.h	/^	struct	in_addr ip_src,ip_dst;	\/* source and dest address *\/$/;"	m	struct:ip	typeref:struct:ip::in_addr
ip_stripoptions	slirp/ip_input.c	/^ip_stripoptions(register struct mbuf *m, struct mbuf *mopt)$/;"	f
ip_sum	slirp/ip.h	/^	uint16_t	ip_sum;			\/* checksum *\/$/;"	m	struct:ip
ip_timestamp	slirp/ip.h	/^struct	ip_timestamp {$/;"	s
ip_tos	slirp/ip.h	/^	uint8_t		ip_tos;			\/* type of service *\/$/;"	m	struct:ip
ip_ttl	slirp/ip.h	/^	uint8_t ip_ttl;			\/* time to live *\/$/;"	m	struct:ip
ip_v	slirp/ip.h	/^	u_int ip_v:4,			\/* version *\/$/;"	m	struct:ip
ipasfrag	slirp/ip.h	/^struct	ipasfrag {$/;"	s
ipf_ip	slirp/ip.h	/^	struct ip ipf_ip;$/;"	m	struct:ipasfrag	typeref:struct:ipasfrag::ip
ipf_len	slirp/ip.h	236;"	d
ipf_link	slirp/ip.h	/^	struct qlink ipf_link;$/;"	m	struct:ipasfrag	typeref:struct:ipasfrag::qlink
ipf_next	slirp/ip.h	237;"	d
ipf_off	slirp/ip.h	234;"	d
ipf_prev	slirp/ip.h	238;"	d
ipf_tos	slirp/ip.h	235;"	d
ipm_nextmtu	slirp/ip_icmp.h	/^			u_short ipm_nextmtu;$/;"	m	struct:icmp::__anon48::ih_pmtu
ipm_void	slirp/ip_icmp.h	/^			u_short ipm_void;$/;"	m	struct:icmp::__anon48::ih_pmtu
ipopt_dst	slirp/ip.h	/^	struct	in_addr ipopt_dst;	\/* first-hop dst if source routed *\/$/;"	m	struct:ipoption	typeref:struct:ipoption::in_addr
ipopt_list	slirp/ip.h	/^	int8_t	ipopt_list[MAX_IPOPTLEN];	\/* options proper *\/$/;"	m	struct:ipoption
ipoption	slirp/ip.h	/^struct ipoption {$/;"	s
ipovly	slirp/ip.h	/^struct ipovly {$/;"	s
ipq	slirp/ip.h	/^struct ipq {$/;"	s
ipq	slirp/slirp.h	/^    struct ipq ipq;         \/* ip reass. queue *\/$/;"	m	struct:Slirp	typeref:struct:Slirp::ipq
ipq_dst	slirp/ip.h	/^	struct	in_addr ipq_src,ipq_dst;$/;"	m	struct:ipq	typeref:struct:ipq::
ipq_id	slirp/ip.h	/^	uint16_t	ipq_id;			\/* sequence id for reassembly *\/$/;"	m	struct:ipq
ipq_p	slirp/ip.h	/^	uint8_t	ipq_p;			\/* protocol of this fragment *\/$/;"	m	struct:ipq
ipq_src	slirp/ip.h	/^	struct	in_addr ipq_src,ipq_dst;$/;"	m	struct:ipq	typeref:struct:ipq::in_addr
ipq_ttl	slirp/ip.h	/^	uint8_t	ipq_ttl;		\/* time for reass q to live *\/$/;"	m	struct:ipq
ipt_addr	slirp/ip.h	/^			struct in_addr ipt_addr;$/;"	m	struct:ip_timestamp::ipt_timestamp::ipt_ta	typeref:struct:ip_timestamp::ipt_timestamp::ipt_ta::in_addr
ipt_code	slirp/ip.h	/^	uint8_t	ipt_code;		\/* IPOPT_TS *\/$/;"	m	struct:ip_timestamp
ipt_flg	slirp/ip.h	/^		ipt_flg:4;		\/* flags, see below *\/$/;"	m	struct:ip_timestamp
ipt_flg	slirp/ip.h	/^	u_int	ipt_flg:4,		\/* flags, see below *\/$/;"	m	struct:ip_timestamp
ipt_len	slirp/ip.h	/^	uint8_t	ipt_len;		\/* size of structure (variable) *\/$/;"	m	struct:ip_timestamp
ipt_oflw	slirp/ip.h	/^		ipt_oflw:4;		\/* overflow counter *\/$/;"	m	struct:ip_timestamp
ipt_oflw	slirp/ip.h	/^	u_int	ipt_oflw:4,		\/* overflow counter *\/$/;"	m	struct:ip_timestamp
ipt_ptr	slirp/ip.h	/^	uint8_t	ipt_ptr;		\/* index of current entry *\/$/;"	m	struct:ip_timestamp
ipt_ta	slirp/ip.h	/^		struct	ipt_ta {$/;"	s	union:ip_timestamp::ipt_timestamp
ipt_ta	slirp/ip.h	/^		} ipt_ta[1];$/;"	m	union:ip_timestamp::ipt_timestamp	typeref:struct:ip_timestamp::ipt_timestamp::ipt_ta
ipt_time	slirp/ip.h	/^			n_long ipt_time;$/;"	m	struct:ip_timestamp::ipt_timestamp::ipt_ta
ipt_time	slirp/ip.h	/^		n_long	ipt_time[1];$/;"	m	union:ip_timestamp::ipt_timestamp
ipt_timestamp	slirp/ip.h	/^	union ipt_timestamp {$/;"	u	struct:ip_timestamp
ipt_timestamp	slirp/ip.h	/^	} ipt_timestamp;$/;"	m	struct:ip_timestamp	typeref:union:ip_timestamp::ipt_timestamp
iptofrag	slirp/ip_input.c	235;"	d	file:
iq	riscvsim/ooo.h	/^    IssueQueueEntry *iq;$/;"	m	struct:OOCore
iq_entry_create	riscvsim/ooo_frontend.c	/^iq_entry_create(IssueQueueEntry *iq, int iq_size, IMapEntry *e)$/;"	f	file:
iq_full	riscvsim/ooo.c	/^iq_full(IssueQueueEntry *iq, int size)$/;"	f
iq_get_free_entry	riscvsim/ooo.c	/^iq_get_free_entry(IssueQueueEntry *iq, int size)$/;"	f
iq_idx	riscvsim/common_core_utils.h	/^    int iq_idx;$/;"	m	struct:InstructionMapEntry
iq_issue_ports	riscvsim/sim_params_stats.h	/^    int iq_issue_ports;$/;"	m	struct:SimParams
iq_reset	riscvsim/ooo.c	/^iq_reset(IssueQueueEntry *iq_entry, int size)$/;"	f
iq_size	riscvsim/sim_params_stats.h	/^    int iq_size;$/;"	m	struct:SimParams
irq	ide.c	/^    IRQSignal *irq;$/;"	m	struct:IDEIFState	file:
irq	pci.c	/^    IRQSignal irq[4];$/;"	m	struct:PCIBus	file:
irq	pci.c	/^    IRQSignal irq[4];$/;"	m	struct:PCIDevice	file:
irq	virtio.c	/^    IRQSignal *irq;$/;"	m	struct:VIRTIODevice	file:
irq	virtio.h	/^    IRQSignal *irq;$/;"	m	struct:__anon51
irq_init	iomem.c	/^void irq_init(IRQSignal *irq, SetIRQFunc *set_irq, void *opaque, int irq_num)$/;"	f
irq_kbd	pckbd.c	/^    IRQSignal *irq_kbd;$/;"	m	struct:KBDState	file:
irq_mouse	pckbd.c	/^    IRQSignal *irq_mouse;$/;"	m	struct:KBDState	file:
irq_num	iomem.h	/^    int irq_num;$/;"	m	struct:__anon3
irq_state	pci.c	/^    uint32_t irq_state[4][8]; \/* one bit per device *\/$/;"	m	struct:PCIBus	file:
irs	slirp/tcp_var.h	/^	tcp_seq	irs;			\/* initial receive sequence number *\/$/;"	m	struct:tcpcb
is_archive	fs_net.c	/^    BOOL is_archive;$/;"	m	struct:__anon68	file:
is_atomic	riscvsim/riscv_instruction.h	/^    int is_atomic;$/;"	m	struct:RVInstruction
is_atomic_load	riscvsim/riscv_instruction.h	/^    int is_atomic_load;$/;"	m	struct:RVInstruction
is_atomic_operate	riscvsim/riscv_instruction.h	/^    int is_atomic_operate;$/;"	m	struct:RVInstruction
is_atomic_store	riscvsim/riscv_instruction.h	/^    int is_atomic_store;$/;"	m	struct:RVInstruction
is_branch	riscvsim/riscv_instruction.h	/^    int is_branch;$/;"	m	struct:RVInstruction
is_branch_taken	riscvsim/common_core_utils.h	/^    uint32_t is_branch_taken;$/;"	m	struct:InstructionMapEntry
is_decoded	riscvsim/common_core_utils.h	/^    uint32_t is_decoded;$/;"	m	struct:InstructionMapEntry
is_device_io	riscv_cpu_priv.h	/^    int is_device_io;              \/* keep track whether the current data memory access was a device IO or RAM IO *\/$/;"	m	struct:RISCVCPUState
is_dir	fs_disk.c	/^    BOOL is_dir;$/;"	m	struct:FSFile	file:
is_empty_dir	fs_net.c	/^static BOOL is_empty_dir(FSDevice *fs, FSINode *n)$/;"	f	file:
is_fscmd	fs_net.c	/^            BOOL is_fscmd;$/;"	m	struct:FSINode::__anon60::__anon61	file:
is_func_call	riscvsim/riscv_instruction.h	/^    int is_func_call;$/;"	m	struct:RVInstruction
is_func_ret	riscvsim/riscv_instruction.h	/^    int is_func_ret;$/;"	m	struct:RVInstruction
is_ident_first	json.c	/^static inline BOOL is_ident_first(int c)$/;"	f	file:
is_load	riscvsim/riscv_instruction.h	/^    int is_load;$/;"	m	struct:RVInstruction
is_lsq_entry_speculated	riscvsim/ooo_branch.c	/^is_lsq_entry_speculated(LSQEntry *lsqe, uint64_t tag)$/;"	f	file:
is_opened	fs_disk.c	/^    BOOL is_opened;$/;"	m	struct:FSFile	file:
is_opened	fs_net.c	/^    BOOL is_opened;$/;"	m	struct:FSFile	file:
is_power_of_two	riscvsim/sim_params_stats.c	/^is_power_of_two(int value)$/;"	f	file:
is_pred_correct	riscvsim/common_core_utils.h	/^    uint32_t is_pred_correct;$/;"	m	struct:InstructionMapEntry
is_ram	iomem.h	/^    BOOL is_ram;$/;"	m	struct:__anon2
is_store	riscvsim/riscv_instruction.h	/^    int is_store;$/;"	m	struct:RVInstruction
is_system	riscvsim/riscv_instruction.h	/^    int is_system;$/;"	m	struct:RVInstruction
is_unsigned	riscvsim/riscv_instruction.h	/^    int is_unsigned;$/;"	m	struct:RVInstruction
is_url	fs_utils.c	/^BOOL is_url(const char *path)$/;"	f
is_write	block_net.c	/^    BOOL is_write;$/;"	m	struct:BlockDeviceHTTP	file:
isnan_sf	softfp_template.h	/^BOOL isnan_sf(F_UINT a)$/;"	f
isnan_sf	softfp_template.h	1118;"	d
isnan_sf	softfp_template.h	63;"	d
iss	slirp/tcp_var.h	/^	tcp_seq	iss;			\/* initial send sequence number *\/$/;"	m	struct:tcpcb
issignan_sf	softfp_template.h	/^BOOL issignan_sf(F_UINT a)$/;"	f
issignan_sf	softfp_template.h	1117;"	d
issignan_sf	softfp_template.h	62;"	d
isspace_nolf	fs_utils.h	/^static inline BOOL isspace_nolf(int c)$/;"	f
issue_ins_to_exec_unit	riscvsim/ooo_backend.c	/^issue_ins_to_exec_unit(OOCore *core, IMapEntry *e)$/;"	f	file:
issue_instruction	riscvsim/ooo_backend.c	/^issue_instruction(OOCore *core, IssueQueueEntry *iqe, IMapEntry *e)$/;"	f	file:
its_otime	slirp/ip_icmp.h	/^			n_time its_otime;$/;"	m	struct:icmp::__anon49::id_ts
its_rtime	slirp/ip_icmp.h	/^			n_time its_rtime;$/;"	m	struct:icmp::__anon49::id_ts
its_ttime	slirp/ip_icmp.h	/^			n_time its_ttime;$/;"	m	struct:icmp::__anon49::id_ts
iv	fs_wget.c	/^    uint8_t iv[AES_BLOCK_SIZE];$/;"	m	struct:DecryptFileState	file:
json_array_get	json.c	/^JSONValue json_array_get(JSONValue val, unsigned int idx)$/;"	f
json_array_new	json.c	/^JSONValue json_array_new(void)$/;"	f
json_array_set	json.c	/^int json_array_set(JSONValue val, unsigned int idx, JSONValue prop_val)$/;"	f
json_bool_new	json.h	/^static inline JSONValue json_bool_new(BOOL v)$/;"	f
json_error_new	json.c	/^JSONValue __attribute__((format(printf, 1, 2))) json_error_new(const char *fmt, ...)$/;"	f
json_free	json.c	/^void json_free(JSONValue val)$/;"	f
json_get_error	json.c	/^const char *json_get_error(JSONValue val)$/;"	f
json_get_str	json.c	/^const char *json_get_str(JSONValue val)$/;"	f
json_int32_new	json.h	/^static inline JSONValue json_int32_new(int v)$/;"	f
json_is_error	json.h	/^static inline BOOL json_is_error(JSONValue val)$/;"	f
json_is_undefined	json.h	/^static inline BOOL json_is_undefined(JSONValue val)$/;"	f
json_load	fs_net.c	/^static JSONValue json_load(const char *filename)$/;"	f	file:
json_null_new	json.h	/^static inline JSONValue json_null_new(void)$/;"	f
json_object_get	json.c	/^JSONValue json_object_get(JSONValue val, const char *name)$/;"	f
json_object_get2	json.c	/^static JSONProperty *json_object_get2(JSONObject *obj, const char *name)$/;"	f	file:
json_object_new	json.c	/^JSONValue json_object_new(void)$/;"	f
json_object_set	json.c	/^int json_object_set(JSONValue val, const char *name, JSONValue prop_val)$/;"	f
json_parse_value	json.c	/^JSONValue json_parse_value(const char *p)$/;"	f
json_parse_value2	json.c	/^JSONValue json_parse_value2(const char **pp)$/;"	f
json_parse_value_len	json.c	/^JSONValue json_parse_value_len(const char *p, int len)$/;"	f
json_string_new	json.c	/^JSONValue json_string_new(const char *str)$/;"	f
json_string_new2	json.c	/^JSONValue json_string_new2(const char *str, int len)$/;"	f
json_undefined_new	json.h	/^static inline JSONValue json_undefined_new(void)$/;"	f
kbd	pckbd.c	/^    PS2KbdState *kbd;$/;"	m	struct:KBDState	file:
kbd_queue	pckbd.c	/^static void kbd_queue(KBDState *s, int b, int aux)$/;"	f	file:
kbd_read_data	pckbd.c	/^static uint32_t kbd_read_data(void *opaque, uint32_t addr, int size_log2)$/;"	f	file:
kbd_read_status	pckbd.c	/^static uint32_t kbd_read_status(void *opaque, uint32_t addr, int size_log2)$/;"	f	file:
kbd_reset	pckbd.c	/^static void kbd_reset(void *opaque)$/;"	f	file:
kbd_update_aux_irq	pckbd.c	/^static void kbd_update_aux_irq(void *opaque, int level)$/;"	f	file:
kbd_update_irq	pckbd.c	/^static void kbd_update_irq(KBDState *s)$/;"	f	file:
kbd_update_kbd_irq	pckbd.c	/^static void kbd_update_kbd_irq(void *opaque, int level)$/;"	f	file:
kbd_write_command	pckbd.c	/^static void kbd_write_command(void *opaque, uint32_t addr, uint32_t val,$/;"	f	file:
kbd_write_data	pckbd.c	/^static void kbd_write_data(void *opaque, uint32_t addr, uint32_t val, int size_log2)$/;"	f	file:
keep_dest_busy	riscvsim/common_core_utils.h	/^    int keep_dest_busy;$/;"	m	struct:InstructionMapEntry
kernel_file_list	fs_net.c	/^static const char *kernel_file_list[FILE_LOAD_COUNT] = {$/;"	v	file:
kernel_load_cb	fs_net.c	/^static void kernel_load_cb(FSDevice *fs, FSQID *qid1, int err,$/;"	f	file:
key_pressed	sdl.c	/^static uint8_t key_pressed[KEYCODE_MAX + 1];$/;"	v	file:
keyboard_dev	riscv_machine.c	/^    VIRTIODevice *keyboard_dev;$/;"	m	struct:RISCVMachine	file:
l1_code_cache_evict	riscvsim/sim_params_stats.h	/^    int l1_code_cache_evict;$/;"	m	struct:SimParams
l1_code_cache_read_latency	riscvsim/sim_params_stats.h	/^    int l1_code_cache_read_latency;$/;"	m	struct:SimParams
l1_code_cache_size	riscvsim/sim_params_stats.h	/^    int l1_code_cache_size;$/;"	m	struct:SimParams
l1_code_cache_ways	riscvsim/sim_params_stats.h	/^    int l1_code_cache_ways;$/;"	m	struct:SimParams
l1_data_cache_evict	riscvsim/sim_params_stats.h	/^    int l1_data_cache_evict;$/;"	m	struct:SimParams
l1_data_cache_read_latency	riscvsim/sim_params_stats.h	/^    int l1_data_cache_read_latency;$/;"	m	struct:SimParams
l1_data_cache_size	riscvsim/sim_params_stats.h	/^    int l1_data_cache_size;$/;"	m	struct:SimParams
l1_data_cache_ways	riscvsim/sim_params_stats.h	/^    int l1_data_cache_ways;$/;"	m	struct:SimParams
l1_data_cache_write_latency	riscvsim/sim_params_stats.h	/^    int l1_data_cache_write_latency;$/;"	m	struct:SimParams
l2_cache	riscvsim/mmu.h	/^    Cache *l2_cache;$/;"	m	struct:MemoryManagementUnit
l2_cache_read	riscvsim/sim_params_stats.h	/^    uint64_t l2_cache_read;$/;"	m	struct:SimStats
l2_cache_read_miss	riscvsim/sim_params_stats.h	/^    uint64_t l2_cache_read_miss;$/;"	m	struct:SimStats
l2_cache_write	riscvsim/sim_params_stats.h	/^    uint64_t l2_cache_write;$/;"	m	struct:SimStats
l2_cache_write_miss	riscvsim/sim_params_stats.h	/^    uint64_t l2_cache_write_miss;$/;"	m	struct:SimStats
l2_shared_cache_evict	riscvsim/sim_params_stats.h	/^    int l2_shared_cache_evict;$/;"	m	struct:SimParams
l2_shared_cache_read_latency	riscvsim/sim_params_stats.h	/^    int l2_shared_cache_read_latency;$/;"	m	struct:SimParams
l2_shared_cache_size	riscvsim/sim_params_stats.h	/^    int l2_shared_cache_size;$/;"	m	struct:SimParams
l2_shared_cache_ways	riscvsim/sim_params_stats.h	/^    int l2_shared_cache_ways;$/;"	m	struct:SimParams
l2_shared_cache_write_latency	riscvsim/sim_params_stats.h	/^    int l2_shared_cache_write_latency;$/;"	m	struct:SimParams
last_accessed_page_num	riscvsim/memory_controller.h	/^    uint64_t last_accessed_page_num;$/;"	m	struct:MemoryController
last_ack_sent	slirp/tcp_var.h	/^	tcp_seq	last_ack_sent;$/;"	m	struct:tcpcb
last_avail_idx	virtio.c	/^    uint16_t last_avail_idx;$/;"	m	struct:__anon10	file:
last_ch_attr	vga.c	/^    uint16_t last_ch_attr[MAX_TEXT_WIDTH * MAX_TEXT_HEIGHT];$/;"	m	struct:VGAState	file:
last_comp_version	riscv_machine.c	/^    uint32_t last_comp_version; \/* <= 17 *\/$/;"	m	struct:fdt_header	file:
last_cursor_end	vga.c	/^    uint8_t last_cursor_end;$/;"	m	struct:VGAState	file:
last_cursor_offset	vga.c	/^    uint16_t last_cursor_offset;$/;"	m	struct:VGAState	file:
last_cursor_start	vga.c	/^    uint8_t last_cursor_start;$/;"	m	struct:VGAState	file:
last_height	vga.c	/^    uint32_t last_height;$/;"	m	struct:VGAState	file:
last_line_offset	vga.c	/^    uint16_t last_line_offset;$/;"	m	struct:VGAState	file:
last_palette	vga.c	/^    uint32_t last_palette[16];$/;"	m	struct:VGAState	file:
last_slowtimo	slirp/slirp.c	/^static u_int time_fasttimo, last_slowtimo;$/;"	v	file:
last_start_addr	vga.c	/^    uint16_t last_start_addr;$/;"	m	struct:VGAState	file:
last_width	vga.c	/^    uint32_t last_width;$/;"	m	struct:VGAState	file:
lcyl	ide.c	/^    uint8_t lcyl;$/;"	m	struct:IDEState	file:
len	json.h	/^    int len;$/;"	m	struct:JSONArray
len	json.h	/^    int len;$/;"	m	struct:JSONObject
len	json.h	/^    int len;$/;"	m	struct:__anon38
len	machine.h	/^    int len;$/;"	m	struct:__anon28
len	virtio.c	/^    uint32_t len;$/;"	m	struct:__anon11	file:
length	fs.h	/^    uint64_t length;$/;"	m	struct:__anon57
length	sha256.h	/^    uint64_t length;$/;"	m	struct:__anon24
level	riscvsim/cache.h	/^    int level;$/;"	m	struct:Cache
likely	cutils.h	29;"	d
link	block_net.c	/^    struct list_head link;$/;"	m	struct:CachedBlock	typeref:struct:CachedBlock::list_head	file:
link	fs_net.c	/^            struct list_head link;$/;"	m	struct:FSINode::__anon60::__anon61	typeref:struct:FSINode::__anon60::__anon61::list_head	file:
link	fs_net.c	/^    struct list_head link;$/;"	m	struct:FSBaseURL	typeref:struct:FSBaseURL::list_head	file:
link	fs_net.c	/^    struct list_head link;$/;"	m	struct:FSINode	typeref:struct:FSINode::list_head	file:
link	fs_net.c	/^    struct list_head link;$/;"	m	struct:__anon65	typeref:struct:__anon65::list_head	file:
link	fs_net.c	/^    struct list_head link;$/;"	m	struct:__anon68	typeref:struct:__anon68::list_head	file:
link	fs_net.c	/^    struct list_head link;$/;"	m	struct:__anon69	typeref:struct:__anon69::list_head	file:
link	fs_net.c	/^    struct list_head link;$/;"	m	struct:__anon70	typeref:struct:__anon70::list_head	file:
link	fs_net.c	/^    struct list_head link;$/;"	m	struct:__anon71	typeref:struct:__anon71::list_head	file:
link	fs_wget.c	/^    struct list_head link;$/;"	m	struct:XHRState	typeref:struct:XHRState::list_head	file:
link	fs_wget.c	/^    struct list_head link;$/;"	m	struct:__anon20	typeref:struct:__anon20::list_head	file:
link	virtio.c	/^    struct list_head link;$/;"	m	struct:__anon16	typeref:struct:__anon16::list_head	file:
linux_input_to_keycode_set1	ps2.c	/^static const uint8_t linux_input_to_keycode_set1[INPUT_MAKE_KEY_MAX - INPUT_MAKE_KEY_MIN + 1] = {$/;"	v	file:
list_add	list.h	/^static inline void list_add(struct list_head *el, struct list_head *head)$/;"	f
list_add_tail	list.h	/^static inline void list_add_tail(struct list_head *el, struct list_head *head)$/;"	f
list_del	list.h	/^static inline void list_del(struct list_head *el)$/;"	f
list_empty	list.h	/^static inline int list_empty(struct list_head *el)$/;"	f
list_entry	list.h	33;"	d
list_for_each	list.h	80;"	d
list_for_each_prev	list.h	87;"	d
list_for_each_prev_safe	list.h	90;"	d
list_for_each_safe	list.h	83;"	d
list_head	list.h	/^struct list_head {$/;"	s
load_file	machine.c	/^static int load_file(uint8_t **pbuf, const char *filename)$/;"	f	file:
load_page_faults	riscvsim/sim_params_stats.h	/^    uint64_t load_page_faults;$/;"	m	struct:SimStats
load_page_walks	riscvsim/sim_params_stats.h	/^    uint64_t load_page_walks;$/;"	m	struct:SimStats
load_res	riscv_cpu_priv.h	/^    target_ulong load_res; \/* for atomic LR\/SC *\/$/;"	m	struct:RISCVCPUState
load_tlb_hits	riscvsim/sim_params_stats.h	/^    uint64_t load_tlb_hits;$/;"	m	struct:SimStats
load_tlb_lookups	riscvsim/sim_params_stats.h	/^    uint64_t load_tlb_lookups;$/;"	m	struct:SimStats
log_file	riscv_cpu.c	/^static FILE *log_file;$/;"	v	file:
log_printf	riscv_cpu.c	/^static void __attribute__((format(printf, 1, 2), unused)) log_printf(const char *fmt, ...)$/;"	f	file:
log_vprintf	riscv_cpu.c	/^static void log_vprintf(const char *fmt, va_list ap)$/;"	f	file:
loopback_addr	slirp/slirp.c	/^struct in_addr loopback_addr;$/;"	v	typeref:struct:in_addr
lport	slirp/misc.h	/^    uint16_t lport;$/;"	m	struct:emu_t
lport	slirp/misc.h	/^    uint16_t lport;$/;"	m	struct:tos_t
lprint	slirp/misc.c	/^void lprint(const char *format, ...)$/;"	f
lsq	riscvsim/ooo.h	/^    LSQ lsq;                  \/* Load-Store Queue *\/$/;"	m	struct:OOCore
lsq_entry_create	riscvsim/ooo_frontend.c	/^lsq_entry_create(LSQ *lsq, IMapEntry *e)$/;"	f	file:
lsq_idx	riscvsim/common_core_utils.h	/^    int lsq_idx;$/;"	m	struct:InstructionMapEntry
lsq_size	riscvsim/sim_params_stats.h	/^    int lsq_size;$/;"	m	struct:SimParams
lsu	riscvsim/ooo.h	/^    CPUStage lsu; \/* Load-Store Unit unit, works with LSQ *\/$/;"	m	struct:OOCore
m_adj	slirp/mbuf.c	/^m_adj(struct mbuf *m, int len)$/;"	f
m_cat	slirp/mbuf.c	/^m_cat(struct mbuf *m, struct mbuf *n)$/;"	f
m_copy	slirp/mbuf.c	/^m_copy(struct mbuf *n, struct mbuf *m, int off, int len)$/;"	f
m_dat	slirp/mbuf.h	102;"	d
m_dat_	slirp/mbuf.h	/^		char	m_dat_[1]; \/* ANSI don't like 0 sized arrays *\/$/;"	m	union:mbuf::M_dat
m_data	slirp/mbuf.h	100;"	d
m_ext	slirp/mbuf.h	103;"	d
m_ext_	slirp/mbuf.h	/^		char	*m_ext_;$/;"	m	union:mbuf::M_dat
m_flags	slirp/mbuf.h	98;"	d
m_free	slirp/mbuf.c	/^m_free(struct mbuf *m)$/;"	f
m_freelist	slirp/slirp.h	/^    struct mbuf m_freelist, m_usedlist;$/;"	m	struct:Slirp	typeref:struct:Slirp::mbuf
m_freem	slirp/mbuf.h	36;"	d
m_get	slirp/mbuf.c	/^m_get(Slirp *slirp)$/;"	f
m_hdr	slirp/mbuf.h	/^	struct	m_hdr m_hdr;$/;"	m	struct:mbuf	typeref:struct:mbuf::m_hdr
m_hdr	slirp/mbuf.h	/^struct m_hdr {$/;"	s
m_inc	slirp/mbuf.c	/^m_inc(struct mbuf *m, int size)$/;"	f
m_init	slirp/mbuf.c	/^m_init(Slirp *slirp)$/;"	f
m_len	slirp/mbuf.h	99;"	d
m_next	slirp/mbuf.h	94;"	d
m_nextpkt	slirp/mbuf.h	96;"	d
m_prev	slirp/mbuf.h	95;"	d
m_prevpkt	slirp/mbuf.h	97;"	d
m_size	slirp/mbuf.h	101;"	d
m_so	slirp/mbuf.h	104;"	d
m_usedlist	slirp/slirp.h	/^    struct mbuf m_freelist, m_usedlist;$/;"	m	struct:Slirp	typeref:struct:Slirp::
mac_addr	virtio.h	/^    uint8_t mac_addr[6]; \/* mac address of the interface *\/$/;"	m	struct:EthernetDevice
macaddr	slirp/bootp.h	/^    uint8_t macaddr[6];$/;"	m	struct:__anon50
machine_name	machine.h	/^    char *machine_name;$/;"	m	struct:__anon32
machine_names	machine.h	/^    const char *machine_names;$/;"	m	struct:VirtMachineClass
magic	riscv_machine.c	/^    uint32_t magic;$/;"	m	struct:fdt_header	file:
main	build_filelist.c	/^int main(int argc, char **argv)$/;"	f
main	share/test.c	/^int main()$/;"	f
main	splitimg.c	/^int main(int argc, char **argv)$/;"	f
main	stats_display.c	/^main(int argc, char const *argv[])$/;"	f
main	temu.c	/^int main(int argc, char **argv)$/;"	f
major	fs_net.c	/^            uint32_t major;$/;"	m	struct:FSINode::__anon60::__anon63	file:
major_opcode	riscvsim/riscv_instruction.h	/^    int32_t major_opcode;$/;"	m	struct:RVInstruction
mallocz	cutils.c	/^void *mallocz(size_t size)$/;"	f
manual_recv	virtio.c	/^    BOOL manual_recv; \/* if TRUE, the device_recv() callback is not called *\/$/;"	m	struct:__anon10	file:
map	iomem.h	/^    PhysMemoryMap *map;$/;"	m	struct:__anon2
mark	fs_net.c	/^    uint8_t mark; \/* temporary use only *\/$/;"	m	struct:__anon65	file:
marshall	virtio.c	/^static int marshall(VIRTIO9PDevice *s, $/;"	f	file:
max	slirp/slirp.h	305;"	d
max_bytes_to_access	riscvsim/memory_controller_utils.h	/^    int max_bytes_to_access;$/;"	m	struct:PendingMemAccessEntry
max_cache_size_kb	block_net.c	/^    int max_cache_size_kb;$/;"	m	struct:BlockDeviceHTTP	file:
max_int	cutils.h	/^static inline int max_int(int a, int b)$/;"	f
max_latency	riscvsim/common_core_utils.h	/^    int max_latency;$/;"	m	struct:InstructionMapEntry
max_latency	riscvsim/memory_controller.h	/^    int max_latency;$/;"	m	struct:MemoryController
max_size	riscvsim/circular_queue.h	/^    int max_size;$/;"	m	struct:CircularQueue
max_size	riscvsim/memory_controller_utils.h	/^    int max_size;$/;"	m	struct:StageMemAccessQueue
max_size	riscvsim/ras.h	/^    int max_size;$/;"	m	struct:Ras
max_sndwnd	slirp/tcp_var.h	/^	uint32_t max_sndwnd;		\/* largest window peer has offered *\/$/;"	m	struct:tcpcb
max_tag_val	riscvsim/cache.h	/^    target_ulong max_tag_val;$/;"	m	struct:Cache
max_words_per_blk	riscvsim/cache.h	/^    int max_words_per_blk;$/;"	m	struct:Cache
max_xlen	riscv_machine.c	/^    int max_xlen;$/;"	m	struct:RISCVMachine	file:
mbuf	slirp/mbuf.h	/^struct mbuf {$/;"	s
mbuf_alloced	slirp/slirp.h	/^    int mbuf_alloced;$/;"	m	struct:Slirp
mbuf_ptr	slirp/ip.h	/^struct mbuf_ptr {$/;"	s
mcause	riscv_cpu_priv.h	/^    target_ulong mcause;$/;"	m	struct:RISCVCPUState
mcounteren	riscv_cpu_priv.h	/^    uint32_t mcounteren;$/;"	m	struct:RISCVCPUState
medeleg	riscv_cpu_priv.h	/^    uint32_t medeleg;$/;"	m	struct:RISCVCPUState
mem_access_active	riscvsim/memory_controller.h	/^    int mem_access_active;$/;"	m	struct:MemoryController
mem_access_latency	riscvsim/memory_controller.h	/^    int mem_access_latency;$/;"	m	struct:MemoryController
mem_access_latency	riscvsim/sim_params_stats.h	/^    int mem_access_latency;$/;"	m	struct:SimParams
mem_addend	riscv_cpu_priv.h	/^    uintptr_t mem_addend;$/;"	m	struct:__anon44
mem_addr	riscvsim/riscv_instruction.h	/^    target_ulong mem_addr;$/;"	m	struct:RVInstruction
mem_controller	riscvsim/cache.h	/^    MemoryController *mem_controller;$/;"	m	struct:Cache
mem_controller	riscvsim/mmu.h	/^    MemoryController *mem_controller;$/;"	m	struct:MemoryManagementUnit
mem_controller_access_dram	riscvsim/memory_controller.c	/^mem_controller_access_dram(MemoryController *m, target_ulong paddr, int bytes_to_access,$/;"	f
mem_controller_add_pte_to_dram_queue	riscvsim/memory_controller.c	/^mem_controller_add_pte_to_dram_queue(MemoryController *m, target_ulong paddr, int bytes_to_access,$/;"	f
mem_controller_flush_dram_queue	riscvsim/memory_controller.c	/^mem_controller_flush_dram_queue(MemoryController *m)$/;"	f
mem_controller_flush_stage_mem_access_queue	riscvsim/memory_controller.c	/^mem_controller_flush_stage_mem_access_queue(StageMemAccessQueue *q)$/;"	f
mem_controller_free	riscvsim/memory_controller.c	/^mem_controller_free(MemoryController **m)$/;"	f
mem_controller_init	riscvsim/memory_controller.c	/^mem_controller_init(const SimParams *p)$/;"	f
mem_controller_reset	riscvsim/memory_controller.c	/^mem_controller_reset(MemoryController *m)$/;"	f
mem_controller_set_dram_burst_size	riscvsim/memory_controller.c	/^mem_controller_set_dram_burst_size(MemoryController *m, int dram_burst_size)$/;"	f
mem_controller_update_base	riscvsim/memory_controller.c	/^mem_controller_update_base(MemoryController *m)$/;"	f
mem_controller_update_dramsim	riscvsim/memory_controller.c	/^mem_controller_update_dramsim(MemoryController *m)$/;"	f
mem_controller_update_internal	riscvsim/memory_controller.h	/^    void (*mem_controller_update_internal)(struct MemoryController *);$/;"	m	struct:MemoryController
mem_map	pci.c	/^    PhysMemoryMap *mem_map;$/;"	m	struct:PCIBus	file:
mem_map	riscv_cpu_priv.h	/^    PhysMemoryMap *mem_map;$/;"	m	struct:RISCVCPUState
mem_map	riscv_machine.c	/^    PhysMemoryMap *mem_map;$/;"	m	struct:RISCVMachine	file:
mem_map	virtio.c	/^    PhysMemoryMap *mem_map;$/;"	m	struct:VIRTIODevice	file:
mem_map	virtio.h	/^    PhysMemoryMap *mem_map;$/;"	m	struct:__anon51
mem_model_type	riscvsim/memory_controller.h	/^    int mem_model_type;$/;"	m	struct:MemoryController
mem_model_type	riscvsim/sim_params_stats.h	/^    int mem_model_type;$/;"	m	struct:SimParams
mem_model_type_str	riscvsim/sim_params_stats.c	/^const char *mem_model_type_str[] = {"base", "dramsim2"};$/;"	v
mem_range	simplefb.c	/^    PhysMemoryRange *mem_range;$/;"	m	struct:SimpleFBState	file:
mem_range	vga.c	/^    PhysMemoryRange *mem_range;$/;"	m	struct:VGAState	file:
mem_range	virtio.c	/^    PhysMemoryRange *mem_range;$/;"	m	struct:VIRTIODevice	file:
mem_range2	vga.c	/^    PhysMemoryRange *mem_range2;$/;"	m	struct:VGAState	file:
mem_request_complete	riscvsim/ooo.h	/^    int mem_request_complete;$/;"	m	struct:LSQEntry
mem_request_queue	riscvsim/memory_controller.h	/^    MemRequestQueue mem_request_queue;$/;"	m	struct:MemoryController
mem_request_sent	riscvsim/ooo.h	/^    int mem_request_sent;$/;"	m	struct:LSQEntry
mem_uint_t	riscv_cpu_xlen_typedefs.h	/^typedef uint128_t mem_uint_t;$/;"	t
mem_uint_t	riscv_cpu_xlen_typedefs.h	/^typedef uint32_t mem_uint_t;$/;"	t
mem_uint_t	riscv_cpu_xlen_typedefs.h	/^typedef uint64_t mem_uint_t;$/;"	t
memcpy_from_queue	virtio.c	/^static int memcpy_from_queue(VIRTIODevice *s, void *buf,$/;"	f	file:
memcpy_to_from_queue	virtio.c	/^static int memcpy_to_from_queue(VIRTIODevice *s, uint8_t *buf,$/;"	f	file:
memcpy_to_queue	virtio.c	/^static int memcpy_to_queue(VIRTIODevice *s,$/;"	f	file:
memmove	slirp/slirp.h	52;"	d
memory	riscvsim/inorder.h	/^    CPUStage memory;$/;"	m	struct:INCore
mepc	riscv_cpu_priv.h	/^    target_ulong mepc;$/;"	m	struct:RISCVCPUState
mh_data	slirp/mbuf.h	/^	caddr_t	mh_data;		\/* Location of data *\/$/;"	m	struct:m_hdr
mh_flags	slirp/mbuf.h	/^	int	mh_flags;	  \/* Misc flags *\/$/;"	m	struct:m_hdr
mh_len	slirp/mbuf.h	/^	int	mh_len;			\/* Amount of data in this mbuf *\/$/;"	m	struct:m_hdr
mh_next	slirp/mbuf.h	/^	struct	mbuf *mh_next;		\/* Linked list of mbufs *\/$/;"	m	struct:m_hdr	typeref:struct:m_hdr::mbuf
mh_nextpkt	slirp/mbuf.h	/^	struct	mbuf *mh_nextpkt;	\/* Next packet in queue\/record *\/$/;"	m	struct:m_hdr	typeref:struct:m_hdr::mbuf
mh_prev	slirp/mbuf.h	/^	struct	mbuf *mh_prev;$/;"	m	struct:m_hdr	typeref:struct:m_hdr::mbuf
mh_prevpkt	slirp/mbuf.h	/^	struct	mbuf *mh_prevpkt; \/* Flags aren't used in the output queue *\/$/;"	m	struct:m_hdr	typeref:struct:m_hdr::mbuf
mh_size	slirp/mbuf.h	/^	int	mh_size;		\/* Size of data *\/$/;"	m	struct:m_hdr
mh_so	slirp/mbuf.h	/^	struct	socket *mh_so;$/;"	m	struct:m_hdr	typeref:struct:m_hdr::socket
mhartid	riscv_cpu_priv.h	/^    target_ulong mhartid; \/* ro *\/$/;"	m	struct:RISCVCPUState
mideleg	riscv_cpu_priv.h	/^    uint32_t mideleg;$/;"	m	struct:RISCVCPUState
mie	riscv_cpu_priv.h	/^    uint32_t mie;$/;"	m	struct:RISCVCPUState
min	slirp/slirp.h	304;"	d
min_int	cutils.h	/^static inline int min_int(int a, int b)$/;"	f
minor	fs_net.c	/^            uint32_t minor;$/;"	m	struct:FSINode::__anon60::__anon63	file:
mip	riscv_cpu_priv.h	/^    uint32_t mip;$/;"	m	struct:RISCVCPUState
misa	riscv_cpu_priv.h	/^    uint32_t misa;$/;"	m	struct:RISCVCPUState
mispredict	riscvsim/common_core_utils.h	/^    int mispredict;$/;"	m	struct:InstructionMapEntry
mmu	riscvsim/riscv_sim_cpu.h	/^    MMU *mmu;               \/* Memory controller *\/$/;"	m	struct:RISCVSIMCPUState
mmu_data_read	riscvsim/mmu.c	/^mmu_data_read(MMU *mmu, target_ulong paddr, int bytes_to_read, int stage_id, int priv)$/;"	f
mmu_data_write	riscvsim/mmu.c	/^mmu_data_write(MMU *mmu, target_ulong paddr, int bytes_to_write, int stage_id, int priv)$/;"	f
mmu_free	riscvsim/mmu.c	/^mmu_free(MMU **mmu)$/;"	f
mmu_init	riscvsim/mmu.c	/^mmu_init(const SimParams *p)$/;"	f
mmu_insn_read	riscvsim/mmu.c	/^mmu_insn_read(MMU *mmu, target_ulong paddr, int bytes_to_read, int stage_id, int priv)$/;"	f
mmu_pte_read	riscvsim/mmu.c	/^mmu_pte_read(MMU *mmu, target_ulong paddr, int bytes_to_read, int stage_id,$/;"	f
mmu_pte_write	riscvsim/mmu.c	/^mmu_pte_write(MMU *mmu, target_ulong paddr, int bytes_to_write, int stage_id,$/;"	f
mode	fs_net.c	/^    uint32_t mode;$/;"	m	struct:FSINode	file:
mode	pckbd.c	/^    uint8_t mode;$/;"	m	struct:KBDState	file:
mode	temu.c	/^    BlockDeviceModeEnum mode;$/;"	m	struct:BlockDeviceFile	file:
mouse	pckbd.c	/^    PS2MouseState *mouse;$/;"	m	struct:KBDState	file:
mouse_buttons	ps2.c	/^    uint8_t mouse_buttons;$/;"	m	struct:PS2MouseState	file:
mouse_detect_state	ps2.c	/^    uint8_t mouse_detect_state;$/;"	m	struct:PS2MouseState	file:
mouse_dev	riscv_machine.c	/^    VIRTIODevice *mouse_dev;$/;"	m	struct:RISCVMachine	file:
mouse_dx	ps2.c	/^    int mouse_dx; \/* current values, needed for 'poll' mode *\/$/;"	m	struct:PS2MouseState	file:
mouse_dy	ps2.c	/^    int mouse_dy;$/;"	m	struct:PS2MouseState	file:
mouse_dz	ps2.c	/^    int mouse_dz;$/;"	m	struct:PS2MouseState	file:
mouse_resolution	ps2.c	/^    uint8_t mouse_resolution;$/;"	m	struct:PS2MouseState	file:
mouse_sample_rate	ps2.c	/^    uint8_t mouse_sample_rate;$/;"	m	struct:PS2MouseState	file:
mouse_status	ps2.c	/^    uint8_t mouse_status;$/;"	m	struct:PS2MouseState	file:
mouse_type	ps2.c	/^    uint8_t mouse_type; \/* 0 = PS2, 3 = IMPS\/2, 4 = IMEX *\/$/;"	m	struct:PS2MouseState	file:
mouse_wrap	ps2.c	/^    uint8_t mouse_wrap;$/;"	m	struct:PS2MouseState	file:
mptr	slirp/ip.h	/^	struct mbuf *mptr;$/;"	m	struct:mbuf_ptr	typeref:struct:mbuf_ptr::mbuf
mscratch	riscv_cpu_priv.h	/^    target_ulong mscratch;$/;"	m	struct:RISCVCPUState
msize	virtio.c	/^    int msize; \/* maximum message size *\/$/;"	m	struct:VIRTIO9PDevice	file:
msr	vga.c	/^    uint8_t msr; \/* Misc Output Register *\/$/;"	m	struct:VGAState	file:
mstatus	riscv_cpu_priv.h	/^    target_ulong mstatus;$/;"	m	struct:RISCVCPUState
mtime_nsec	fs_net.c	/^    uint32_t mtime_nsec;$/;"	m	struct:FSINode	file:
mtime_sec	fs_net.c	/^    uint32_t mtime_sec;$/;"	m	struct:FSINode	file:
mtod	slirp/mbuf.h	45;"	d
mtval	riscv_cpu_priv.h	/^    target_ulong mtval;$/;"	m	struct:RISCVCPUState
mtvec	riscv_cpu_priv.h	/^    target_ulong mtvec;$/;"	m	struct:RISCVCPUState
mul_sf	softfp_template.h	/^F_UINT mul_sf(F_UINT a, F_UINT b, RoundingModeEnum rm,$/;"	f
mul_sf	softfp_template.h	1120;"	d
mul_sf	softfp_template.h	65;"	d
mul_stage_latency	riscvsim/sim_params_stats.h	/^    int *mul_stage_latency;$/;"	m	struct:SimParams
mul_u	softfp_template.h	/^static F_UINT mul_u(F_UINT *plow, F_UINT a, F_UINT b)$/;"	f
mul_u	softfp_template.h	1127;"	d
mul_u	softfp_template.h	72;"	d
mulh32	riscv_cpu_template.h	/^static inline uint32_t mulh32(int32_t a, int32_t b)$/;"	f
mulh32	riscvsim/riscv_ins_execute.c	/^mulh32(int32_t a, int32_t b)$/;"	f	file:
mulh64	riscv_cpu_template.h	/^static inline uint64_t mulh64(int64_t a, int64_t b)$/;"	f
mulh64	riscvsim/riscv_ins_execute.c	/^mulh64(int64_t a, int64_t b)$/;"	f	file:
mulhsu32	riscv_cpu_template.h	/^static inline uint32_t mulhsu32(int32_t a, uint32_t b)$/;"	f
mulhsu32	riscvsim/riscv_ins_execute.c	/^mulhsu32(int32_t a, uint32_t b)$/;"	f	file:
mulhsu64	riscv_cpu_template.h	/^static inline uint64_t mulhsu64(int64_t a, uint64_t b)$/;"	f
mulhsu64	riscvsim/riscv_ins_execute.c	/^mulhsu64(int64_t a, uint64_t b)$/;"	f	file:
mulhu32	riscv_cpu_template.h	/^static inline uint32_t mulhu32(uint32_t a, uint32_t b)$/;"	f
mulhu32	riscvsim/riscv_ins_execute.c	/^mulhu32(uint32_t a, uint32_t b)$/;"	f	file:
mulhu64	riscv_cpu_template.h	/^static inline uint64_t mulhu64(uint64_t a, uint64_t b)$/;"	f
mulhu64	riscvsim/riscv_ins_execute.c	/^mulhu64(uint64_t a, uint64_t b)$/;"	f	file:
mult_sectors	ide.c	/^    int mult_sectors;$/;"	m	struct:IDEState	file:
mxl	riscv_cpu_priv.h	/^    uint8_t mxl; \/* MXL field in MISA register *\/$/;"	m	struct:RISCVCPUState
n	fs_net.c	/^    FSINode *n;$/;"	m	struct:FSOpenInfo	file:
n	riscvsim/riscv_ins_str_creator.c	/^  int n;$/;"	m	struct:CsrName	file:
n_allocated_clusters	block_net.c	/^    int n_allocated_clusters;$/;"	m	struct:BlockDeviceHTTP	file:
n_block_num	block_net.c	/^    int n_block_num;$/;"	m	struct:__anon9	file:
n_cached_blocks	block_net.c	/^    int n_cached_blocks;$/;"	m	struct:BlockDeviceHTTP	file:
n_cached_blocks_max	block_net.c	/^    int n_cached_blocks_max;$/;"	m	struct:BlockDeviceHTTP	file:
n_clusters	block_net.c	/^    int n_clusters;$/;"	m	struct:BlockDeviceHTTP	file:
n_cycles	riscv_cpu_priv.h	/^    int32_t n_cycles; \/* only used inside the CPU loop *\/$/;"	m	struct:RISCVCPUState
n_long	slirp/ip.h	/^typedef uint32_t n_long;                 \/* long as received from the net *\/$/;"	t
n_phys_mem_range	iomem.h	/^    int n_phys_mem_range;$/;"	m	struct:PhysMemoryMap
n_read_blocks	block_net.c	/^    int64_t n_read_blocks;$/;"	m	struct:BlockDeviceHTTP	file:
n_read_sectors	block_net.c	/^    int64_t n_read_sectors;$/;"	m	struct:BlockDeviceHTTP	file:
n_time	slirp/ip_icmp.h	/^typedef uint32_t n_time;$/;"	t
n_write_sectors	block_net.c	/^    int64_t n_write_sectors;$/;"	m	struct:BlockDeviceHTTP	file:
name	fs_net.c	/^            char *name;$/;"	m	struct:FSINode::__anon60::__anon64	file:
name	fs_net.c	/^    char name[0];$/;"	m	struct:__anon65	file:
name	fs_net.c	/^    const char *name;$/;"	m	struct:__anon68	file:
name	fs_net.c	/^    const char *name;$/;"	m	struct:__anon70	file:
name	fs_net.c	/^    const char *name;$/;"	m	struct:__anon71	file:
name	json.h	/^    JSONValue name;$/;"	m	struct:JSONProperty
name	pci.c	/^    char *name; \/* for debug only *\/$/;"	m	struct:PCIDevice	file:
name	riscvsim/riscv_ins_str_creator.c	/^  const char *name;$/;"	m	struct:CsrName	file:
name	virtio.c	/^    const char *name;$/;"	m	struct:__anon17	file:
nb_blocks	block_net.c	/^    int nb_blocks;$/;"	m	struct:BlockDeviceHTTP	file:
nb_sectors	block_net.c	/^    int64_t nb_sectors;$/;"	m	struct:BlockDeviceHTTP	file:
nb_sectors	ide.c	/^    int64_t nb_sectors;$/;"	m	struct:IDEState	file:
nb_sectors	temu.c	/^    int64_t nb_sectors;$/;"	m	struct:BlockDeviceFile	file:
net	machine.h	/^    EthernetDevice *net;$/;"	m	struct:VirtMachine
net	machine.h	/^    EthernetDevice *net;$/;"	m	struct:__anon31
net_completed	temu.c	/^static BOOL net_completed;$/;"	v	file:
net_poll_cb	temu.c	/^static BOOL net_poll_cb(void *arg)$/;"	f	file:
net_start_cb	temu.c	/^static void net_start_cb(void *arg)$/;"	f	file:
next	list.h	/^    struct list_head *next;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
next	slirp/ip.h	/^	void *next, *prev;$/;"	m	struct:qlink
next	slirp/misc.h	/^    struct emu_t *next;$/;"	m	struct:emu_t	typeref:struct:emu_t::emu_t
next	virtio.c	/^    uint16_t next;$/;"	m	struct:__anon11	file:
next_cap_offset	pci.c	/^    uint8_t next_cap_offset; \/* offset of the next capability *\/$/;"	m	struct:PCIDevice	file:
next_inode_num	build_filelist.c	/^    uint64_t next_inode_num;$/;"	m	struct:__anon7	file:
next_level_cache	riscvsim/cache.h	/^    struct Cache *next_level_cache;$/;"	m	struct:Cache	typeref:struct:Cache::Cache
next_m	slirp/slirp.h	/^    struct mbuf *next_m;    \/* pointer to next mbuf to output *\/$/;"	m	struct:Slirp	typeref:struct:Slirp::mbuf
no_inline	cutils.h	32;"	d
none_aliasing_func	riscvsim/adaptive_predictor.c	/^none_aliasing_func(AdaptivePredictor *a, uint32_t hr, target_ulong pc)$/;"	f	file:
normalize2_sf	softfp_template.h	/^static F_UINT normalize2_sf(uint32_t a_sign, int a_exp, F_UINT a_mant1, F_UINT a_mant0,$/;"	f
normalize2_sf	softfp_template.h	1116;"	d
normalize2_sf	softfp_template.h	61;"	d
normalize_sf	softfp_template.h	/^static F_UINT normalize_sf(uint32_t a_sign, int a_exp, F_UINT a_mant,$/;"	f
normalize_sf	softfp_template.h	1115;"	d
normalize_sf	softfp_template.h	60;"	d
normalize_subnormal_sf	softfp_template.h	/^static inline F_UINT normalize_subnormal_sf(int32_t *pa_exp, F_UINT a_mant)$/;"	f
normalize_subnormal_sf	softfp_template.h	1124;"	d
normalize_subnormal_sf	softfp_template.h	69;"	d
nsector	ide.c	/^    uint16_t nsector; \/* 0 is 256 to ease computations *\/$/;"	m	struct:IDEState	file:
num	virtio.c	/^    uint32_t num;$/;"	m	struct:__anon10	file:
num_alu_stages	riscvsim/sim_params_stats.h	/^    int num_alu_stages;$/;"	m	struct:SimParams
num_blks	riscvsim/cache.h	/^    int num_blks;$/;"	m	struct:Cache
num_buffers	virtio.c	/^    uint16_t num_buffers;$/;"	m	struct:__anon14	file:
num_cpu_stages	riscvsim/sim_params_stats.h	/^    int num_cpu_stages;$/;"	m	struct:SimParams
num_div_stages	riscvsim/sim_params_stats.h	/^    int num_div_stages;$/;"	m	struct:SimParams
num_fpu_alu_stages	riscvsim/sim_params_stats.h	/^    int num_fpu_alu_stages;$/;"	m	struct:SimParams
num_fpu_fma_stages	riscvsim/sim_params_stats.h	/^    int num_fpu_fma_stages;$/;"	m	struct:SimParams
num_mul_stages	riscvsim/sim_params_stats.h	/^    int num_mul_stages;$/;"	m	struct:SimParams
num_sets	riscvsim/cache.h	/^    int num_sets;$/;"	m	struct:Cache
num_ways	riscvsim/cache.h	/^    int num_ways;$/;"	m	struct:Cache
obj	json.h	/^        struct JSONObject *obj;$/;"	m	union:JSONValue::__anon39	typeref:struct:JSONValue::__anon39::JSONObject
off_dt_strings	riscv_machine.c	/^    uint32_t off_dt_strings;$/;"	m	struct:fdt_header	file:
off_dt_struct	riscv_machine.c	/^    uint32_t off_dt_struct;$/;"	m	struct:fdt_header	file:
off_mem_rsvmap	riscv_machine.c	/^    uint32_t off_mem_rsvmap;$/;"	m	struct:fdt_header	file:
offsetof	cutils.h	41;"	d
old_fd0_flags	temu.c	/^static int old_fd0_flags;$/;"	v	file:
old_pdest	riscvsim/riscv_instruction.h	/^    int old_pdest;$/;"	m	struct:RVInstruction
oldtty	temu.c	/^static struct termios oldtty;$/;"	v	typeref:struct:termios	file:
oo_core_decode	riscvsim/ooo_frontend.c	/^oo_core_decode(OOCore *core)$/;"	f
oo_core_dispatch	riscvsim/ooo_frontend.c	/^oo_core_dispatch(OOCore *core)$/;"	f
oo_core_execute_all	riscvsim/ooo_backend.c	/^oo_core_execute_all(OOCore *core)$/;"	f
oo_core_execute_non_pipe	riscvsim/ooo_backend.c	/^oo_core_execute_non_pipe(OOCore *core, int fu_type, CPUStage *stage)$/;"	f	file:
oo_core_execute_pipe	riscvsim/ooo_backend.c	/^oo_core_execute_pipe(OOCore *core, int cur_stage_id, int fu_type, CPUStage *stage,$/;"	f	file:
oo_core_fetch	riscvsim/ooo_frontend.c	/^oo_core_fetch(OOCore *core)$/;"	f
oo_core_free	riscvsim/ooo.c	/^oo_core_free(void *core_type)$/;"	f
oo_core_init	riscvsim/ooo.c	/^oo_core_init(const SimParams *p, struct RISCVSIMCPUState *simcpu)$/;"	f
oo_core_issue	riscvsim/ooo_backend.c	/^oo_core_issue(OOCore *core)$/;"	f
oo_core_lsq	riscvsim/ooo_lsu.c	/^oo_core_lsq(OOCore *core)$/;"	f
oo_core_lsu	riscvsim/ooo_lsu.c	/^oo_core_lsu(OOCore *core)$/;"	f
oo_core_reset	riscvsim/ooo.c	/^oo_core_reset(void *core_type)$/;"	f
oo_core_rob_commit	riscvsim/ooo_backend.c	/^oo_core_rob_commit(OOCore *core)$/;"	f
oo_core_run	riscvsim/ooo.c	/^oo_core_run(void *core_type)$/;"	f
oo_process_branch	riscvsim/ooo_branch.c	/^oo_process_branch(OOCore *core, IMapEntry *e)$/;"	f
opaque	block_net.c	/^    void *opaque;$/;"	m	struct:BlockDeviceHTTP	file:
opaque	fs_net.c	/^    void *opaque;$/;"	m	struct:FSOpenInfo	file:
opaque	fs_wget.c	/^    void *opaque;$/;"	m	struct:DecryptFileState	file:
opaque	fs_wget.c	/^    void *opaque;$/;"	m	struct:XHRState	file:
opaque	fs_wget.c	/^    void *opaque;$/;"	m	struct:__anon20	file:
opaque	fs_wget.c	/^    void *opaque;$/;"	m	struct:__anon21	file:
opaque	iomem.h	/^    void *opaque;$/;"	m	struct:PhysMemoryMap
opaque	iomem.h	/^    void *opaque;$/;"	m	struct:__anon2
opaque	iomem.h	/^    void *opaque;$/;"	m	struct:__anon3
opaque	machine.c	/^    void *opaque;$/;"	m	struct:__anon19	file:
opaque	pci.c	/^    void *opaque;$/;"	m	struct:__anon1	file:
opaque	slirp/slirp.h	/^    void *opaque;$/;"	m	struct:Slirp
opaque	virtio.h	/^    void *opaque;$/;"	m	struct:BlockDevice
opaque	virtio.h	/^    void *opaque;$/;"	m	struct:EthernetDevice
opaque	virtio.h	/^    void *opaque;$/;"	m	struct:__anon52
open_count	fs_net.c	/^    int32_t open_count;$/;"	m	struct:FSINode	file:
open_flags	fs_disk.c	/^static int open_flags[][2] = {$/;"	v	file:
open_flags	fs_net.c	/^    uint32_t open_flags;$/;"	m	struct:FSFile	file:
open_info	fs_net.c	/^            struct FSOpenInfo *open_info; \/* used in LOADING state *\/$/;"	m	struct:FSINode::__anon60::__anon61	typeref:struct:FSINode::__anon60::__anon61::FSOpenInfo	file:
open_node_count	riscv_machine.c	/^    int open_node_count;$/;"	m	struct:__anon4	file:
open_type	fs_net.c	/^    FSOpenWgetEnum open_type;$/;"	m	struct:FSOpenInfo	file:
options	temu.c	/^static struct option options[] = {$/;"	v	typeref:struct:option	file:
org_size	iomem.h	/^    uint64_t org_size; \/* original size *\/$/;"	m	struct:__anon2
os_get_time_ms	slirp/misc.c	/^uint32_t os_get_time_ms(void)$/;"	f
os_socket	slirp/misc.c	/^int os_socket(int domain, int type, int protocol)$/;"	f
p9_flags_to_host	fs_disk.c	/^static int p9_flags_to_host(int flags)$/;"	f	file:
pack_sf	softfp_template.h	/^static inline F_UINT pack_sf(uint32_t a_sign, uint32_t a_exp, F_UINT a_mant)$/;"	f
pack_sf	softfp_template.h	1111;"	d
pack_sf	softfp_template.h	56;"	d
padstr	ide.c	/^static void padstr(char *str, const char *src, int len)$/;"	f	file:
palette	vga.c	/^    uint8_t palette[768];$/;"	m	struct:VGAState	file:
params	riscvsim/riscv_sim_cpu.h	/^    SimParams *params;      \/* Simulation Parameters *\/$/;"	m	struct:RISCVSIMCPUState
parse_file_id	fs_utils.c	/^int parse_file_id(FSFileID *pval, const char **pp)$/;"	f
parse_fname	fs_utils.c	/^int parse_fname(char *buf, int buf_size, const char **pp)$/;"	f
parse_hex_buf	fs_net.c	/^static int parse_hex_buf(uint8_t *buf, int buf_size, const char **pp)$/;"	f	file:
parse_ident	json.c	/^static int parse_ident(char *buf, int buf_size, const char **pp)$/;"	f	file:
parse_stage_latency_str	machine.c	/^static void parse_stage_latency_str(int **dest, int max_stage_count, char *str)$/;"	f	file:
parse_string	json.c	/^static JSONValue parse_string(const char **pp)$/;"	f	file:
parse_tag	fs_utils.c	/^int parse_tag(char *buf, int buf_size, const char *str, const char *tag)$/;"	f
parse_tag_file_id	fs_utils.c	/^int parse_tag_file_id(FSFileID *pval, const char *str, const char *tag)$/;"	f
parse_tag_uint64	fs_utils.c	/^int parse_tag_uint64(uint64_t *pval, const char *str, const char *tag)$/;"	f
parse_tag_version	fs_utils.c	/^int parse_tag_version(const char *str)$/;"	f
parse_time	fs_utils.c	/^int parse_time(uint32_t *psec, uint32_t *pnsec, const char **pp)$/;"	f
parse_uint32	fs_utils.c	/^int parse_uint32(uint32_t *pval, const char **pp)$/;"	f
parse_uint32_base	fs_utils.c	/^int parse_uint32_base(uint32_t *pval, const char **pp, int base)$/;"	f
parse_uint64	fs_utils.c	/^int parse_uint64(uint64_t *pval, const char **pp)$/;"	f
parse_uint64_base	fs_utils.c	/^int parse_uint64_base(uint64_t *pval, const char **pp, int base)$/;"	f
password	fs_net.c	/^    char *password;$/;"	m	struct:FSBaseURL	file:
path	fs.h	/^    uint64_t path;$/;"	m	struct:__anon55
path	fs_disk.c	/^    char *path; \/* complete path *\/$/;"	m	struct:FSFile	file:
pbkdf2_hmac_sha256	fs_wget.c	/^void pbkdf2_hmac_sha256(const uint8_t *pwd, int pwd_len,$/;"	f
pc	riscv_cpu_priv.h	/^    target_ulong pc;$/;"	m	struct:RISCVCPUState
pc	riscvsim/adaptive_predictor.h	/^    target_ulong pc; \/* Virtual address of the branch *\/$/;"	m	struct:GHTEntry
pc	riscvsim/adaptive_predictor.h	/^    target_ulong pc; \/* Virtual address of the branch *\/$/;"	m	struct:PHTEntry
pc	riscvsim/btb.h	/^    target_ulong pc;     \/* Virtual address of this branch *\/$/;"	m	struct:BtbEntry
pc	riscvsim/riscv_instruction.h	/^    target_ulong pc;$/;"	m	struct:RVInstruction
pc	riscvsim/riscv_sim_cpu.h	/^    target_ulong pc;        \/* Next PC to fetch from *\/$/;"	m	struct:RISCVSIMCPUState
pcgen	riscvsim/inorder.h	/^    CPUStage pcgen;$/;"	m	struct:INCore
pci_add_capability	pci.c	/^int pci_add_capability(PCIDevice *d, const uint8_t *buf, int size)$/;"	f
pci_bus	pci.c	/^    PCIBus *pci_bus;$/;"	m	struct:I440FXState	file:
pci_bus	virtio.h	/^    PCIBus *pci_bus;$/;"	m	struct:__anon51
pci_data_read	pci.c	/^static uint32_t pci_data_read(PCIBus *s, uint32_t addr, int size_log2)$/;"	f	file:
pci_data_write	pci.c	/^static void pci_data_write(PCIBus *s, uint32_t addr,$/;"	f	file:
pci_dev	pci.c	/^    PCIDevice *pci_dev;$/;"	m	struct:I440FXState	file:
pci_dev	vga.c	/^    PCIDevice *pci_dev;$/;"	m	struct:VGAState	file:
pci_dev	virtio.c	/^    PCIDevice *pci_dev;$/;"	m	struct:VIRTIODevice	file:
pci_device_config_read	pci.c	/^static uint32_t pci_device_config_read(PCIDevice *d, uint32_t addr,$/;"	f	file:
pci_device_config_write	pci.c	/^static void pci_device_config_write(PCIDevice *d, uint32_t addr,$/;"	f	file:
pci_device_config_write8	pci.c	/^static void pci_device_config_write8(PCIDevice *d, uint32_t addr,$/;"	f	file:
pci_device_get_devfn	pci.c	/^int pci_device_get_devfn(PCIDevice *d)$/;"	f
pci_device_get_dma_ptr	pci.c	/^uint8_t *pci_device_get_dma_ptr(PCIDevice *d, uint64_t addr, BOOL is_rw)$/;"	f
pci_device_get_irq	pci.c	/^IRQSignal *pci_device_get_irq(PCIDevice *d, unsigned int irq_num)$/;"	f
pci_device_get_mem_map	pci.c	/^PhysMemoryMap *pci_device_get_mem_map(PCIDevice *d)$/;"	f
pci_device_get_port_map	pci.c	/^PhysMemoryMap *pci_device_get_port_map(PCIDevice *d)$/;"	f
pci_device_set_config16	pci.c	/^void pci_device_set_config16(PCIDevice *d, uint8_t addr, uint16_t val)$/;"	f
pci_device_set_config8	pci.c	/^void pci_device_set_config8(PCIDevice *d, uint8_t addr, uint8_t val)$/;"	f
pci_device_set_irq	pci.c	/^static void pci_device_set_irq(void *opaque, int irq_num, int level)$/;"	f	file:
pci_register_bar	pci.c	/^void pci_register_bar(PCIDevice *d, unsigned int bar_num,$/;"	f
pci_register_device	pci.c	/^PCIDevice *pci_register_device(PCIBus *b, const char *name, int devfn,$/;"	f
pci_update_mappings	pci.c	/^static void pci_update_mappings(PCIDevice *d)$/;"	f	file:
pci_vga_init	vga.c	/^VGAState *pci_vga_init(PCIBus *bus, FBDevice *fb_dev,$/;"	f
pci_write_bar	pci.c	/^static int pci_write_bar(PCIDevice *d, uint32_t addr,$/;"	f	file:
pdest	riscvsim/riscv_instruction.h	/^    int pdest;$/;"	m	struct:RVInstruction
pending	pckbd.c	/^    uint8_t pending;$/;"	m	struct:KBDState	file:
pending_exception	riscv_cpu_priv.h	/^    int pending_exception; \/* used during MMU exception handling *\/$/;"	m	struct:RISCVCPUState
pending_tval	riscv_cpu_priv.h	/^    target_ulong pending_tval;$/;"	m	struct:RISCVCPUState
pfn_ap_aliasing_func	riscvsim/adaptive_predictor.h	/^    uint32_t (*pfn_ap_aliasing_func)(struct AdaptivePredictor *a, uint32_t hr,$/;"	m	struct:AdaptivePredictor
pfn_branch_frontend_decode_handler	riscvsim/riscv_sim_cpu.h	/^    int (*pfn_branch_frontend_decode_handler)(struct RISCVCPUState *, IMapEntry *);$/;"	m	struct:RISCVSIMCPUState
pfn_branch_frontend_probe_handler	riscvsim/riscv_sim_cpu.h	/^    void (*pfn_branch_frontend_probe_handler)(struct RISCVCPUState *,IMapEntry *);$/;"	m	struct:RISCVSIMCPUState
pfn_branch_handler	riscvsim/riscv_sim_cpu.h	/^    int (*pfn_branch_handler)(struct RISCVCPUState *, IMapEntry *);$/;"	m	struct:RISCVSIMCPUState
pfn_btb_evict_handler	riscvsim/btb.h	/^    int (*pfn_btb_evict_handler)(struct BranchTargetBuffer *b,$/;"	m	struct:BranchTargetBuffer
pfn_core_free	riscvsim/riscv_sim_cpu.h	/^    void (*pfn_core_free)(void *core);$/;"	m	struct:RISCVSIMCPUState
pfn_core_reset	riscvsim/riscv_sim_cpu.h	/^    void (*pfn_core_reset)(void *core);$/;"	m	struct:RISCVSIMCPUState
pfn_core_run	riscvsim/riscv_sim_cpu.h	/^    int (*pfn_core_run)(void *core);$/;"	m	struct:RISCVSIMCPUState
pfn_get_victim_index	riscvsim/cache.h	/^    PFN_GET_VICTIM_INDEX pfn_get_victim_index;$/;"	m	struct:Cache
pfn_incore_run_internal	riscvsim/inorder.h	/^    int (*pfn_incore_run_internal)(struct INCore *core);$/;"	m	struct:INCore
pfn_read_alloc_handler	riscvsim/cache.h	/^    PFN_READ_ALLOC_HANDLER pfn_read_alloc_handler;$/;"	m	struct:Cache
pfn_victim_evict_handler	riscvsim/cache.h	/^    PFN_VICTIM_EVICTION_HANDLER pfn_victim_evict_handler;$/;"	m	struct:Cache
pfn_write_alloc_handler	riscvsim/cache.h	/^    PFN_WRITE_ALLOC_HANDLER pfn_write_alloc_handler;$/;"	m	struct:Cache
pfn_write_handler	riscvsim/cache.h	/^    PFN_WRITE_HANDLER pfn_write_handler;$/;"	m	struct:Cache
pht	riscvsim/adaptive_predictor.h	/^    PHTEntry *pht;           \/* PHT *\/$/;"	m	struct:AdaptivePredictor
pht_index_bits	riscvsim/adaptive_predictor.h	/^    uint32_t pht_index_bits; \/* Number of lowest bits of PC required to index into PHT *\/$/;"	m	struct:AdaptivePredictor
pht_size	riscvsim/adaptive_predictor.h	/^    int pht_size;            \/* Number of entries in PHT *\/$/;"	m	struct:AdaptivePredictor
phys_mem	iomem.h	/^    uint8_t *phys_mem;$/;"	m	struct:__anon2
phys_mem_get_dirty_bits	iomem.h	/^static inline const uint32_t *phys_mem_get_dirty_bits(PhysMemoryRange *pr)$/;"	f
phys_mem_get_ram_ptr	iomem.c	/^uint8_t *phys_mem_get_ram_ptr(PhysMemoryMap *map, uint64_t paddr, BOOL is_rw)$/;"	f
phys_mem_is_dirty_bit	iomem.h	/^static inline BOOL phys_mem_is_dirty_bit(PhysMemoryRange *pr, size_t offset)$/;"	f
phys_mem_map_end	iomem.c	/^void phys_mem_map_end(PhysMemoryMap *s)$/;"	f
phys_mem_map_init	iomem.c	/^PhysMemoryMap *phys_mem_map_init(void)$/;"	f
phys_mem_range	iomem.h	/^    PhysMemoryRange phys_mem_range[PHYS_MEM_RANGE_MAX];$/;"	m	struct:PhysMemoryMap
phys_mem_reset_dirty_bit	iomem.c	/^void phys_mem_reset_dirty_bit(PhysMemoryRange *pr, size_t offset)$/;"	f
phys_mem_set_addr	iomem.c	/^void phys_mem_set_addr(PhysMemoryRange *pr, uint64_t addr, BOOL enabled)$/;"	f
phys_mem_set_dirty_bit	iomem.h	/^static inline void phys_mem_set_dirty_bit(PhysMemoryRange *pr, size_t offset)$/;"	f
pic_irq_state	pci.c	/^    uint8_t pic_irq_state[16];$/;"	m	struct:I440FXState	file:
pic_irqs	pci.c	/^    IRQSignal *pic_irqs; \/* 16 irqs *\/$/;"	m	struct:I440FXState	file:
piix3_dev	pci.c	/^    PCIDevice *piix3_dev;$/;"	m	struct:I440FXState	file:
piix3_ide_init	ide.c	/^PCIDevice *piix3_ide_init(PCIBus *pci_bus, int devfn)$/;"	f
plic_irq	riscv_machine.c	/^    IRQSignal plic_irq[32]; \/* IRQ 0 is not used *\/$/;"	m	struct:RISCVMachine	file:
plic_pending_irq	riscv_machine.c	/^    uint32_t plic_pending_irq, plic_served_irq;$/;"	m	struct:RISCVMachine	file:
plic_read	riscv_machine.c	/^static uint32_t plic_read(void *opaque, uint32_t offset, int size_log2)$/;"	f	file:
plic_served_irq	riscv_machine.c	/^    uint32_t plic_pending_irq, plic_served_irq;$/;"	m	struct:RISCVMachine	file:
plic_set_irq	riscv_machine.c	/^static void plic_set_irq(void *opaque, int irq_num, int state)$/;"	f	file:
plic_update_mip	riscv_machine.c	/^static void plic_update_mip(RISCVMachine *s)$/;"	f	file:
plic_write	riscv_machine.c	/^static void plic_write(void *opaque, uint32_t offset, uint32_t val,$/;"	f	file:
port_map	pci.c	/^    PhysMemoryMap *port_map;$/;"	m	struct:PCIBus	file:
pos	fs_wget.c	/^    int64_t pos;$/;"	m	struct:__anon21	file:
post_fd	fs_net.c	/^    FSFile *post_fd;$/;"	m	struct:CmdXHRState	file:
posted_file	fs_wget.c	/^    FSFile *posted_file;$/;"	m	struct:__anon21	file:
power_down_flag	riscv_cpu_priv.h	/^    BOOL power_down_flag;$/;"	m	struct:RISCVCPUState
pred	riscvsim/bht.h	/^    int pred;$/;"	m	struct:BhtEntry
predicted_target	riscvsim/common_core_utils.h	/^    target_ulong predicted_target;$/;"	m	struct:InstructionMapEntry
prefetch_count	block_net.c	/^    int prefetch_count;$/;"	m	struct:BlockDeviceHTTP	file:
prefetch_group_len	block_net.c	/^    int prefetch_group_len;$/;"	m	struct:BlockDeviceHTTP	file:
preload_archive_list	fs_net.c	/^    struct list_head preload_archive_list; \/* list of PreloadArchive.link *\/$/;"	m	struct:FSDeviceMem	typeref:struct:FSDeviceMem::list_head	file:
preload_list	fs_net.c	/^    struct list_head preload_list; \/* list of PreloadEntry.link *\/$/;"	m	struct:FSDeviceMem	typeref:struct:FSDeviceMem::list_head	file:
preload_parse	fs_net.c	/^static int preload_parse(FSDevice *fs, const char *fname, BOOL is_new)$/;"	f	file:
preload_parse_str	fs_net.c	/^static void preload_parse_str(FSDevice *fs1, const char *p)$/;"	f	file:
preload_parse_str_old	fs_net.c	/^static void preload_parse_str_old(FSDevice *fs1, const char *p)$/;"	f	file:
prev	list.h	/^    struct list_head *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
prev	slirp/ip.h	/^	void *next, *prev;$/;"	m	struct:qlink
print_bpu_stats	stats_display.c	/^print_bpu_stats()$/;"	f	file:
print_cache_config	riscvsim/cache.c	/^print_cache_config(const Cache *const c)$/;"	f
print_caches_stats	stats_display.c	/^print_caches_stats()$/;"	f	file:
print_exception_stats	stats_display.c	/^print_exception_stats()$/;"	f	file:
print_fu_config	riscvsim/sim_params_stats.c	/^print_fu_config(const char *fu_num_stage_param_name,$/;"	f	file:
print_header	stats_display.c	/^print_header()$/;"	f	file:
print_ins_stats	stats_display.c	/^print_ins_stats()$/;"	f	file:
print_stats	riscvsim/dramsim_wrapper.cpp	/^dramsim_wrapper::print_stats()$/;"	f	class:dramsim_wrapper
print_str	build_filelist.c	/^void print_str(FILE *f, const char *str)$/;"	f
print_target_ulong	riscv_cpu.c	/^static void print_target_ulong(target_ulong a)$/;"	f	file:
print_tlb_stats	stats_display.c	/^print_tlb_stats()$/;"	f	file:
priv	riscv_cpu_priv.h	/^    uint8_t priv; \/* see PRV_x *\/$/;"	m	struct:RISCVCPUState
proc_id	fs.h	/^    uint32_t proc_id;$/;"	m	struct:__anon57
process_iq	riscvsim/ooo_backend.c	/^process_iq(OOCore *core, IssueQueueEntry *iq, int iq_size, int max_issue_ports)$/;"	f	file:
process_lsq_entry_load	riscvsim/ooo_lsu.c	/^process_lsq_entry_load(OOCore *core, LSQEntry *lsqe)$/;"	f	file:
process_lsq_entry_store	riscvsim/ooo_lsu.c	/^process_lsq_entry_store(OOCore *core, LSQEntry *lsqe)$/;"	f	file:
props	json.h	/^    JSONProperty *props;$/;"	m	struct:JSONObject
prs1	riscvsim/riscv_instruction.h	/^    int prs1;$/;"	m	struct:RVInstruction
prs2	riscvsim/riscv_instruction.h	/^    int prs2;$/;"	m	struct:RVInstruction
prs3	riscvsim/riscv_instruction.h	/^    int prs3;$/;"	m	struct:RVInstruction
ps2_kbd_init	ps2.c	/^PS2KbdState *ps2_kbd_init(void (*update_irq)(void *, int), void *update_arg)$/;"	f
ps2_keyboard_set_translation	ps2.c	/^void ps2_keyboard_set_translation(void *opaque, int mode)$/;"	f
ps2_mouse	vmmouse.c	/^    PS2MouseState *ps2_mouse;$/;"	m	struct:VMMouseState	file:
ps2_mouse_event	ps2.c	/^void ps2_mouse_event(PS2MouseState *s,$/;"	f
ps2_mouse_init	ps2.c	/^PS2MouseState *ps2_mouse_init(void (*update_irq)(void *, int), void *update_arg)$/;"	f
ps2_mouse_send_packet	ps2.c	/^static void ps2_mouse_send_packet(PS2MouseState *s)$/;"	f	file:
ps2_put_keycode	ps2.c	/^void ps2_put_keycode(PS2KbdState *s, BOOL is_down, int keycode)$/;"	f
ps2_queue	ps2.c	/^void ps2_queue(void *opaque, int b)$/;"	f
ps2_read_data	ps2.c	/^uint32_t ps2_read_data(void *opaque)$/;"	f
ps2_reset	ps2.c	/^static void ps2_reset(void *opaque)$/;"	f	file:
ps2_reset_keyboard	ps2.c	/^static void ps2_reset_keyboard(PS2KbdState *s)$/;"	f	file:
ps2_write_keyboard	ps2.c	/^void ps2_write_keyboard(void *opaque, int val)$/;"	f
ps2_write_mouse	ps2.c	/^void ps2_write_mouse(void *opaque, int val)$/;"	f
pstrcat	cutils.c	/^char *pstrcat(char *buf, int buf_size, const char *s)$/;"	f
pstrcpy	cutils.c	/^void pstrcpy(char *buf, int buf_size, const char *str)$/;"	f
pte_rw_latency	riscvsim/memory_controller.h	/^    int pte_rw_latency;$/;"	m	struct:MemoryController
pte_rw_latency	riscvsim/sim_params_stats.h	/^    int pte_rw_latency;$/;"	m	struct:SimParams
push_insn_from_ex_to_mem	riscvsim/inorder_backend.c	/^push_insn_from_ex_to_mem(INCore *core, IMapEntry *e, CPUStage *stage)$/;"	f	file:
put_be32	cutils.h	/^static inline void put_be32(uint8_t *d, uint32_t v)$/;"	f
put_be64	cutils.h	/^static inline void put_be64(uint8_t *d, uint64_t v)$/;"	f
put_le16	cutils.h	/^static inline void put_le16(uint8_t *ptr, uint16_t v)$/;"	f
put_le32	cutils.h	/^static inline void put_le32(uint8_t *ptr, uint32_t v)$/;"	f
put_le64	cutils.h	/^static inline void put_le64(uint8_t *ptr, uint64_t v)$/;"	f
put_queue	vmmouse.c	/^static void put_queue(VMMouseState *s, uint32_t val)$/;"	f	file:
qemu_system_reset_request	pckbd.c	/^static void qemu_system_reset_request(void)$/;"	f	file:
qh_link	slirp/misc.c	/^	struct quehead *qh_link;$/;"	m	struct:quehead	typeref:struct:quehead::quehead	file:
qh_rlink	slirp/misc.c	/^	struct quehead *qh_rlink;$/;"	m	struct:quehead	typeref:struct:quehead::quehead	file:
qid	fs.h	/^    FSQID qid;$/;"	m	struct:__anon56
qlink	slirp/ip.h	/^struct qlink {$/;"	s
qlink2tcpiphdr	slirp/tcpip.h	61;"	d
quad	riscvsim/riscv_instruction.h	/^    uint32_t quad;$/;"	m	struct:RVInstruction
quehead	slirp/misc.c	/^struct quehead {$/;"	s	file:
queue	ps2.c	/^    PS2Queue queue;$/;"	m	struct:__anon43	file:
queue	virtio.c	/^    QueueState queue[MAX_QUEUE];$/;"	m	struct:VIRTIODevice	file:
queue_idx	virtio.c	/^    int queue_idx;$/;"	m	struct:__anon12	file:
queue_idx	virtio.c	/^    int queue_idx;$/;"	m	struct:__anon18	file:
queue_notify	virtio.c	/^static void queue_notify(VIRTIODevice *s, int queue_idx)$/;"	f	file:
queue_sel	virtio.c	/^    uint32_t queue_sel; \/* currently selected queue *\/$/;"	m	struct:VIRTIODevice	file:
quoted_str	fs_utils.c	/^char *quoted_str(const char *str)$/;"	f
raise_exception	riscv_cpu.c	/^static void raise_exception(RISCVCPUState *s, uint32_t cause)$/;"	f	file:
raise_exception2	riscv_cpu.c	/^static void raise_exception2(RISCVCPUState *s, uint32_t cause,$/;"	f	file:
raise_interrupt	riscv_cpu.c	/^static __exception int raise_interrupt(RISCVCPUState *s)$/;"	f	file:
ram_size	machine.h	/^    uint64_t ram_size;$/;"	m	struct:__anon32
ram_size	riscv_machine.c	/^    uint64_t ram_size;$/;"	m	struct:RISCVMachine	file:
rand_evict	riscvsim/btb.h	/^    int rand_evict;    \/* If non-zero, uses random eviction policy for BTB, instead of LRU *\/$/;"	m	struct:BranchTargetBuffer
ras	riscvsim/bpu.h	/^    Ras *ras;$/;"	m	struct:BranchPredUnit
ras_empty	riscvsim/ras.c	/^ras_empty(Ras *ras)$/;"	f
ras_flush	riscvsim/ras.c	/^ras_flush(Ras *ras)$/;"	f
ras_free	riscvsim/ras.c	/^ras_free(Ras **ras)$/;"	f
ras_init	riscvsim/ras.c	/^ras_init(const SimParams *p)$/;"	f
ras_pop	riscvsim/ras.c	/^ras_pop(Ras *ras)$/;"	f
ras_push	riscvsim/ras.c	/^ras_push(Ras *ras, target_ulong pc)$/;"	f
ras_size	riscvsim/sim_params_stats.h	/^    int ras_size;$/;"	m	struct:SimParams
rcon	aes.c	/^static const u32 rcon[] = {$/;"	v	file:
rcv_adv	slirp/tcp_var.h	/^	tcp_seq	rcv_adv;		\/* advertised window *\/$/;"	m	struct:tcpcb
rcv_nxt	slirp/tcp_var.h	/^	tcp_seq	rcv_nxt;		\/* receive next *\/$/;"	m	struct:tcpcb
rcv_scale	slirp/tcp_var.h	/^	u_char	rcv_scale;		\/* window scaling for recv window *\/$/;"	m	struct:tcpcb
rcv_up	slirp/tcp_var.h	/^	tcp_seq	rcv_up;			\/* receive urgent pointer *\/$/;"	m	struct:tcpcb
rcv_wnd	slirp/tcp_var.h	/^	uint32_t rcv_wnd;		\/* receive window *\/$/;"	m	struct:tcpcb
rd	riscvsim/common_core_utils.h	/^    int rd;$/;"	m	struct:DataFWDLatch
rd	riscvsim/riscv_instruction.h	/^    uint32_t rd;$/;"	m	struct:RVInstruction
rd_key	aes.h	/^    uint32_t rd_key[4 *(AES_MAXNR + 1)];$/;"	m	struct:aes_key_st
read_allocate_handler	riscvsim/cache.c	/^read_allocate_handler(const Cache *c, target_ulong paddr, int bytes_to_read,$/;"	f	file:
read_async	virtio.h	/^    int (*read_async)(BlockDevice *bs,$/;"	m	struct:BlockDevice
read_cb	fs_wget.c	/^    WGetReadCallback *read_cb;$/;"	m	struct:XHRState	file:
read_cb	riscvsim/dramsim_wrapper.h	/^    TransactionCompleteCB *read_cb;$/;"	m	class:dramsim_wrapper
read_complete	riscvsim/dramsim_wrapper.cpp	/^dramsim_wrapper::read_complete(unsigned id, uint64_t addr, uint64_t clock_cycle)$/;"	f	class:dramsim_wrapper
read_complete	riscvsim/memory_controller.c	/^read_complete(MemoryController *m, target_ulong addr)$/;"	f	file:
read_data	virtio.h	/^    int (*read_data)(void *opaque, uint8_t *buf, int len);$/;"	m	struct:__anon52
read_data	vmmouse.c	/^static void read_data(VMMouseState *s, uint32_t *regs, int size)$/;"	f	file:
read_data_internal	riscvsim/cache.c	/^read_data_internal(const Cache *c, target_ulong paddr, int bytes_to_read,$/;"	f	file:
read_fp_operand	riscvsim/inorder_frontend.c	/^read_fp_operand(INCore *core, int has_src, int *read_rs, int rs,$/;"	f	file:
read_fp_operand	riscvsim/ooo_backend.c	/^read_fp_operand(OOCore *core, int has_src, int *read_src, int arch_src,$/;"	f	file:
read_fp_operand_from_rob_slot	riscvsim/ooo.c	/^read_fp_operand_from_rob_slot(OOCore *core, IMapEntry *e, int arch_src,$/;"	f
read_from_rob	riscvsim/ooo.h	/^    int read_from_rob;$/;"	m	struct:RenameTableEntry
read_func	iomem.h	/^    DeviceReadFunc *read_func;$/;"	m	struct:__anon2
read_int_operand	riscvsim/inorder_frontend.c	/^read_int_operand(INCore *core, int has_src, int *read_rs, int rs,$/;"	f	file:
read_int_operand	riscvsim/ooo_backend.c	/^read_int_operand(OOCore *core, int has_src, int *read_src, int arch_src,$/;"	f	file:
read_int_operand_from_rob_slot	riscvsim/ooo.c	/^read_int_operand_from_rob_slot(OOCore *core, IMapEntry *e, int arch_src,$/;"	f
read_latency	riscvsim/cache.h	/^    int read_latency;$/;"	m	struct:Cache
read_miss_cnt	riscvsim/cache.h	/^    uint64_t read_miss_cnt;$/;"	m	struct:CacheStats
read_no_allocate_handler	riscvsim/cache.c	/^read_no_allocate_handler(const Cache *c, target_ulong paddr, int bytes_to_read,$/;"	f	file:
read_pos	fs_wget.c	/^    int64_t read_pos;$/;"	m	struct:__anon21	file:
read_rs1	riscvsim/common_core_utils.h	/^    int read_rs1;$/;"	m	struct:InstructionMapEntry
read_rs2	riscvsim/common_core_utils.h	/^    int read_rs2;$/;"	m	struct:InstructionMapEntry
read_rs3	riscvsim/common_core_utils.h	/^    int read_rs3;$/;"	m	struct:InstructionMapEntry
ready	riscvsim/ooo.h	/^    int ready;$/;"	m	struct:IssueQueueEntry
ready	riscvsim/ooo.h	/^    int ready;$/;"	m	struct:LSQEntry
ready	riscvsim/ooo.h	/^    int ready;$/;"	m	struct:ROBEntry
ready	virtio.c	/^    uint32_t ready; \/* 0 or 1 *\/$/;"	m	struct:__anon10	file:
reallocate_active_imap_entries	riscvsim/ooo_branch.c	/^reallocate_active_imap_entries(OOCore *core)$/;"	f	file:
rear	riscvsim/circular_queue.h	/^    int rear;$/;"	m	struct:CircularQueue
ref_count	fs_net.c	/^    int ref_count;$/;"	m	struct:FSBaseURL	file:
refcount	fs_net.c	/^    int32_t refcount;$/;"	m	struct:FSINode	file:
refresh	machine.h	/^    void (*refresh)(struct FBDevice *fb_dev,$/;"	m	struct:FBDevice
reg	fs_net.c	/^        } reg;$/;"	m	union:FSINode::__anon60	typeref:struct:FSINode::__anon60::__anon61	file:
reg	riscv_cpu_priv.h	/^    target_ulong reg[32];$/;"	m	struct:RISCVCPUState
reg	riscvsim/riscv_ins_str_creator.c	/^static const char reg[][6] = {$/;"	v	file:
reg_name	riscv_cpu.c	/^static char *reg_name[32] = {$/;"	v	file:
register_ram	iomem.h	/^    PhysMemoryRange *(*register_ram)(PhysMemoryMap *s, uint64_t addr,$/;"	m	struct:PhysMemoryMap
register_ram_entry	iomem.c	/^PhysMemoryRange *register_ram_entry(PhysMemoryMap *s, uint64_t addr,$/;"	f
remque	slirp/misc.c	/^remque(void *a)$/;"	f
remque	slirp/slirp.h	139;"	d
renamed	riscvsim/common_core_utils.h	/^    int renamed;$/;"	m	struct:InstructionMapEntry
reply_buf	fs_net.c	/^    uint8_t reply_buf[FS_CMD_REPLY_LEN_MAX];$/;"	m	struct:__anon67	file:
reply_len	fs_net.c	/^    int reply_len;$/;"	m	struct:__anon67	file:
req	fs_net.c	/^    FSCMDRequest *req;$/;"	m	struct:FSFile	file:
req	virtio.c	/^    BlockRequest req; \/* request in progress *\/$/;"	m	struct:VIRTIOBlockDevice	file:
req_addr	riscvsim/memory_controller_utils.h	/^    target_ulong req_addr;$/;"	m	struct:PendingMemAccessEntry
req_fd	fs_net.c	/^    FSFile *req_fd;$/;"	m	struct:CmdXHRState	file:
req_in_progress	virtio.c	/^    BOOL req_in_progress;$/;"	m	struct:VIRTIO9PDevice	file:
req_in_progress	virtio.c	/^    BOOL req_in_progress;$/;"	m	struct:VIRTIOBlockDevice	file:
req_nb_sectors	ide.c	/^    int req_nb_sectors;$/;"	m	struct:IDEState	file:
req_pte	riscvsim/memory_controller_utils.h	/^    target_ulong req_pte;$/;"	m	struct:PendingMemAccessEntry
request_addr	slirp/bootp.c	/^static BOOTPClient *request_addr(Slirp *slirp, const struct in_addr *paddr,$/;"	f	file:
request_r_scale	slirp/tcp_var.h	/^	u_char	request_r_scale;	\/* pending window scaling *\/$/;"	m	struct:tcpcb
requested_s_scale	slirp/tcp_var.h	/^	u_char	requested_s_scale;$/;"	m	struct:tcpcb
reset_cache_stats	riscvsim/cache.c	/^reset_cache_stats(Cache *c)$/;"	f
reset_imap	riscvsim/common_core_utils.c	/^reset_imap(IMapEntry *imap)$/;"	f
resize_pending	temu.c	/^    BOOL resize_pending;$/;"	m	struct:__anon33	file:
restore_cpu_frontend	riscvsim/ooo_branch.c	/^restore_cpu_frontend(OOCore *core, IMapEntry *e)$/;"	f	file:
restore_fu	riscvsim/ooo_branch.c	/^restore_fu(CPUStage *fu, int stages, uint64_t tag, IMapEntry *imap)$/;"	f	file:
restore_iq	riscvsim/ooo_branch.c	/^restore_iq(IssueQueueEntry *iq, int size, uint64_t tag)$/;"	f	file:
restore_lsq	riscvsim/ooo_branch.c	/^restore_lsq(OOCore *core, uint64_t tag)$/;"	f	file:
restore_lsu	riscvsim/ooo_branch.c	/^restore_lsu(OOCore *core, uint64_t tag)$/;"	f	file:
restore_rob	riscvsim/ooo_branch.c	/^restore_rob(OOCore *core, IMapEntry *e, uint64_t tag)$/;"	f	file:
restore_rob_entry	riscvsim/ooo_branch.c	/^restore_rob_entry(OOCore *core, ROBEntry *rbe, uint64_t tag)$/;"	f	file:
restricted	slirp/slirp.h	/^    int restricted;$/;"	m	struct:Slirp
return_to_sim	riscv_cpu_priv.h	/^    int return_to_sim;$/;"	m	struct:RISCVCPUState
rfc1533_cookie	slirp/bootp.c	/^static const uint8_t rfc1533_cookie[] = { RFC1533_COOKIE };$/;"	v	file:
riscv_build_fdt	riscv_machine.c	/^static int riscv_build_fdt(RISCVMachine *m, uint8_t *dst,$/;"	f	file:
riscv_cpu_end	riscv_cpu.h	/^    void (*riscv_cpu_end)(RISCVCPUState *s);$/;"	m	struct:__anon25
riscv_cpu_end	riscv_cpu.h	/^static inline void riscv_cpu_end(RISCVCPUState *s)$/;"	f
riscv_cpu_flush_tlb_write_range_ram	riscv_cpu.h	/^    void (*riscv_cpu_flush_tlb_write_range_ram)(RISCVCPUState *s,$/;"	m	struct:__anon25
riscv_cpu_flush_tlb_write_range_ram	riscv_cpu.h	/^static inline void riscv_cpu_flush_tlb_write_range_ram(RISCVCPUState *s,$/;"	f
riscv_cpu_get_cycles	riscv_cpu.h	/^    uint64_t (*riscv_cpu_get_cycles)(RISCVCPUState *s);$/;"	m	struct:__anon25
riscv_cpu_get_cycles	riscv_cpu.h	/^static inline uint64_t riscv_cpu_get_cycles(RISCVCPUState *s)$/;"	f
riscv_cpu_get_mip	riscv_cpu.h	/^    uint32_t (*riscv_cpu_get_mip)(RISCVCPUState *s);$/;"	m	struct:__anon25
riscv_cpu_get_mip	riscv_cpu.h	/^static inline uint32_t riscv_cpu_get_mip(RISCVCPUState *s)$/;"	f
riscv_cpu_get_misa	riscv_cpu.h	/^    uint32_t (*riscv_cpu_get_misa)(RISCVCPUState *s);$/;"	m	struct:__anon25
riscv_cpu_get_misa	riscv_cpu.h	/^static inline uint32_t riscv_cpu_get_misa(RISCVCPUState *s)$/;"	f
riscv_cpu_get_power_down	riscv_cpu.h	/^    BOOL (*riscv_cpu_get_power_down)(RISCVCPUState *s);$/;"	m	struct:__anon25
riscv_cpu_get_power_down	riscv_cpu.h	/^static inline BOOL riscv_cpu_get_power_down(RISCVCPUState *s)$/;"	f
riscv_cpu_global_state	riscv_cpu.c	/^static RISCVCPUState riscv_cpu_global_state;$/;"	v	file:
riscv_cpu_init	riscv_cpu.c	/^RISCVCPUState *riscv_cpu_init(PhysMemoryMap *mem_map, int max_xlen, const SimParams *p)$/;"	f
riscv_cpu_init	riscv_cpu.h	/^    RISCVCPUState *(*riscv_cpu_init)(PhysMemoryMap *mem_map, const SimParams *p);$/;"	m	struct:__anon25
riscv_cpu_interp	riscv_cpu.h	/^    void (*riscv_cpu_interp)(RISCVCPUState *s, int n_cycles);$/;"	m	struct:__anon25
riscv_cpu_interp	riscv_cpu.h	/^static inline void riscv_cpu_interp(RISCVCPUState *s, int n_cycles)$/;"	f
riscv_cpu_reset_mip	riscv_cpu.h	/^    void (*riscv_cpu_reset_mip)(RISCVCPUState *s, uint32_t mask);$/;"	m	struct:__anon25
riscv_cpu_reset_mip	riscv_cpu.h	/^static inline void riscv_cpu_reset_mip(RISCVCPUState *s, uint32_t mask)$/;"	f
riscv_cpu_set_mip	riscv_cpu.h	/^    void (*riscv_cpu_set_mip)(RISCVCPUState *s, uint32_t mask);$/;"	m	struct:__anon25
riscv_cpu_set_mip	riscv_cpu.h	/^static inline void riscv_cpu_set_mip(RISCVCPUState *s, uint32_t mask)$/;"	f
riscv_flush_tlb_write_range	riscv_machine.c	/^static void riscv_flush_tlb_write_range(void *opaque, uint8_t *ram_addr,$/;"	f	file:
riscv_machine_class	riscv_machine.c	/^const VirtMachineClass riscv_machine_class = {$/;"	v
riscv_machine_end	riscv_machine.c	/^static void riscv_machine_end(VirtMachine *s1)$/;"	f	file:
riscv_machine_get_sleep_duration	riscv_machine.c	/^static int riscv_machine_get_sleep_duration(VirtMachine *s1, int delay)$/;"	f	file:
riscv_machine_init	riscv_machine.c	/^static VirtMachine *riscv_machine_init(const VirtMachineParams *p)$/;"	f	file:
riscv_machine_interp	riscv_machine.c	/^static void riscv_machine_interp(VirtMachine *s1, int max_exec_cycle)$/;"	f	file:
riscv_machine_set_defaults	riscv_machine.c	/^static void riscv_machine_set_defaults(VirtMachineParams *p)$/;"	f	file:
riscv_sim_cpu_free	riscvsim/riscv_sim_cpu.c	/^riscv_sim_cpu_free(RISCVSIMCPUState **simcpu)$/;"	f
riscv_sim_cpu_init	riscvsim/riscv_sim_cpu.c	/^riscv_sim_cpu_init(const SimParams *p, struct RISCVCPUState *s)$/;"	f
riscv_sim_cpu_reset	riscvsim/riscv_sim_cpu.c	/^riscv_sim_cpu_reset(RISCVSIMCPUState *simcpu)$/;"	f
riscv_sim_cpu_run	riscvsim/riscv_sim_cpu.c	/^riscv_sim_cpu_run(RISCVSIMCPUState *simcpu)$/;"	f
riscv_vm_mouse_is_absolute	riscv_machine.c	/^static BOOL riscv_vm_mouse_is_absolute(VirtMachine *s)$/;"	f	file:
riscv_vm_send_key_event	riscv_machine.c	/^static void riscv_vm_send_key_event(VirtMachine *s1, BOOL is_down,$/;"	f	file:
riscv_vm_send_mouse_event	riscv_machine.c	/^static void riscv_vm_send_mouse_event(VirtMachine *s1, int dx, int dy, int dz,$/;"	f	file:
rm	riscv_cpu_fp_template.h	/^                rm = get_insn_rm(s, rm);$/;"	v
rm	riscvsim/riscv_instruction.h	/^    uint32_t rm;$/;"	m	struct:RVInstruction
rob	riscvsim/ooo.h	/^    ROB rob;                  \/* Reorder buffer *\/$/;"	m	struct:OOCore
rob_can_commit	riscvsim/ooo_backend.c	/^rob_can_commit(ROB *rob)$/;"	f	file:
rob_commit_ports	riscvsim/sim_params_stats.h	/^    int rob_commit_ports;$/;"	m	struct:SimParams
rob_entry_committed	riscvsim/ooo.c	/^rob_entry_committed(ROB *rob, int src_idx, int current_idx)$/;"	f
rob_entry_committed_after_rollback	riscvsim/ooo_branch.c	/^rob_entry_committed_after_rollback(ROB *rob, int src_idx)$/;"	f	file:
rob_entry_create	riscvsim/ooo_frontend.c	/^rob_entry_create(ROB *rob, IMapEntry *e, int rob_entry_status)$/;"	f	file:
rob_idx	riscvsim/common_core_utils.h	/^    int rob_idx;$/;"	m	struct:InstructionMapEntry
rob_idx	riscvsim/ooo.h	/^    int rob_idx;$/;"	m	struct:RenameTableEntry
rob_size	riscvsim/sim_params_stats.h	/^    int rob_size;$/;"	m	struct:SimParams
rollback_speculated_cpu_state	riscvsim/ooo_branch.c	/^rollback_speculated_cpu_state(OOCore *core, IMapEntry *e)$/;"	f	file:
rom_range	vga.c	/^    PhysMemoryRange *rom_range;$/;"	m	struct:VGAState	file:
root_fd	fs_net.c	/^    FSFile *root_fd;$/;"	m	struct:CmdXHRState	file:
root_fd	fs_net.c	/^    FSFile *root_fd;$/;"	m	struct:__anon73	file:
root_inode	fs_net.c	/^    FSINode *root_inode;$/;"	m	struct:FSDeviceMem	file:
root_path	fs_disk.c	/^    char *root_path;$/;"	m	struct:__anon74	file:
round_pack_sf	softfp_template.h	/^static F_UINT round_pack_sf(uint32_t a_sign, int a_exp, F_UINT a_mant,$/;"	f
round_pack_sf	softfp_template.h	1114;"	d
round_pack_sf	softfp_template.h	59;"	d
rounds	aes.h	/^    int rounds;$/;"	m	struct:aes_key_st
rptr	ps2.c	/^    int rptr, wptr, count;$/;"	m	struct:__anon42	file:
rs1	riscvsim/riscv_instruction.h	/^    uint32_t rs1;$/;"	m	struct:RVInstruction
rs1_val	riscvsim/riscv_instruction.h	/^    uint64_t rs1_val;$/;"	m	struct:RVInstruction
rs2	riscvsim/riscv_instruction.h	/^    uint32_t rs2;$/;"	m	struct:RVInstruction
rs2_val	riscvsim/riscv_instruction.h	/^    uint64_t rs2_val;$/;"	m	struct:RVInstruction
rs3	riscvsim/riscv_instruction.h	/^    uint32_t rs3;$/;"	m	struct:RVInstruction
rs3_val	riscvsim/riscv_instruction.h	/^    uint64_t rs3_val;$/;"	m	struct:RVInstruction
rshift_rnd	softfp_template.h	/^static F_UINT rshift_rnd(F_UINT a, int d)$/;"	f
rshift_rnd	softfp_template.h	1113;"	d
rshift_rnd	softfp_template.h	58;"	d
rtc_get_real_time	riscv_machine.c	/^static uint64_t rtc_get_real_time(RISCVMachine *s)$/;"	f	file:
rtc_get_time	riscv_machine.c	/^static uint64_t rtc_get_time(RISCVMachine *m)$/;"	f	file:
rtc_local_time	machine.h	/^    BOOL rtc_local_time;$/;"	m	struct:__anon32
rtc_real_time	machine.h	/^    BOOL rtc_real_time;$/;"	m	struct:__anon32
rtc_real_time	riscv_machine.c	/^    BOOL rtc_real_time;$/;"	m	struct:RISCVMachine	file:
rtc_start_time	riscv_machine.c	/^    uint64_t rtc_start_time;$/;"	m	struct:RISCVMachine	file:
s	slirp/socket.h	/^  int s;                           \/* The actual socket *\/$/;"	m	struct:socket
s	stats_display.c	/^static SimStats *s;$/;"	v	file:
satp	riscv_cpu_priv.h	/^    uint32_t satp;$/;"	m	struct:RISCVCPUState
satp	riscv_cpu_priv.h	/^    uint64_t satp; \/* currently 64 bit physical addresses max *\/$/;"	m	struct:RISCVCPUState
sb_cc	slirp/sbuf.h	/^	u_int	sb_cc;		\/* actual chars in buffer *\/$/;"	m	struct:sbuf
sb_data	slirp/sbuf.h	/^	char	*sb_data;	\/* Actual data *\/$/;"	m	struct:sbuf
sb_datalen	slirp/sbuf.h	/^	u_int	sb_datalen;	\/* Length of data  *\/$/;"	m	struct:sbuf
sb_rptr	slirp/sbuf.h	/^	char	*sb_rptr;	\/* read pointer. points to where the next$/;"	m	struct:sbuf
sb_wptr	slirp/sbuf.h	/^	char	*sb_wptr;	\/* write pointer. points to where the next$/;"	m	struct:sbuf
sbappend	slirp/sbuf.c	/^sbappend(struct socket *so, struct mbuf *m)$/;"	f
sbappendsb	slirp/sbuf.c	/^sbappendsb(struct sbuf *sb, struct mbuf *m)$/;"	f	file:
sbcopy	slirp/sbuf.c	/^sbcopy(struct sbuf *sb, int off, int len, char *to)$/;"	f
sbdrop	slirp/sbuf.c	/^sbdrop(struct sbuf *sb, int num)$/;"	f
sbflush	slirp/sbuf.h	11;"	d
sbfree	slirp/sbuf.c	/^sbfree(struct sbuf *sb)$/;"	f
sbreserve	slirp/sbuf.c	/^sbreserve(struct sbuf *sb, int size)$/;"	f
sbspace	slirp/sbuf.h	12;"	d
sbuf	slirp/sbuf.h	/^struct sbuf {$/;"	s
scan_dir	build_filelist.c	/^void scan_dir(ScanState *s, const char *path)$/;"	f
scan_enabled	ps2.c	/^    int scan_enabled;$/;"	m	struct:PS2KbdState	file:
scause	riscv_cpu_priv.h	/^    target_ulong scause;$/;"	m	struct:RISCVCPUState
scounteren	riscv_cpu_priv.h	/^    uint32_t scounteren;$/;"	m	struct:RISCVCPUState
screen	sdl.c	/^static SDL_Surface *screen;$/;"	v	file:
screen_height	sdl.c	/^static int screen_width, screen_height, fb_width, fb_height, fb_stride;$/;"	v	file:
screen_width	sdl.c	/^static int screen_width, screen_height, fb_width, fb_height, fb_stride;$/;"	v	file:
sdl_cursor_hidden	sdl.c	/^static SDL_Cursor *sdl_cursor_hidden;$/;"	v	file:
sdl_get_keycode	sdl.c	/^static int sdl_get_keycode(const SDL_KeyboardEvent *ev)$/;"	f	file:
sdl_handle_key_event	sdl.c	/^static void sdl_handle_key_event(const SDL_KeyboardEvent *ev, VirtMachine *m)$/;"	f	file:
sdl_handle_mouse_button_event	sdl.c	/^static void sdl_handle_mouse_button_event(const SDL_Event *ev, VirtMachine *m)$/;"	f	file:
sdl_handle_mouse_motion_event	sdl.c	/^static void sdl_handle_mouse_motion_event(const SDL_Event *ev, VirtMachine *m)$/;"	f	file:
sdl_hide_cursor	sdl.c	/^static void sdl_hide_cursor(void)$/;"	f	file:
sdl_init	sdl.c	/^void sdl_init(int width, int height)$/;"	f
sdl_refresh	sdl.c	/^void sdl_refresh(VirtMachine *m)$/;"	f
sdl_reset_keys	sdl.c	/^static void sdl_reset_keys(VirtMachine *m)$/;"	f	file:
sdl_send_mouse_event	sdl.c	/^static void sdl_send_mouse_event(VirtMachine *m, int x1, int y1,$/;"	f	file:
sdl_update	sdl.c	/^static void sdl_update(FBDevice *fb_dev, void *opaque,$/;"	f	file:
sdl_update_fb_surface	sdl.c	/^static void sdl_update_fb_surface(FBDevice *fb_dev)$/;"	f	file:
sector	ide.c	/^    uint8_t sector;$/;"	m	struct:IDEState	file:
sector_count	block_net.c	/^    int sector_index, sector_count;$/;"	m	struct:BlockDeviceHTTP	file:
sector_index	block_net.c	/^    int sector_index, sector_count;$/;"	m	struct:BlockDeviceHTTP	file:
sector_num	block_net.c	/^    uint64_t sector_num;$/;"	m	struct:BlockDeviceHTTP	file:
sector_num	virtio.c	/^    uint64_t sector_num;$/;"	m	struct:__anon13	file:
sector_table	temu.c	/^    uint8_t **sector_table;$/;"	m	struct:BlockDeviceFile	file:
sectors	ide.c	/^    int cylinders, heads, sectors;$/;"	m	struct:IDEState	file:
sectors_per_cluster	block_net.c	/^    int sectors_per_cluster; \/* power of two *\/$/;"	m	struct:BlockDeviceHTTP	file:
seg_next	slirp/tcp_var.h	/^	struct tcpiphdr *seg_next;	\/* sequencing queue *\/$/;"	m	struct:tcpcb	typeref:struct:tcpcb::tcpiphdr
seg_prev	slirp/tcp_var.h	/^	struct tcpiphdr *seg_prev;$/;"	m	struct:tcpcb	typeref:struct:tcpcb::tcpiphdr
select	ide.c	/^    uint8_t select;$/;"	m	struct:IDEState	file:
select_fill	virtio.h	/^    void (*select_fill)(EthernetDevice *net, int *pfd_max,$/;"	m	struct:EthernetDevice
select_filled	temu.c	/^    BOOL select_filled;$/;"	m	struct:__anon35	file:
select_poll	virtio.h	/^    void (*select_poll)(EthernetDevice *net, $/;"	m	struct:EthernetDevice
sepc	riscv_cpu_priv.h	/^    target_ulong sepc;$/;"	m	struct:RISCVCPUState
set_bit	virtio.c	/^static void set_bit(uint8_t *tab, int k)$/;"	f	file:
set_bits	riscvsim/btb.h	/^    uint32_t set_bits; \/* Number of lowest bits of PC required to index into a set *\/$/;"	m	struct:BranchTargetBuffer
set_bits	riscvsim/cache.h	/^    int set_bits;$/;"	m	struct:Cache
set_branch_str	riscvsim/riscv_ins_str_creator.c	/^set_branch_str(RVInstruction *i)$/;"	f	file:
set_csr_str	riscvsim/riscv_ins_str_creator.c	/^set_csr_str(RVInstruction *i)$/;"	f	file:
set_exception_state	riscvsim/common_core_utils.c	/^set_exception_state(RISCVCPUState *s, const IMapEntry *e)$/;"	f
set_ext_c_q0_str	riscvsim/riscv_ins_str_creator.c	/^set_ext_c_q0_str(RVInstruction *i)$/;"	f	file:
set_ext_c_q1_str	riscvsim/riscv_ins_str_creator.c	/^set_ext_c_q1_str(RVInstruction *i)$/;"	f	file:
set_ext_c_q2_str	riscvsim/riscv_ins_str_creator.c	/^set_ext_c_q2_str(RVInstruction *i)$/;"	f	file:
set_ext_c_str	riscvsim/riscv_ins_str_creator.c	/^set_ext_c_str(RVInstruction *i)$/;"	f	file:
set_fence_str	riscvsim/riscv_ins_str_creator.c	/^set_fence_str(RVInstruction *i)$/;"	f	file:
set_frm	riscv_cpu.c	/^static void set_frm(RISCVCPUState *s, unsigned int val)$/;"	f	file:
set_fs	riscvsim/riscv_instruction.h	/^    int set_fs;$/;"	m	struct:RVInstruction
set_high32	virtio.c	/^static void set_high32(virtio_phys_addr_t *paddr, uint32_t val)$/;"	f	file:
set_irq	iomem.h	/^    SetIRQFunc *set_irq;$/;"	m	struct:__anon3
set_irq	iomem.h	/^static inline void set_irq(IRQSignal *irq, int level)$/;"	f
set_load_str	riscvsim/riscv_ins_str_creator.c	/^set_load_str(RVInstruction *i)$/;"	f	file:
set_low32	virtio.c	/^static void set_low32(virtio_phys_addr_t *paddr, uint32_t val)$/;"	f	file:
set_max_latency_for_non_pipe_fu	riscvsim/common_core_utils.c	/^set_max_latency_for_non_pipe_fu(RISCVCPUState *s, int fu_type, IMapEntry *e)$/;"	f
set_mstatus	riscv_cpu.c	/^static void set_mstatus(RISCVCPUState *s, target_ulong val)$/;"	f	file:
set_op_32_str	riscvsim/riscv_ins_str_creator.c	/^set_op_32_str(RVInstruction *i)$/;"	f	file:
set_op_fu	riscvsim/riscv_isa_decoder.c	/^set_op_fu(RVInstruction *i)$/;"	f	file:
set_op_imm_32_str	riscvsim/riscv_ins_str_creator.c	/^set_op_imm_32_str(RVInstruction *i)$/;"	f	file:
set_op_imm_str	riscvsim/riscv_ins_str_creator.c	/^set_op_imm_str(RVInstruction *i)$/;"	f	file:
set_op_str	riscvsim/riscv_ins_str_creator.c	/^set_op_str(RVInstruction *i)$/;"	f	file:
set_priv	riscv_cpu.c	/^static void set_priv(RISCVCPUState *s, int priv)$/;"	f	file:
set_ram_addr	iomem.h	/^    void (*set_ram_addr)(PhysMemoryMap *s, PhysMemoryRange *pr, uint64_t addr,$/;"	m	struct:PhysMemoryMap
set_store_str	riscvsim/riscv_ins_str_creator.c	/^set_store_str(RVInstruction *i)$/;"	f	file:
set_timer_exception_state	riscvsim/common_core_utils.c	/^set_timer_exception_state(RISCVCPUState *s, const IMapEntry *e)$/;"	f
set_waw_lock_fp_dest	riscvsim/inorder_frontend.c	/^set_waw_lock_fp_dest(RISCVCPUState *s, CPUStage *stage, int rd)$/;"	f	file:
set_waw_lock_int_dest	riscvsim/inorder_frontend.c	/^set_waw_lock_int_dest(RISCVCPUState *s, CPUStage *stage, int rd)$/;"	f	file:
sets	riscvsim/btb.h	/^    int sets;          \/* Number of BTB sets *\/$/;"	m	struct:BranchTargetBuffer
setup_connection	stats_display.c	/^setup_connection()$/;"	f	file:
setup_sim_trace_pkt	riscvsim/common_core_utils.c	/^setup_sim_trace_pkt(RISCVCPUState *s, IMapEntry *e)$/;"	f
sext	riscv_cpu.c	/^static inline int32_t sext(int32_t val, int n)$/;"	f	file:
sextc	riscvsim/riscv_isa_decoder.c	/^sextc(int32_t val, int n)$/;"	f	file:
sfloat128	softfp.h	/^typedef uint128_t sfloat128;$/;"	t
sfloat32	softfp.h	/^typedef uint32_t sfloat32;$/;"	t
sfloat64	softfp.h	/^typedef uint64_t sfloat64;$/;"	t
sha256_compress	sha256.c	/^static int sha256_compress(hash_state * md, unsigned char *buf)$/;"	f	file:
sha256_compress	sha256.c	/^static void sha256_compress(SHA256_CTX *s, unsigned char *buf)$/;"	f	file:
sim_end	riscv_cpu_priv.h	/^    struct timespec sim_start, sim_end; \/* to measure simulation time *\/$/;"	m	struct:RISCVCPUState	typeref:struct:RISCVCPUState::
sim_epc	riscv_cpu_priv.h	/^    target_ulong sim_epc;$/;"	m	struct:RISCVCPUState
sim_epc_str	riscv_cpu_priv.h	/^    char sim_epc_str[RISCV_INS_STR_MAX_LENGTH];$/;"	m	struct:RISCVCPUState
sim_exception	riscv_cpu_priv.h	/^    int sim_exception;$/;"	m	struct:RISCVCPUState
sim_exception_cause	riscv_cpu_priv.h	/^    int sim_exception_cause;$/;"	m	struct:RISCVCPUState
sim_exception_ins	riscv_cpu_priv.h	/^    uint32_t sim_exception_ins;$/;"	m	struct:RISCVCPUState
sim_exception_stage	riscv_cpu_priv.h	/^    int sim_exception_stage;$/;"	m	struct:RISCVCPUState
sim_n_cycles	riscv_cpu_priv.h	/^    int32_t sim_n_cycles; \/* only used inside the CPU simulator loop *\/$/;"	m	struct:RISCVCPUState
sim_param_status	riscvsim/sim_params_stats.c	/^const char *sim_param_status[] = {"false", "true"};$/;"	v
sim_params	machine.h	/^    SimParams *sim_params;$/;"	m	struct:__anon32
sim_params	riscv_cpu_priv.h	/^    SimParams *sim_params;$/;"	m	struct:RISCVCPUState
sim_params_free	riscvsim/sim_params_stats.c	/^sim_params_free(SimParams *p)$/;"	f
sim_params_init	riscvsim/sim_params_stats.c	/^sim_params_init()$/;"	f
sim_params_print	riscvsim/sim_params_stats.c	/^sim_params_print(const SimParams *p)$/;"	f
sim_params_validate	riscvsim/sim_params_stats.c	/^sim_params_validate(const SimParams *p)$/;"	f
sim_print_exp_trace	riscvsim/common_core_utils.c	/^sim_print_exp_trace(struct RISCVCPUState *s)$/;"	f
sim_print_ins_trace	riscvsim/common_core_utils.c	/^sim_print_ins_trace(struct RISCVCPUState *s)$/;"	f
sim_start	riscv_cpu_priv.h	/^    struct timespec sim_start, sim_end; \/* to measure simulation time *\/$/;"	m	struct:RISCVCPUState	typeref:struct:RISCVCPUState::timespec
sim_stats_path	riscvsim/sim_params_stats.h	/^    char *sim_stats_path;$/;"	m	struct:SimParams
sim_stats_print	riscvsim/sim_params_stats.c	/^sim_stats_print(SimStats *s, const char *pathname)$/;"	f
sim_stats_reset	riscvsim/sim_params_stats.c	/^sim_stats_reset(SimStats *s)$/;"	f
sim_trace	riscv_cpu_priv.h	/^    FILE* sim_trace;$/;"	m	struct:RISCVCPUState
sim_trace_file	riscvsim/sim_params_stats.h	/^    char *sim_trace_file;$/;"	m	struct:SimParams
sim_trace_pkt	riscvsim/riscv_sim_cpu.h	/^    SimTracePacket sim_trace_pkt; \/* Used to dump simulation trace *\/$/;"	m	struct:RISCVSIMCPUState
simcpu	riscv_cpu_priv.h	/^    RISCVSIMCPUState *simcpu;$/;"	m	struct:RISCVCPUState
simcpu	riscvsim/inorder.h	/^    struct RISCVSIMCPUState *simcpu; \/* Pointer to parent *\/$/;"	m	struct:INCore	typeref:struct:INCore::RISCVSIMCPUState
simcpu	riscvsim/ooo.h	/^    struct RISCVSIMCPUState *simcpu; \/* Pointer to parent *\/$/;"	m	struct:OOCore	typeref:struct:OOCore::RISCVSIMCPUState
simglue	riscvsim/riscv_ins_execute.c	/^simglue(div, BIT_SIZE)(target_long a, target_long b)$/;"	f	file:
simglue	riscvsim/riscv_ins_execute.c	/^simglue(divu, BIT_SIZE)(target_ulong a, target_ulong b)$/;"	f	file:
simglue	riscvsim/riscv_ins_execute.c	/^simglue(mulh, BIT_SIZE)(target_long a, target_long b)$/;"	f	file:
simglue	riscvsim/riscv_ins_execute.c	/^simglue(mulhsu, BIT_SIZE)(target_long a, target_ulong b)$/;"	f	file:
simglue	riscvsim/riscv_ins_execute.c	/^simglue(mulhu, BIT_SIZE)(target_ulong a, target_ulong b)$/;"	f	file:
simglue	riscvsim/riscv_ins_execute.c	/^simglue(rem, BIT_SIZE)(target_long a, target_long b)$/;"	f	file:
simglue	riscvsim/riscv_ins_execute.c	/^simglue(remu, BIT_SIZE)(target_ulong a, target_ulong b)$/;"	f	file:
simglue	riscvsim/riscv_ins_execute.c	44;"	d	file:
simplefb_bar_set	vga.c	/^static void simplefb_bar_set(void *opaque, int bar_num,$/;"	f	file:
simplefb_init	simplefb.c	/^SimpleFBState *simplefb_init(PhysMemoryMap *map, uint64_t phys_addr,$/;"	f
simplefb_refresh	simplefb.c	/^void simplefb_refresh(FBDevice *fb_dev,$/;"	f
simplefb_refresh1	simplefb.c	/^static void simplefb_refresh1(FBDevice *fb_dev,$/;"	f	file:
simulation	riscv_cpu_priv.h	/^    int simulation;$/;"	m	struct:RISCVCPUState
single_write	fs_wget.c	/^    BOOL single_write;$/;"	m	struct:XHRState	file:
size	cutils.h	/^    size_t size;$/;"	m	struct:__anon6
size	fs_net.c	/^            int size;$/;"	m	struct:FSINode::__anon60::__anon62	file:
size	fs_net.c	/^            size_t size; \/* real file size *\/$/;"	m	struct:FSINode::__anon60::__anon61	file:
size	fs_net.c	/^    uint64_t size;$/;"	m	struct:__anon70	file:
size	iomem.h	/^    uint64_t size; \/* =org_size or 0 if the mapping is disabled *\/$/;"	m	struct:__anon2
size	json.h	/^    int size;$/;"	m	struct:JSONArray
size	json.h	/^    int size;$/;"	m	struct:JSONObject
size	pci.c	/^    uint32_t size; \/* 0 means no mapping defined *\/$/;"	m	struct:__anon1	file:
size	riscv_machine.c	/^       uint64_t size;$/;"	m	struct:fdt_reserve_entry	file:
size	riscvsim/btb.h	/^    int size;          \/* Number of entries in BTB *\/$/;"	m	struct:BranchTargetBuffer
size	riscvsim/cache.h	/^    uint64_t size;$/;"	m	struct:Cache
size_dt_strings	riscv_machine.c	/^    uint32_t size_dt_strings;$/;"	m	struct:fdt_header	file:
size_dt_struct	riscv_machine.c	/^    uint32_t size_dt_struct;$/;"	m	struct:fdt_header	file:
size_suffix	riscvsim/riscv_ins_str_creator.c	/^static const char size_suffix[8][3] = {"b", "h", "w", "d", "q", "5", "6", "7"};$/;"	v	file:
skip_header	fs_utils.c	/^const char *skip_header(const char *p)$/;"	f
skip_line	fs_utils.c	/^void skip_line(const char **pp)$/;"	f
skip_spaces	json.c	/^static void skip_spaces(const char **pp)$/;"	f	file:
slirp	slirp/mbuf.h	/^	Slirp *slirp;$/;"	m	struct:mbuf
slirp	slirp/socket.h	/^  Slirp *slirp;			   \/* managing slirp instance *\/$/;"	m	struct:socket
slirp	slirp/tftp.h	/^    Slirp *slirp;$/;"	m	struct:tftp_session
slirp_add_exec	slirp/slirp.c	/^int slirp_add_exec(Slirp *slirp, int do_pty, const void *args,$/;"	f
slirp_add_hostfwd	slirp/slirp.c	/^int slirp_add_hostfwd(Slirp *slirp, int is_udp, struct in_addr host_addr,$/;"	f
slirp_can_output	temu.c	/^int slirp_can_output(void *opaque)$/;"	f
slirp_cleanup	slirp/slirp.c	/^void slirp_cleanup(Slirp *slirp)$/;"	f
slirp_debug	slirp/misc.c	/^int slirp_debug = DBG_CALL|DBG_MISC|DBG_ERROR;$/;"	v
slirp_find_ctl_socket	slirp/slirp.c	/^slirp_find_ctl_socket(Slirp *slirp, struct in_addr guest_addr, int guest_port)$/;"	f	file:
slirp_init	slirp/slirp.c	/^Slirp *slirp_init(int restricted, struct in_addr vnetwork,$/;"	f
slirp_init_once	slirp/slirp.c	/^static void slirp_init_once(void)$/;"	f	file:
slirp_input	slirp/slirp.c	/^void slirp_input(Slirp *slirp, const uint8_t *pkt, int pkt_len)$/;"	f
slirp_open	temu.c	/^static EthernetDevice *slirp_open(void)$/;"	f	file:
slirp_output	temu.c	/^void slirp_output(void *opaque, const uint8_t *pkt, int pkt_len)$/;"	f
slirp_remove_hostfwd	slirp/slirp.c	/^int slirp_remove_hostfwd(Slirp *slirp, int is_udp, struct in_addr host_addr,$/;"	f
slirp_select_fill	slirp/libslirp.h	/^static inline void slirp_select_fill(int *pnfds, fd_set *readfds,$/;"	f
slirp_select_fill	slirp/slirp.c	/^void slirp_select_fill(Slirp *slirp, int *pnfds,$/;"	f
slirp_select_fill1	temu.c	/^static void slirp_select_fill1(EthernetDevice *net, int *pfd_max,$/;"	f	file:
slirp_select_poll	slirp/libslirp.h	/^static inline void slirp_select_poll(fd_set *readfds, fd_set *writefds,$/;"	f
slirp_select_poll	slirp/slirp.c	/^void slirp_select_poll(Slirp *slirp,$/;"	f
slirp_select_poll1	temu.c	/^static void slirp_select_poll1(EthernetDevice *net, $/;"	f	file:
slirp_send	slirp/slirp.c	/^ssize_t slirp_send(struct socket *so, const void *buf, size_t len, int flags)$/;"	f
slirp_socket_can_recv	slirp/slirp.c	/^size_t slirp_socket_can_recv(Slirp *slirp, struct in_addr guest_addr,$/;"	f
slirp_socket_recv	slirp/slirp.c	/^void slirp_socket_recv(Slirp *slirp, struct in_addr guest_addr, int guest_port,$/;"	f
slirp_state	temu.c	/^static Slirp *slirp_state;$/;"	v	file:
slirp_write_packet	temu.c	/^static void slirp_write_packet(EthernetDevice *net,$/;"	f	file:
snd_cwnd	slirp/tcp_var.h	/^	uint32_t snd_cwnd;		\/* congestion-controlled window *\/$/;"	m	struct:tcpcb
snd_max	slirp/tcp_var.h	/^	tcp_seq	snd_max;		\/* highest sequence number sent;$/;"	m	struct:tcpcb
snd_nxt	slirp/tcp_var.h	/^	tcp_seq	snd_nxt;		\/* send next *\/$/;"	m	struct:tcpcb
snd_scale	slirp/tcp_var.h	/^	u_char	snd_scale;		\/* window scaling for send window *\/$/;"	m	struct:tcpcb
snd_ssthresh	slirp/tcp_var.h	/^	uint32_t snd_ssthresh;		\/* snd_cwnd size threshold for$/;"	m	struct:tcpcb
snd_una	slirp/tcp_var.h	/^	tcp_seq	snd_una;		\/* send unacknowledged *\/$/;"	m	struct:tcpcb
snd_up	slirp/tcp_var.h	/^	tcp_seq	snd_up;			\/* send urgent pointer *\/$/;"	m	struct:tcpcb
snd_wl1	slirp/tcp_var.h	/^	tcp_seq	snd_wl1;		\/* window update seg seq number *\/$/;"	m	struct:tcpcb
snd_wl2	slirp/tcp_var.h	/^	tcp_seq	snd_wl2;		\/* window update seg ack number *\/$/;"	m	struct:tcpcb
snd_wnd	slirp/tcp_var.h	/^	uint32_t snd_wnd;		\/* send window *\/$/;"	m	struct:tcpcb
so_emu	slirp/socket.h	/^  uint8_t	so_emu;		\/* Is the socket emulated? *\/$/;"	m	struct:socket
so_expire	slirp/socket.h	/^  u_int	so_expire;		\/* When the socket will expire *\/$/;"	m	struct:socket
so_faddr	slirp/socket.h	/^  struct in_addr so_faddr;	   \/* foreign host table entry *\/$/;"	m	struct:socket	typeref:struct:socket::in_addr
so_fport	slirp/socket.h	/^  uint16_t so_fport;		   \/* foreign port *\/$/;"	m	struct:socket
so_iptos	slirp/socket.h	/^  uint8_t	so_iptos;	\/* Type of service *\/$/;"	m	struct:socket
so_laddr	slirp/socket.h	/^  struct in_addr so_laddr;	   \/* local host table entry *\/$/;"	m	struct:socket	typeref:struct:socket::in_addr
so_lport	slirp/socket.h	/^  uint16_t so_lport;		   \/* local port *\/$/;"	m	struct:socket
so_m	slirp/socket.h	/^  struct mbuf *so_m;	           \/* Pointer to the original SYN packet,$/;"	m	struct:socket	typeref:struct:socket::mbuf
so_next	slirp/socket.h	/^  struct socket *so_next,*so_prev;      \/* For a linked list of sockets *\/$/;"	m	struct:socket	typeref:struct:socket::socket
so_nqueued	slirp/socket.h	/^  int	so_nqueued;		\/* Number of packets queued in a row$/;"	m	struct:socket
so_prev	slirp/socket.h	/^  struct socket *so_next,*so_prev;      \/* For a linked list of sockets *\/$/;"	m	struct:socket	typeref:struct:socket::
so_queued	slirp/socket.h	/^  int	so_queued;		\/* Number of packets queued from this socket *\/$/;"	m	struct:socket
so_rcv	slirp/socket.h	/^  struct sbuf so_rcv;		\/* Receive buffer *\/$/;"	m	struct:socket	typeref:struct:socket::sbuf
so_snd	slirp/socket.h	/^  struct sbuf so_snd;		\/* Send buffer *\/$/;"	m	struct:socket	typeref:struct:socket::sbuf
so_state	slirp/socket.h	/^  int	so_state;		\/* internal state flags SS_*, below *\/$/;"	m	struct:socket
so_tcpcb	slirp/socket.h	/^  struct 	tcpcb *so_tcpcb;	\/* pointer to TCP protocol control block *\/$/;"	m	struct:socket	typeref:struct:socket::tcpcb
so_ti	slirp/socket.h	/^  struct tcpiphdr *so_ti;	   \/* Pointer to the original ti within$/;"	m	struct:socket	typeref:struct:socket::tcpiphdr
so_type	slirp/socket.h	/^  u_char	so_type;		\/* Type of socket, UDP or TCP *\/$/;"	m	struct:socket
so_urgc	slirp/socket.h	/^  int so_urgc;$/;"	m	struct:socket
socket	slirp/socket.h	/^struct socket {$/;"	s
socreate	slirp/socket.c	/^socreate(Slirp *slirp)$/;"	f
sofcantrcvmore	slirp/socket.c	/^sofcantrcvmore(struct socket *so)$/;"	f	file:
sofcantsendmore	slirp/socket.c	/^sofcantsendmore(struct socket *so)$/;"	f	file:
sofree	slirp/socket.c	/^sofree(struct socket *so)$/;"	f
sofwdrain	slirp/socket.c	/^sofwdrain(struct socket *so)$/;"	f
soisfconnected	slirp/socket.c	/^soisfconnected(struct socket *so)$/;"	f
soisfconnecting	slirp/socket.c	/^soisfconnecting(struct socket *so)$/;"	f
solookup	slirp/socket.c	/^solookup(struct socket *head, struct in_addr laddr, u_int lport,$/;"	f
sopreprbuf	slirp/socket.c	/^size_t sopreprbuf(struct socket *so, struct iovec *iov, int *np)$/;"	f
soread	slirp/socket.c	/^soread(struct socket *so)$/;"	f
soreadbuf	slirp/socket.c	/^int soreadbuf(struct socket *so, const char *buf, int size)$/;"	f
sorecvfrom	slirp/socket.c	/^sorecvfrom(struct socket *so)$/;"	f
sorecvoob	slirp/socket.c	/^sorecvoob(struct socket *so)$/;"	f
sosendoob	slirp/socket.c	/^sosendoob(struct socket *so)$/;"	f
sosendto	slirp/socket.c	/^sosendto(struct socket *so, struct mbuf *m)$/;"	f
sototcpcb	slirp/tcp_var.h	129;"	d
sowrite	slirp/socket.c	/^sowrite(struct socket *so)$/;"	f
special_ethaddr	slirp/slirp.c	/^static const uint8_t special_ethaddr[6] = {$/;"	v	file:
speculative_cpu_stage_flush	riscvsim/common_core_utils.c	/^speculative_cpu_stage_flush(CPUStage *stage, IMapEntry *imap)$/;"	f
speculative_exec_unit_flush	riscvsim/common_core_utils.c	/^speculative_exec_unit_flush(CPUStage *stage, int num_stages, IMapEntry *imap)$/;"	f
spfill	riscvsim/ras.h	/^    int spfill;$/;"	m	struct:Ras
sptop	riscvsim/ras.h	/^    int sptop;$/;"	m	struct:Ras
sqrt_sf	softfp_template.h	/^F_UINT sqrt_sf(F_UINT a, RoundingModeEnum rm,$/;"	f
sqrt_sf	softfp_template.h	1123;"	d
sqrt_sf	softfp_template.h	68;"	d
sqrtrem_u	softfp_template.h	/^static int sqrtrem_u(F_UINT *pr, F_UINT a1, F_UINT a0)$/;"	f
sqrtrem_u	softfp_template.h	/^static int sqrtrem_u(F_UINT *pr, F_UINT ah, F_UINT al)$/;"	f
sqrtrem_u	softfp_template.h	1126;"	d
sqrtrem_u	softfp_template.h	71;"	d
sr	vga.c	/^    uint8_t sr[8];$/;"	m	struct:VGAState	file:
sr_index	vga.c	/^    uint8_t sr_index;$/;"	m	struct:VGAState	file:
sr_mask	vga.c	/^static const uint8_t sr_mask[8] = {$/;"	v	file:
sscratch	riscv_cpu_priv.h	/^    target_ulong sscratch;$/;"	m	struct:RISCVCPUState
st00	vga.c	/^    uint8_t st00; \/* status 0 *\/$/;"	m	struct:VGAState	file:
st01	vga.c	/^    uint8_t st01; \/* status 1 *\/$/;"	m	struct:VGAState	file:
st_atime_nsec	fs.h	/^    uint32_t st_atime_nsec;$/;"	m	struct:__anon56
st_atime_sec	fs.h	/^    uint64_t st_atime_sec;$/;"	m	struct:__anon56
st_blksize	fs.h	/^    uint64_t st_blksize;$/;"	m	struct:__anon56
st_blocks	fs.h	/^    uint64_t st_blocks;$/;"	m	struct:__anon56
st_ctime_nsec	fs.h	/^    uint32_t st_ctime_nsec;$/;"	m	struct:__anon56
st_ctime_sec	fs.h	/^    uint64_t st_ctime_sec;$/;"	m	struct:__anon56
st_gid	fs.h	/^    uint32_t st_gid;$/;"	m	struct:__anon56
st_mode	fs.h	/^    uint32_t st_mode;$/;"	m	struct:__anon56
st_mtime_nsec	fs.h	/^    uint32_t st_mtime_nsec;$/;"	m	struct:__anon56
st_mtime_sec	fs.h	/^    uint64_t st_mtime_sec;$/;"	m	struct:__anon56
st_nlink	fs.h	/^    uint64_t st_nlink;$/;"	m	struct:__anon56
st_rdev	fs.h	/^    uint64_t st_rdev;$/;"	m	struct:__anon56
st_size	fs.h	/^    uint64_t st_size;$/;"	m	struct:__anon56
st_uid	fs.h	/^    uint32_t st_uid;$/;"	m	struct:__anon56
stage_exec_done	riscvsim/common_core_utils.h	/^    uint32_t stage_exec_done;$/;"	m	struct:CPUStage
stage_queue_index	riscvsim/memory_controller_utils.h	/^    int stage_queue_index;$/;"	m	struct:PendingMemAccessEntry
stage_queue_type	riscvsim/memory_controller_utils.h	/^    int stage_queue_type;$/;"	m	struct:PendingMemAccessEntry
stall_insn_dispatch	riscvsim/ooo_frontend.c	/^stall_insn_dispatch(OOCore *core, IMapEntry *e)$/;"	f	file:
start	fs.h	/^    uint64_t start;$/;"	m	struct:__anon57
start_cb	block_net.c	/^    void (*start_cb)(void *opaque);$/;"	m	struct:BlockDeviceHTTP	file:
start_cb	fs_net.c	/^    void (*start_cb)(void *opaque);$/;"	m	struct:__anon73	file:
start_cb	machine.c	/^    void (*start_cb)(void *opaque);$/;"	m	struct:__anon19	file:
start_in_sim	riscvsim/sim_params_stats.h	/^    int start_in_sim;$/;"	m	struct:SimParams
start_opaque	block_net.c	/^    void *start_opaque;$/;"	m	struct:BlockDeviceHTTP	file:
start_opaque	fs_net.c	/^    void *start_opaque;$/;"	m	struct:__anon73	file:
start_simulation	riscv_cpu_priv.h	/^    int start_simulation;$/;"	m	struct:RISCVCPUState
start_system_simulation	riscv_cpu.c	/^start_system_simulation(RISCVCPUState *s, target_ulong pc, uint64_t icount)$/;"	f	file:
stat_to_qid	fs_disk.c	/^static void stat_to_qid(FSQID *qid, const struct stat *st)$/;"	f	file:
state	block_net.c	/^    CachedBlockStateEnum state;$/;"	m	struct:CachedBlock	file:
state	fs_net.c	/^            FSINodeRegStateEnum state;$/;"	m	struct:FSINode::__anon60::__anon61	file:
state	sha256.h	/^    uint32_t state[8], curlen;$/;"	m	struct:__anon24
stats	riscvsim/bpu.h	/^    SimStats *stats;$/;"	m	struct:BranchPredUnit
stats	riscvsim/cache.h	/^    CacheStats *stats;$/;"	m	struct:Cache
stats	riscvsim/riscv_sim_cpu.h	/^    SimStats *stats;        \/* Simulation Stats *\/$/;"	m	struct:RISCVSIMCPUState
stats_shm_fd	riscv_cpu_priv.h	/^    int stats_shm_fd;$/;"	m	struct:RISCVCPUState
stats_shm_fd	stats_display.c	/^static int stats_shm_fd;$/;"	v	file:
stats_shm_name	riscv_cpu_priv.h	/^    char stats_shm_name[256];$/;"	m	struct:RISCVCPUState
stats_shm_ptr	riscv_cpu_priv.h	/^    SimStats *stats_shm_ptr;$/;"	m	struct:RISCVCPUState
status	ide.c	/^    uint8_t status;$/;"	m	struct:IDEState	file:
status	pckbd.c	/^    uint8_t status;$/;"	m	struct:KBDState	file:
status	riscvsim/cache.h	/^    uint8_t status;$/;"	m	struct:CacheBlk
status	riscvsim/common_core_utils.h	/^    int status;$/;"	m	struct:InstructionMapEntry
status	virtio.c	/^    uint32_t status;$/;"	m	struct:VIRTIODevice	file:
status_bits	riscvsim/btb.h	/^    int **status_bits; \/* For each BTB entry, used in LRU eviction *\/$/;"	m	struct:BranchTargetBuffer
status_bits	riscvsim/cache.h	/^    int **status_bits;$/;"	m	struct:Cache
stdin_fd	temu.c	/^    int stdin_fd;$/;"	m	struct:__anon33	file:
stop_flush	riscvsim/common_core_utils.h	/^    int stop_flush;$/;"	m	struct:InstructionMapEntry
stop_simulation	riscv_cpu_priv.h	/^    int stop_simulation;$/;"	m	struct:RISCVCPUState
stop_system_simulation	riscv_cpu.c	/^stop_system_simulation(RISCVCPUState *s, target_ulong pc, uint64_t icount)$/;"	f	file:
store_page_faults	riscvsim/sim_params_stats.h	/^    uint64_t store_page_faults;$/;"	m	struct:SimStats
store_page_walks	riscvsim/sim_params_stats.h	/^    uint64_t store_page_walks;$/;"	m	struct:SimStats
store_tlb_hits	riscvsim/sim_params_stats.h	/^    uint64_t store_tlb_hits;$/;"	m	struct:SimStats
store_tlb_lookups	riscvsim/sim_params_stats.h	/^    uint64_t store_tlb_lookups;$/;"	m	struct:SimStats
str	json.h	/^        JSONString *str;$/;"	m	union:JSONValue::__anon39
str	riscvsim/riscv_instruction.h	/^    char str[RISCV_INS_STR_MAX_LENGTH];$/;"	m	struct:RVInstruction
strdup	slirp/misc.c	/^strdup(str)$/;"	f
strdup_null	machine.c	/^static char *strdup_null(const char *str)$/;"	f	file:
strerror	slirp/misc.c	/^strerror(error)$/;"	f
stride	machine.h	/^    int stride; \/* current stride in bytes *\/$/;"	m	struct:FBDevice
string_table	riscv_machine.c	/^    char *string_table;$/;"	m	struct:__anon4	file:
string_table_len	riscv_machine.c	/^    int string_table_len;$/;"	m	struct:__anon4	file:
string_table_size	riscv_machine.c	/^    int string_table_size;$/;"	m	struct:__anon4	file:
stringify	cutils.h	37;"	d
strstart	cutils.c	/^int strstart(const char *str, const char *val, const char **ptr)$/;"	f
stval	riscv_cpu_priv.h	/^    target_ulong stval;$/;"	m	struct:RISCVCPUState
stvec	riscv_cpu_priv.h	/^    target_ulong stvec;$/;"	m	struct:RISCVCPUState
stw	ide.c	/^static void stw(uint16_t *buf, int v)$/;"	f	file:
switch_to_cpu_simulation	riscv_cpu.c	/^switch_to_cpu_simulation(RISCVCPUState* s)$/;"	f
symlink	fs_net.c	/^        } symlink;$/;"	m	union:FSINode::__anon60	typeref:struct:FSINode::__anon60::__anon64	file:
t_dupacks	slirp/tcp_var.h	/^	short	t_dupacks;		\/* consecutive dup acks recd *\/$/;"	m	struct:tcpcb
t_flags	slirp/tcp_var.h	/^	u_short	t_flags;$/;"	m	struct:tcpcb
t_force	slirp/tcp_var.h	/^	char	t_force;		\/* 1 if forcing out a byte *\/$/;"	m	struct:tcpcb
t_idle	slirp/tcp_var.h	/^	short	t_idle;			\/* inactivity time *\/$/;"	m	struct:tcpcb
t_iobc	slirp/tcp_var.h	/^	char	t_iobc;			\/* input character *\/$/;"	m	struct:tcpcb
t_maxseg	slirp/tcp_var.h	/^	u_short	t_maxseg;		\/* maximum segment size *\/$/;"	m	struct:tcpcb
t_oobflags	slirp/tcp_var.h	/^	char	t_oobflags;		\/* have some *\/$/;"	m	struct:tcpcb
t_rtseq	slirp/tcp_var.h	/^	tcp_seq	t_rtseq;		\/* sequence number being timed *\/$/;"	m	struct:tcpcb
t_rtt	slirp/tcp_var.h	/^	short	t_rtt;			\/* round trip time *\/$/;"	m	struct:tcpcb
t_rttmin	slirp/tcp_var.h	/^	u_short	t_rttmin;		\/* minimum rtt allowed *\/$/;"	m	struct:tcpcb
t_rttvar	slirp/tcp_var.h	/^	short	t_rttvar;		\/* variance in round-trip time *\/$/;"	m	struct:tcpcb
t_rxtcur	slirp/tcp_var.h	/^	short	t_rxtcur;		\/* current retransmit value *\/$/;"	m	struct:tcpcb
t_rxtshift	slirp/tcp_var.h	/^	short	t_rxtshift;		\/* log(2) of rexmt exp. backoff *\/$/;"	m	struct:tcpcb
t_socket	slirp/tcp_var.h	/^	struct	socket *t_socket;		\/* back pointer to socket *\/$/;"	m	struct:tcpcb	typeref:struct:tcpcb::socket
t_softerror	slirp/tcp_var.h	/^	short	t_softerror;		\/* possible error not yet reported *\/$/;"	m	struct:tcpcb
t_srtt	slirp/tcp_var.h	/^	short	t_srtt;			\/* smoothed round-trip time *\/$/;"	m	struct:tcpcb
t_state	slirp/tcp_var.h	/^	short	t_state;		\/* state of this connection *\/$/;"	m	struct:tcpcb
t_template	slirp/tcp_var.h	/^	struct	tcpiphdr t_template;    \/* static skeletal packet for xmit *\/$/;"	m	struct:tcpcb	typeref:struct:tcpcb::tcpiphdr
t_timer	slirp/tcp_var.h	/^	short	t_timer[TCPT_NTIMERS];	\/* tcp timers *\/$/;"	m	struct:tcpcb
tab	json.h	/^    JSONValue *tab;$/;"	m	struct:JSONArray
tab	riscv_machine.c	/^    uint32_t *tab;$/;"	m	struct:__anon4	file:
tab_block	block_net.c	/^    CachedBlock *tab_block[PREFETCH_GROUP_LEN_MAX];$/;"	m	struct:__anon9	file:
tab_drive	machine.h	/^    VMDriveEntry tab_drive[MAX_DRIVE_DEVICE];$/;"	m	struct:__anon32
tab_eth	machine.h	/^    VMEthEntry tab_eth[MAX_ETH_DEVICE];$/;"	m	struct:__anon32
tab_fs	machine.h	/^    VMFSEntry tab_fs[MAX_FS_DEVICE];$/;"	m	struct:__anon32
tab_len	riscv_machine.c	/^    int tab_len;$/;"	m	struct:__anon4	file:
tab_size	riscv_machine.c	/^    int tab_size;$/;"	m	struct:__anon4	file:
tag	machine.h	/^    char *tag; \/* 9p mount tag *\/$/;"	m	struct:__anon30
tag	riscvsim/cache.h	/^    target_ulong tag;$/;"	m	struct:CacheBlk
tag	virtio.c	/^    uint16_t tag;$/;"	m	struct:__anon18	file:
tag	virtio.c	/^    uint8_t tag;$/;"	m	struct:__anon17	file:
tag_bits	riscvsim/cache.h	/^    int tag_bits;$/;"	m	struct:Cache
tag_bits_mask	riscvsim/cache.h	/^    target_ulong tag_bits_mask;$/;"	m	struct:Cache
target	riscvsim/btb.h	/^    target_ulong target; \/* Target of this branch *\/$/;"	m	struct:BtbEntry
target	riscvsim/riscv_instruction.h	/^    target_ulong target;$/;"	m	struct:RVInstruction
target_fu_pipelined	riscvsim/inorder_frontend.c	/^target_fu_pipelined(INCore *core, int fu_type)$/;"	f	file:
target_long	riscv_cpu_xlen_typedefs.h	/^typedef int128_t target_long;$/;"	t
target_long	riscv_cpu_xlen_typedefs.h	/^typedef int32_t target_long;$/;"	t
target_long	riscv_cpu_xlen_typedefs.h	/^typedef int64_t target_long;$/;"	t
target_long	riscvsim/riscv_sim_typedefs.h	/^typedef int32_t target_long;$/;"	t
target_long	riscvsim/riscv_sim_typedefs.h	/^typedef int64_t target_long;$/;"	t
target_read_insn_slow	riscv_cpu.c	/^no_inline __exception int target_read_insn_slow(RISCVCPUState *s,$/;"	f
target_read_insn_u16	riscv_cpu.c	/^__exception int target_read_insn_u16(RISCVCPUState *s, uint16_t *pinsn,$/;"	f
target_read_slow	riscv_cpu.c	/^int target_read_slow(RISCVCPUState *s, mem_uint_t *pval,$/;"	f
target_read_slow	riscv_cpu_priv.h	260;"	d
target_ulong	riscv_cpu_xlen_typedefs.h	/^typedef uint128_t target_ulong;$/;"	t
target_ulong	riscv_cpu_xlen_typedefs.h	/^typedef uint32_t target_ulong;$/;"	t
target_ulong	riscv_cpu_xlen_typedefs.h	/^typedef uint64_t target_ulong;$/;"	t
target_ulong	riscvsim/riscv_sim_typedefs.h	/^typedef uint32_t target_ulong;$/;"	t
target_ulong	riscvsim/riscv_sim_typedefs.h	/^typedef uint64_t target_ulong;$/;"	t
target_write_slow	riscv_cpu.c	/^int target_write_slow(RISCVCPUState *s, target_ulong addr,$/;"	f
target_write_slow	riscv_cpu_priv.h	261;"	d
tcb	slirp/slirp.h	/^    struct socket tcb;$/;"	m	struct:Slirp	typeref:struct:Slirp::socket
tcp_attach	slirp/tcp_subr.c	/^tcp_attach(struct socket *so)$/;"	f
tcp_backoff	slirp/tcp_timer.c	/^const int tcp_backoff[TCP_MAXRXTSHIFT + 1] =$/;"	v
tcp_canceltimers	slirp/tcp_timer.c	/^tcp_canceltimers(struct tcpcb *tp)$/;"	f
tcp_close	slirp/tcp_subr.c	/^tcp_close(struct tcpcb *tp)$/;"	f
tcp_connect	slirp/tcp_subr.c	/^tcp_connect(struct socket *inso)$/;"	f
tcp_ctl	slirp/tcp_subr.c	/^int tcp_ctl(struct socket *so)$/;"	f
tcp_dooptions	slirp/tcp_input.c	/^tcp_dooptions(struct tcpcb *tp, u_char *cp, int cnt, struct tcpiphdr *ti)$/;"	f	file:
tcp_drop	slirp/tcp_subr.c	/^struct tcpcb *tcp_drop(struct tcpcb *tp, int err)$/;"	f
tcp_emu	slirp/tcp_subr.c	/^tcp_emu(struct socket *so, struct mbuf *m)$/;"	f
tcp_fasttimo	slirp/tcp_timer.c	/^tcp_fasttimo(Slirp *slirp)$/;"	f
tcp_fconnect	slirp/tcp_subr.c	/^int tcp_fconnect(struct socket *so)$/;"	f
tcp_init	slirp/tcp_subr.c	/^tcp_init(Slirp *slirp)$/;"	f
tcp_input	slirp/tcp_input.c	/^tcp_input(struct mbuf *m, int iphlen, struct socket *inso)$/;"	f
tcp_iss	slirp/slirp.h	/^    tcp_seq tcp_iss;        \/* tcp initial send seq # *\/$/;"	m	struct:Slirp
tcp_last_so	slirp/slirp.h	/^    struct socket *tcp_last_so;$/;"	m	struct:Slirp	typeref:struct:Slirp::socket
tcp_listen	slirp/socket.c	/^tcp_listen(Slirp *slirp, uint32_t haddr, u_int hport, uint32_t laddr,$/;"	f
tcp_mss	slirp/tcp_input.c	/^tcp_mss(struct tcpcb *tp, u_int offer)$/;"	f
tcp_newtcpcb	slirp/tcp_subr.c	/^tcp_newtcpcb(struct socket *so)$/;"	f
tcp_now	slirp/slirp.h	/^    uint32_t tcp_now;       \/* for RFC 1323 timestamps *\/$/;"	m	struct:Slirp
tcp_outflags	slirp/tcp_output.c	/^static const u_char  tcp_outflags[TCP_NSTATES] = {$/;"	v	file:
tcp_output	slirp/tcp_output.c	/^tcp_output(struct tcpcb *tp)$/;"	f
tcp_pulloutofband	slirp/tcp_input.c	/^tcp_pulloutofband(so, ti, m)$/;"	f
tcp_rcvseqinit	slirp/tcp.h	156;"	d
tcp_reass	slirp/tcp_input.c	/^tcp_reass(register struct tcpcb *tp, register struct tcpiphdr *ti,$/;"	f	file:
tcp_respond	slirp/tcp_subr.c	/^tcp_respond(struct tcpcb *tp, struct tcpiphdr *ti, struct mbuf *m,$/;"	f
tcp_sendseqinit	slirp/tcp.h	159;"	d
tcp_seq	slirp/tcp.h	/^typedef	uint32_t tcp_seq;$/;"	t
tcp_setpersist	slirp/tcp_output.c	/^tcp_setpersist(struct tcpcb *tp)$/;"	f
tcp_slowtimo	slirp/tcp_timer.c	/^tcp_slowtimo(Slirp *slirp)$/;"	f
tcp_sockclosed	slirp/tcp_subr.c	/^tcp_sockclosed(struct tcpcb *tp)$/;"	f
tcp_template	slirp/tcp_subr.c	/^tcp_template(struct tcpcb *tp)$/;"	f
tcp_timers	slirp/tcp_timer.c	/^tcp_timers(register struct tcpcb *tp, int timer)$/;"	f	file:
tcp_tos	slirp/tcp_subr.c	/^tcp_tos(struct socket *so)$/;"	f
tcp_xmit_timer	slirp/tcp_input.c	/^tcp_xmit_timer(register struct tcpcb *tp, int rtt)$/;"	f	file:
tcpcb	slirp/tcp_var.h	/^struct tcpcb {$/;"	s
tcpemu	slirp/tcp_subr.c	/^static struct emu_t *tcpemu = NULL;$/;"	v	typeref:struct:emu_t	file:
tcpfrag_list_empty	slirp/tcpip.h	66;"	d
tcpfrag_list_end	slirp/tcpip.h	65;"	d
tcpfrag_list_first	slirp/tcpip.h	64;"	d
tcphdr	slirp/tcp.h	/^struct tcphdr {$/;"	s
tcpiphdr	slirp/tcpip.h	/^struct tcpiphdr {$/;"	s
tcpiphdr2qlink	slirp/tcpip.h	60;"	d
tcpiphdr_2	slirp/tcpip.h	/^struct tcpiphdr_2 {$/;"	s
tcpiphdr_next	slirp/tcpip.h	62;"	d
tcpiphdr_prev	slirp/tcpip.h	63;"	d
tcptos	slirp/tcp_subr.c	/^static const struct tos_t tcptos[] = {$/;"	v	typeref:struct:tos_t	file:
term_exit	temu.c	/^static void term_exit(void)$/;"	f	file:
term_init	temu.c	/^static void term_init(BOOL allow_ctrlc)$/;"	f	file:
term_resize_handler	temu.c	/^static void term_resize_handler(int sig)$/;"	f	file:
tftp_prefix	slirp/slirp.h	/^    char *tftp_prefix;$/;"	m	struct:Slirp
tftp_session	slirp/tftp.h	/^struct tftp_session {$/;"	s
tftp_sessions	slirp/slirp.h	/^    struct tftp_session tftp_sessions[TFTP_SESSIONS_MAX];$/;"	m	struct:Slirp	typeref:struct:Slirp::tftp_session
tftp_t	slirp/tftp.h	/^struct tftp_t {$/;"	s
th_ack	slirp/tcp.h	/^	tcp_seq	th_ack;			\/* acknowledgement number *\/$/;"	m	struct:tcphdr
th_dport	slirp/tcp.h	/^	uint16_t th_dport;              \/* destination port *\/$/;"	m	struct:tcphdr
th_flags	slirp/tcp.h	/^	uint8_t th_flags;$/;"	m	struct:tcphdr
th_off	slirp/tcp.h	/^		th_off:4;		\/* data offset *\/$/;"	m	struct:tcphdr
th_off	slirp/tcp.h	/^	u_int	th_off:4,		\/* data offset *\/$/;"	m	struct:tcphdr
th_seq	slirp/tcp.h	/^	tcp_seq	th_seq;			\/* sequence number *\/$/;"	m	struct:tcphdr
th_sport	slirp/tcp.h	/^	uint16_t th_sport;              \/* source port *\/$/;"	m	struct:tcphdr
th_sum	slirp/tcp.h	/^	uint16_t th_sum;                \/* checksum *\/$/;"	m	struct:tcphdr
th_urp	slirp/tcp.h	/^	uint16_t th_urp;                \/* urgent pointer *\/$/;"	m	struct:tcphdr
th_win	slirp/tcp.h	/^	uint16_t th_win;                \/* window *\/$/;"	m	struct:tcphdr
th_x2	slirp/tcp.h	/^		th_x2:4;		\/* (unused) *\/$/;"	m	struct:tcphdr
th_x2	slirp/tcp.h	/^	u_int	th_x2:4,		\/* (unused) *\/$/;"	m	struct:tcphdr
ti_ack	slirp/tcpip.h	52;"	d
ti_dport	slirp/tcpip.h	50;"	d
ti_dst	slirp/tcpip.h	48;"	d
ti_flags	slirp/tcpip.h	55;"	d
ti_i	slirp/tcpip.h	/^	struct 	ipovly ti_i;		\/* overlaid ip structure *\/$/;"	m	struct:tcpiphdr	typeref:struct:tcpiphdr::ipovly
ti_len	slirp/tcpip.h	46;"	d
ti_mbuf	slirp/tcpip.h	43;"	d
ti_off	slirp/tcpip.h	54;"	d
ti_pr	slirp/tcpip.h	45;"	d
ti_seq	slirp/tcpip.h	51;"	d
ti_sport	slirp/tcpip.h	49;"	d
ti_src	slirp/tcpip.h	47;"	d
ti_sum	slirp/tcpip.h	57;"	d
ti_t	slirp/tcpip.h	/^	struct	tcphdr ti_t;		\/* tcp header *\/$/;"	m	struct:tcpiphdr	typeref:struct:tcpiphdr::tcphdr
ti_urp	slirp/tcpip.h	58;"	d
ti_win	slirp/tcpip.h	56;"	d
ti_x1	slirp/tcpip.h	44;"	d
ti_x2	slirp/tcpip.h	53;"	d
time_fasttimo	slirp/slirp.c	/^static u_int time_fasttimo, last_slowtimo;$/;"	v	file:
timecmp	riscv_machine.c	/^    uint64_t timecmp;$/;"	m	struct:RISCVMachine	file:
timeout	fs_wget.c	/^    int64_t timeout;$/;"	m	struct:__anon20	file:
timestamp	slirp/tftp.h	/^    int timestamp;$/;"	m	struct:tftp_session
tlb_code	riscv_cpu_priv.h	/^    TLBEntry *tlb_code;$/;"	m	struct:RISCVCPUState
tlb_flush_all	riscv_cpu.c	/^static void tlb_flush_all(RISCVCPUState *s)$/;"	f	file:
tlb_flush_vaddr	riscv_cpu.c	/^static void tlb_flush_vaddr(RISCVCPUState *s, target_ulong vaddr)$/;"	f	file:
tlb_init	riscv_cpu.c	/^static void tlb_init(RISCVCPUState *s)$/;"	f	file:
tlb_read	riscv_cpu_priv.h	/^    TLBEntry *tlb_read;$/;"	m	struct:RISCVCPUState
tlb_size	riscvsim/sim_params_stats.h	/^    int tlb_size;$/;"	m	struct:SimParams
tlb_write	riscv_cpu_priv.h	/^    TLBEntry *tlb_write;$/;"	m	struct:RISCVCPUState
to_blocks	fs_net.c	/^static int64_t to_blocks(FSDeviceMem *fs, uint64_t size)$/;"	f	file:
tos	slirp/misc.h	/^    uint8_t tos;$/;"	m	struct:emu_t
tos	slirp/misc.h	/^    uint8_t tos;$/;"	m	struct:tos_t
tos_t	slirp/misc.h	/^struct tos_t {$/;"	s
tostring	cutils.h	38;"	d
total_read_cnt	riscvsim/cache.h	/^    uint64_t total_read_cnt;$/;"	m	struct:CacheStats
total_write_cnt	riscvsim/cache.h	/^    uint64_t total_write_cnt;$/;"	m	struct:CacheStats
totalsize	riscv_machine.c	/^    uint32_t totalsize;$/;"	m	struct:fdt_header	file:
tp_block_nr	slirp/tftp.h	/^      uint16_t tp_block_nr;$/;"	m	struct:tftp_t::__anon45::__anon46
tp_buf	slirp/tftp.h	/^      uint8_t tp_buf[512];$/;"	m	struct:tftp_t::__anon45::__anon46
tp_buf	slirp/tftp.h	/^    uint8_t tp_buf[512 + 2];$/;"	m	union:tftp_t::__anon45
tp_data	slirp/tftp.h	/^    } tp_data;$/;"	m	union:tftp_t::__anon45	typeref:struct:tftp_t::__anon45::__anon46
tp_error	slirp/tftp.h	/^    } tp_error;$/;"	m	union:tftp_t::__anon45	typeref:struct:tftp_t::__anon45::__anon47
tp_error_code	slirp/tftp.h	/^      uint16_t tp_error_code;$/;"	m	struct:tftp_t::__anon45::__anon47
tp_msg	slirp/tftp.h	/^      uint8_t tp_msg[512];$/;"	m	struct:tftp_t::__anon45::__anon47
tp_op	slirp/tftp.h	/^  uint16_t tp_op;$/;"	m	struct:tftp_t
translate	ps2.c	/^    int translate;$/;"	m	struct:PS2KbdState	file:
ts_recent	slirp/tcp_var.h	/^	uint32_t	ts_recent;		\/* timestamp echo data *\/$/;"	m	struct:tcpcb
ts_recent_age	slirp/tcp_var.h	/^	uint32_t	ts_recent_age;		\/* when last updated *\/$/;"	m	struct:tcpcb
tt	slirp/slirp.h	/^    struct timeval tt;$/;"	m	struct:Slirp	typeref:struct:Slirp::timeval
tun_open	temu.c	/^static EthernetDevice *tun_open(const char *ifname)$/;"	f	file:
tun_select_fill	temu.c	/^static void tun_select_fill(EthernetDevice *net, int *pfd_max,$/;"	f	file:
tun_select_poll	temu.c	/^static void tun_select_poll(EthernetDevice *net, $/;"	f	file:
tun_write_packet	temu.c	/^static void tun_write_packet(EthernetDevice *net,$/;"	f	file:
type	fs.h	/^    uint8_t type; \/* P9_IFx *\/$/;"	m	struct:__anon55
type	fs.h	/^    uint8_t type;$/;"	m	struct:__anon57
type	fs_net.c	/^    FSCMDRequestEnum type;$/;"	m	struct:__anon67	file:
type	fs_net.c	/^    FSINodeTypeEnum type;$/;"	m	struct:FSINode	file:
type	json.h	/^    JSONTypeEnum type;$/;"	m	struct:JSONValue
type	pci.c	/^    uint8_t type;$/;"	m	struct:__anon1	file:
type	riscvsim/adaptive_predictor.h	/^    int type;                \/* Type of adaptive predictor scheme used (GAg, GAp, PAg, PAp),$/;"	m	struct:AdaptivePredictor
type	riscvsim/btb.h	/^    int type;            \/* Type of branch, BRANCH_COND or BRANCH_UNCOND *\/$/;"	m	struct:BtbEntry
type	riscvsim/cache.h	/^    int type;$/;"	m	struct:Cache
type	riscvsim/memory_controller_utils.h	/^    MemAccessType type;$/;"	m	struct:PendingMemAccessEntry
type	riscvsim/riscv_instruction.h	/^    int type;$/;"	m	struct:RVInstruction
type	virtio.c	/^    VirtioInputTypeEnum type;$/;"	m	struct:VIRTIOInputDevice	file:
type	virtio.c	/^    uint32_t type;$/;"	m	struct:__anon12	file:
type	virtio.c	/^    uint32_t type;$/;"	m	struct:__anon13	file:
u	fs_disk.c	/^    } u;$/;"	m	struct:FSFile	typeref:union:FSFile::__anon75	file:
u	fs_net.c	/^    } u;$/;"	m	struct:FSINode	typeref:union:FSINode::__anon60	file:
u	json.h	/^    } u;$/;"	m	struct:JSONValue	typeref:union:JSONValue::__anon39
u16	aes.c	/^typedef uint16_t u16;$/;"	t	file:
u32	aes.c	/^typedef uint32_t u32;$/;"	t	file:
u32	riscv_cpu.c	/^    uint32_t u32;$/;"	m	struct:unaligned_u32	file:
u8	aes.c	/^typedef uint8_t u8;$/;"	t	file:
uart_can_rx	riscv_machine.c	/^int  uart_can_rx(VirtMachine *v)$/;"	f
uart_dll	riscv_machine.c	/^    uint8_t uart_dll;$/;"	m	struct:RISCVMachine	file:
uart_dlm	riscv_machine.c	/^    uint8_t uart_dlm;$/;"	m	struct:RISCVMachine	file:
uart_fcr	riscv_machine.c	/^    uint8_t uart_fcr;$/;"	m	struct:RISCVMachine	file:
uart_ier	riscv_machine.c	/^    uint8_t uart_ier;$/;"	m	struct:RISCVMachine	file:
uart_lcr	riscv_machine.c	/^    uint8_t uart_lcr;$/;"	m	struct:RISCVMachine	file:
uart_mcr	riscv_machine.c	/^    uint8_t uart_mcr;$/;"	m	struct:RISCVMachine	file:
uart_pos	riscv_machine.c	/^    int     uart_pos;$/;"	m	struct:RISCVMachine	file:
uart_read	riscv_machine.c	/^static uint32_t uart_read(void *opaque, uint32_t offset, int size_log2)$/;"	f	file:
uart_rx_buf	riscv_machine.c	/^    uint8_t uart_rx_buf[UART_RX_BUFSIZE];$/;"	m	struct:RISCVMachine	file:
uart_rx_data	riscv_machine.c	/^void uart_rx_data(VirtMachine *v, uint8_t *buf, int size)$/;"	f
uart_rx_head	riscv_machine.c	/^    int     uart_rx_head, uart_rx_tail;$/;"	m	struct:RISCVMachine	file:
uart_rx_pending	riscv_machine.c	/^    uint8_t uart_rx_pending, uart_tx_pending;$/;"	m	struct:RISCVMachine	file:
uart_rx_tail	riscv_machine.c	/^    int     uart_rx_head, uart_rx_tail;$/;"	m	struct:RISCVMachine	file:
uart_scr	riscv_machine.c	/^    uint8_t uart_scr;$/;"	m	struct:RISCVMachine	file:
uart_set_irq	riscv_machine.c	/^static void uart_set_irq(RISCVMachine *s)$/;"	f	file:
uart_tx_pending	riscv_machine.c	/^    uint8_t uart_rx_pending, uart_tx_pending;$/;"	m	struct:RISCVMachine	file:
uart_write	riscv_machine.c	/^static void uart_write(void *opaque, uint32_t offset, uint32_t val,$/;"	f	file:
udb	slirp/slirp.h	/^    struct socket udb;$/;"	m	struct:Slirp	typeref:struct:Slirp::socket
udp	slirp/bootp.h	/^    struct udphdr udp;$/;"	m	struct:bootp_t	typeref:struct:bootp_t::udphdr
udp	slirp/tftp.h	/^  struct udphdr udp;$/;"	m	struct:tftp_t	typeref:struct:tftp_t::udphdr
udp_attach	slirp/udp.c	/^udp_attach(struct socket *so)$/;"	f
udp_detach	slirp/udp.c	/^udp_detach(struct socket *so)$/;"	f
udp_init	slirp/udp.c	/^udp_init(Slirp *slirp)$/;"	f
udp_input	slirp/udp.c	/^udp_input(register struct mbuf *m, int iphlen)$/;"	f
udp_last_so	slirp/slirp.h	/^    struct socket *udp_last_so;$/;"	m	struct:Slirp	typeref:struct:Slirp::socket
udp_listen	slirp/udp.c	/^udp_listen(Slirp *slirp, uint32_t haddr, u_int hport, uint32_t laddr,$/;"	f
udp_output	slirp/udp.c	/^int udp_output(struct socket *so, struct mbuf *m,$/;"	f
udp_output2	slirp/udp.c	/^int udp_output2(struct socket *so, struct mbuf *m,$/;"	f
udp_tos	slirp/udp.c	/^udp_tos(struct socket *so)$/;"	f	file:
udphdr	slirp/udp.h	/^struct udphdr {$/;"	s
udpiphdr	slirp/udp.h	/^struct udpiphdr {$/;"	s
udptos	slirp/udp.c	/^static const struct tos_t udptos[] = {$/;"	v	typeref:struct:tos_t	file:
uh_dport	slirp/udp.h	/^    uint16_t uh_dport;          \/* destination port *\/$/;"	m	struct:udphdr
uh_sport	slirp/udp.h	/^    uint16_t uh_sport;          \/* source port *\/$/;"	m	struct:udphdr
uh_sum	slirp/udp.h	/^    uint16_t uh_sum;            \/* udp checksum *\/$/;"	m	struct:udphdr
uh_ulen	slirp/udp.h	/^    int16_t  uh_ulen;           \/* udp length *\/$/;"	m	struct:udphdr
ui_dport	slirp/udp.h	64;"	d
ui_dst	slirp/udp.h	62;"	d
ui_i	slirp/udp.h	/^	        struct  ipovly ui_i;            \/* overlaid ip structure *\/$/;"	m	struct:udpiphdr	typeref:struct:udpiphdr::ipovly
ui_len	slirp/udp.h	60;"	d
ui_mbuf	slirp/udp.h	57;"	d
ui_pr	slirp/udp.h	59;"	d
ui_sport	slirp/udp.h	63;"	d
ui_src	slirp/udp.h	61;"	d
ui_sum	slirp/udp.h	66;"	d
ui_u	slirp/udp.h	/^	        struct  udphdr ui_u;            \/* udp header *\/$/;"	m	struct:udpiphdr	typeref:struct:udpiphdr::udphdr
ui_ulen	slirp/udp.h	65;"	d
ui_x1	slirp/udp.h	58;"	d
uid	fs_disk.c	/^    uint32_t uid;$/;"	m	struct:FSFile	file:
uid	fs_net.c	/^    uint32_t uid;$/;"	m	struct:FSFile	file:
uid	fs_net.c	/^    uint32_t uid;$/;"	m	struct:FSINode	file:
uint128_t	cutils.h	/^typedef unsigned __int128 uint128_t;$/;"	t
uintx_t	riscv_cpu_template.h	1940;"	d
uintx_t	riscv_cpu_template.h	33;"	d
uintx_t	riscv_cpu_template.h	36;"	d
uintx_t	riscv_cpu_template.h	39;"	d
unaligned_u32	riscv_cpu.c	/^struct __attribute__((packed)) unaligned_u32 {$/;"	s	file:
unlikely	cutils.h	30;"	d
unmarshall	virtio.c	/^static int unmarshall(VIRTIO9PDevice *s, int queue_idx,$/;"	f	file:
unpack_sf	softfp_template.h	/^static inline F_UINT unpack_sf(uint32_t *pa_sign, int32_t *pa_exp,$/;"	f
unpack_sf	softfp_template.h	1112;"	d
unpack_sf	softfp_template.h	57;"	d
unused	slirp/bootp.h	/^    uint16_t unused;$/;"	m	struct:bootp_t
update	riscvsim/dramsim_wrapper.cpp	/^dramsim_wrapper::update()$/;"	f	class:dramsim_wrapper
update_arch_reg_fp	riscvsim/common_core_utils.c	/^update_arch_reg_fp(RISCVCPUState *s, IMapEntry *e)$/;"	f
update_arch_reg_int	riscvsim/common_core_utils.c	/^update_arch_reg_int(RISCVCPUState *s, IMapEntry *e)$/;"	f
update_arg	ps2.c	/^    void *update_arg;$/;"	m	struct:__anon43	file:
update_insn_commit_stats	riscvsim/common_core_utils.c	/^update_insn_commit_stats(RISCVCPUState *s, IMapEntry *e)$/;"	f
update_irq	ps2.c	/^    void (*update_irq)(void *, int);$/;"	m	struct:__anon43	file:
update_palette16	vga.c	/^static int update_palette16(VGAState *s, uint32_t *palette)$/;"	f	file:
update_rd_rat_mapping	riscvsim/ooo_frontend.c	/^update_rd_rat_mapping(OOCore *core, IMapEntry *e)$/;"	f	file:
update_status_bits	riscvsim/cache.c	/^update_status_bits(const Cache *c, int set, int way)$/;"	f	file:
update_tag_address	riscvsim/cache.c	/^update_tag_address(const Cache *c, uint32_t *pset, CacheBlk **pblk,$/;"	f	file:
update_two_bit_counter	riscvsim/adaptive_predictor.c	/^update_two_bit_counter(int *ctr, int pred)$/;"	f	file:
update_two_bit_counter	riscvsim/bht.c	/^update_two_bit_counter(int *ctr, int pred)$/;"	f	file:
url	block_net.c	/^    char url[1024];$/;"	m	struct:BlockDeviceHTTP	file:
url	fs_net.c	/^    char *url;$/;"	m	struct:FSBaseURL	file:
url	fs_net.c	/^    char *url;$/;"	m	struct:__anon73	file:
used_addr	virtio.c	/^    virtio_phys_addr_t used_addr;$/;"	m	struct:__anon10	file:
user	fs_net.c	/^    char *user;$/;"	m	struct:FSBaseURL	file:
vaddr	riscv_cpu_priv.h	/^    target_ulong vaddr;$/;"	m	struct:__anon44
val_ones	pci.c	/^static const uint32_t val_ones[3] = { 0xff, 0xffff, 0xffffffff };$/;"	v	file:
valid	riscvsim/common_core_utils.h	/^    int valid;$/;"	m	struct:DataFWDLatch
valid	riscvsim/memory_controller_utils.h	/^    int valid;$/;"	m	struct:PendingMemAccessEntry
valid	riscvsim/ooo.h	/^    int valid;$/;"	m	struct:IssueQueueEntry
validate_param	riscvsim/sim_params_stats.c	/^validate_param(const char *param_name, int has_range, int min, int max,$/;"	f	file:
value	json.h	/^    JSONValue value;$/;"	m	struct:JSONProperty
vbe_index	vga.c	/^    uint16_t vbe_index;$/;"	m	struct:VGAState	file:
vbe_read	vga.c	/^static uint32_t vbe_read(void *opaque, uint32_t offset, int size_log2)$/;"	f	file:
vbe_regs	vga.c	/^    uint16_t vbe_regs[VBE_DISPI_INDEX_NB];$/;"	m	struct:VGAState	file:
vbe_write	vga.c	/^static void vbe_write(void *opaque, uint32_t offset,$/;"	f	file:
vdhcp_startaddr	slirp/slirp.h	/^    struct in_addr vdhcp_startaddr;$/;"	m	struct:Slirp	typeref:struct:Slirp::in_addr
vendor_id	virtio.c	/^    uint32_t vendor_id;$/;"	m	struct:VIRTIODevice	file:
version	fs.h	/^    uint32_t version;$/;"	m	struct:__anon55
version	riscv_machine.c	/^    uint32_t version;$/;"	m	struct:fdt_header	file:
vga_draw_glyph8	vga.c	/^static void vga_draw_glyph8(uint8_t *d, int linesize,$/;"	f	file:
vga_draw_glyph9	vga.c	/^static void vga_draw_glyph9(uint8_t *d, int linesize,$/;"	f	file:
vga_ioport_read	vga.c	/^static uint32_t vga_ioport_read(VGAState *s, uint32_t addr)$/;"	f	file:
vga_ioport_write	vga.c	/^static void vga_ioport_write(VGAState *s, uint32_t addr, uint32_t val)$/;"	f	file:
vga_ram	vga.c	/^    uint8_t *vga_ram; \/* 128K at 0xa0000 *\/$/;"	m	struct:VGAState	file:
vga_refresh	vga.c	/^static void vga_refresh(FBDevice *fb_dev,$/;"	f	file:
vga_text_refresh	vga.c	/^static void vga_text_refresh(VGAState *s,$/;"	f	file:
vhost_addr	slirp/slirp.h	/^    struct in_addr vhost_addr;$/;"	m	struct:Slirp	typeref:struct:Slirp::in_addr
virt_machine_end	machine.c	/^void virt_machine_end(VirtMachine *s)$/;"	f
virt_machine_end	machine.h	/^    void (*virt_machine_end)(VirtMachine *s);$/;"	m	struct:VirtMachineClass
virt_machine_find_class	machine.c	/^static const VirtMachineClass *virt_machine_find_class(const char *machine_name)$/;"	f	file:
virt_machine_free_config	machine.c	/^void virt_machine_free_config(VirtMachineParams *p)$/;"	f
virt_machine_get_sleep_duration	machine.h	/^    int (*virt_machine_get_sleep_duration)(VirtMachine *s, int delay);$/;"	m	struct:VirtMachineClass
virt_machine_get_sleep_duration	machine.h	/^static inline int virt_machine_get_sleep_duration(VirtMachine *s, int delay)$/;"	f
virt_machine_init	machine.c	/^VirtMachine *virt_machine_init(const VirtMachineParams *p)$/;"	f
virt_machine_init	machine.h	/^    VirtMachine *(*virt_machine_init)(const VirtMachineParams *p);$/;"	m	struct:VirtMachineClass
virt_machine_interp	machine.h	/^    void (*virt_machine_interp)(VirtMachine *s, int max_exec_cycle);$/;"	m	struct:VirtMachineClass
virt_machine_interp	machine.h	/^static inline void virt_machine_interp(VirtMachine *s, int max_exec_cycle)$/;"	f
virt_machine_list	machine.c	/^static const VirtMachineClass *virt_machine_list[] = {$/;"	v	file:
virt_machine_load_config_file	machine.c	/^void virt_machine_load_config_file(VirtMachineParams *p,$/;"	f
virt_machine_params	machine.h	/^    VirtMachineParams *virt_machine_params;$/;"	m	struct:VirtMachine
virt_machine_parse_config	machine.c	/^static int virt_machine_parse_config(VirtMachineParams *p,$/;"	f	file:
virt_machine_run	temu.c	/^void virt_machine_run(VirtMachine *m)$/;"	f
virt_machine_set_defaults	machine.c	/^void virt_machine_set_defaults(VirtMachineParams *p)$/;"	f
virt_machine_set_defaults	machine.h	/^    void (*virt_machine_set_defaults)(VirtMachineParams *p);$/;"	m	struct:VirtMachineClass
virtio_9p_init	virtio.c	/^VIRTIODevice *virtio_9p_init(VIRTIOBusDef *bus, FSDevice *fs,$/;"	f
virtio_9p_op_names	virtio.c	/^static const Virtio9POPName virtio_9p_op_names[] = {$/;"	v	file:
virtio_9p_open_cb	virtio.c	/^static void virtio_9p_open_cb(FSDevice *fs, FSQID *qid, int err,$/;"	f	file:
virtio_9p_open_reply	virtio.c	/^static void virtio_9p_open_reply(FSDevice *fs, FSQID *qid, int err,$/;"	f	file:
virtio_9p_recv_request	virtio.c	/^static int virtio_9p_recv_request(VIRTIODevice *s1, int queue_idx,$/;"	f	file:
virtio_9p_send_error	virtio.c	/^static void virtio_9p_send_error(VIRTIO9PDevice *s, int queue_idx,$/;"	f	file:
virtio_9p_send_reply	virtio.c	/^static void virtio_9p_send_reply(VIRTIO9PDevice *s, int queue_idx,$/;"	f	file:
virtio_add_pci_capability	virtio.c	/^static void virtio_add_pci_capability(VIRTIODevice *s, int cfg_type,$/;"	f	file:
virtio_block_init	virtio.c	/^VIRTIODevice *virtio_block_init(VIRTIOBusDef *bus, BlockDevice *bs)$/;"	f
virtio_block_recv_request	virtio.c	/^static int virtio_block_recv_request(VIRTIODevice *s, int queue_idx,$/;"	f	file:
virtio_block_req_cb	virtio.c	/^static void virtio_block_req_cb(void *opaque, int ret)$/;"	f	file:
virtio_block_req_end	virtio.c	/^static void virtio_block_req_end(VIRTIODevice *s, int ret)$/;"	f	file:
virtio_config_change_notify	virtio.c	/^static void virtio_config_change_notify(VIRTIODevice *s)$/;"	f	file:
virtio_config_read	virtio.c	/^static uint32_t virtio_config_read(VIRTIODevice *s, uint32_t offset,$/;"	f	file:
virtio_config_write	virtio.c	/^static void virtio_config_write(VIRTIODevice *s, uint32_t offset,$/;"	f	file:
virtio_console_can_write_data	virtio.c	/^BOOL virtio_console_can_write_data(VIRTIODevice *s)$/;"	f
virtio_console_get_write_len	virtio.c	/^int virtio_console_get_write_len(VIRTIODevice *s)$/;"	f
virtio_console_init	virtio.c	/^VIRTIODevice *virtio_console_init(VIRTIOBusDef *bus, CharacterDevice *cs)$/;"	f
virtio_console_recv_request	virtio.c	/^static int virtio_console_recv_request(VIRTIODevice *s, int queue_idx,$/;"	f	file:
virtio_console_resize_event	virtio.c	/^void virtio_console_resize_event(VIRTIODevice *s, int width, int height)$/;"	f
virtio_console_write_data	virtio.c	/^int virtio_console_write_data(VIRTIODevice *s, const uint8_t *buf, int buf_len)$/;"	f
virtio_consume_desc	virtio.c	/^static void virtio_consume_desc(VIRTIODevice *s,$/;"	f	file:
virtio_count	riscv_machine.c	/^    int virtio_count;$/;"	m	struct:RISCVMachine	file:
virtio_init	virtio.c	/^static void virtio_init(VIRTIODevice *s, VIRTIOBusDef *bus,$/;"	f	file:
virtio_input_config_write	virtio.c	/^static void virtio_input_config_write(VIRTIODevice *s)$/;"	f	file:
virtio_input_init	virtio.c	/^VIRTIODevice *virtio_input_init(VIRTIOBusDef *bus, VirtioInputTypeEnum type)$/;"	f
virtio_input_queue_event	virtio.c	/^static int virtio_input_queue_event(VIRTIODevice *s,$/;"	f	file:
virtio_input_recv_request	virtio.c	/^static int virtio_input_recv_request(VIRTIODevice *s, int queue_idx,$/;"	f	file:
virtio_input_send_key_event	virtio.c	/^int virtio_input_send_key_event(VIRTIODevice *s, BOOL is_down,$/;"	f
virtio_input_send_mouse_event	virtio.c	/^int virtio_input_send_mouse_event(VIRTIODevice *s, int dx, int dy, int dz,$/;"	f
virtio_memcpy_from_ram	virtio.c	/^static int virtio_memcpy_from_ram(VIRTIODevice *s, uint8_t *buf,$/;"	f	file:
virtio_memcpy_to_ram	virtio.c	/^static int virtio_memcpy_to_ram(VIRTIODevice *s, virtio_phys_addr_t addr, $/;"	f	file:
virtio_mmio_get_ram_ptr	virtio.c	/^static uint8_t *virtio_mmio_get_ram_ptr(VIRTIODevice *s, virtio_phys_addr_t paddr, BOOL is_rw)$/;"	f	file:
virtio_mmio_read	virtio.c	/^static uint32_t virtio_mmio_read(void *opaque, uint32_t offset, int size_log2)$/;"	f	file:
virtio_mmio_write	virtio.c	/^static void virtio_mmio_write(void *opaque, uint32_t offset,$/;"	f	file:
virtio_net_can_write_packet	virtio.c	/^static BOOL virtio_net_can_write_packet(EthernetDevice *es)$/;"	f	file:
virtio_net_init	virtio.c	/^VIRTIODevice *virtio_net_init(VIRTIOBusDef *bus, EthernetDevice *es)$/;"	f
virtio_net_recv_request	virtio.c	/^static int virtio_net_recv_request(VIRTIODevice *s, int queue_idx,$/;"	f	file:
virtio_net_set_carrier	virtio.c	/^static void virtio_net_set_carrier(EthernetDevice *es, BOOL carrier_state)$/;"	f	file:
virtio_net_write_packet	virtio.c	/^static void virtio_net_write_packet(EthernetDevice *es, const uint8_t *buf, int buf_len)$/;"	f	file:
virtio_pci_bar_set	virtio.c	/^static void virtio_pci_bar_set(void *opaque, int bar_num,$/;"	f	file:
virtio_pci_get_ram_ptr	virtio.c	/^static uint8_t *virtio_pci_get_ram_ptr(VIRTIODevice *s, virtio_phys_addr_t paddr, BOOL is_rw)$/;"	f	file:
virtio_pci_read	virtio.c	/^static uint32_t virtio_pci_read(void *opaque, uint32_t offset1, int size_log2)$/;"	f	file:
virtio_pci_write	virtio.c	/^static void virtio_pci_write(void *opaque, uint32_t offset1,$/;"	f	file:
virtio_phys_addr_t	virtio.h	/^typedef uint32_t virtio_phys_addr_t;$/;"	t
virtio_phys_addr_t	virtio.h	/^typedef uint64_t virtio_phys_addr_t;$/;"	t
virtio_read16	virtio.c	/^static uint16_t virtio_read16(VIRTIODevice *s, virtio_phys_addr_t addr)$/;"	f	file:
virtio_reset	virtio.c	/^static void virtio_reset(VIRTIODevice *s)$/;"	f	file:
virtio_set_debug	virtio.c	/^void virtio_set_debug(VIRTIODevice *s, int debug)$/;"	f
virtio_write16	virtio.c	/^static void virtio_write16(VIRTIODevice *s, virtio_phys_addr_t addr,$/;"	f	file:
virtio_write32	virtio.c	/^static void virtio_write32(VIRTIODevice *s, virtio_phys_addr_t addr,$/;"	f	file:
vm_add_cmdline	machine.c	/^void vm_add_cmdline(VirtMachineParams *p, const char *cmdline)$/;"	f
vm_error	machine.c	/^void __attribute__((format(printf, 1, 2))) vm_error(const char *fmt, ...)$/;"	f
vm_get_int	machine.c	/^int vm_get_int(JSONValue obj, const char *name, int *pval)$/;"	f
vm_get_int_opt	machine.c	/^int vm_get_int_opt(JSONValue obj, const char *name, int *pval, int def_val)$/;"	f
vm_get_str	machine.c	/^static int vm_get_str(JSONValue obj, const char *name, const char **pstr)$/;"	f	file:
vm_get_str2	machine.c	/^static int vm_get_str2(JSONValue obj, const char *name, const char **pstr,$/;"	f	file:
vm_get_str_opt	machine.c	/^static int vm_get_str_opt(JSONValue obj, const char *name, const char **pstr)$/;"	f	file:
vm_mouse_is_absolute	machine.h	/^    BOOL (*vm_mouse_is_absolute)(VirtMachine *s);$/;"	m	struct:VirtMachineClass
vm_mouse_is_absolute	machine.h	/^static inline BOOL vm_mouse_is_absolute(VirtMachine *s)$/;"	f
vm_params	machine.c	/^    VirtMachineParams *vm_params;$/;"	m	struct:__anon19	file:
vm_send_key_event	machine.h	/^    void (*vm_send_key_event)(VirtMachine *s1, BOOL is_down, uint16_t key_code);$/;"	m	struct:VirtMachineClass
vm_send_key_event	machine.h	/^static inline void vm_send_key_event(VirtMachine *s1, BOOL is_down, uint16_t key_code)$/;"	f
vm_send_mouse_event	machine.h	/^    void (*vm_send_mouse_event)(VirtMachine *s1, int dx, int dy, int dz,$/;"	m	struct:VirtMachineClass
vm_send_mouse_event	machine.h	/^static inline void vm_send_mouse_event(VirtMachine *s1, int dx, int dy, int dz,$/;"	f
vmc	machine.h	/^    const VirtMachineClass *vmc;$/;"	m	struct:VirtMachine
vmc	machine.h	/^    const VirtMachineClass *vmc;$/;"	m	struct:__anon32
vmmouse_handler	vmmouse.c	/^void vmmouse_handler(VMMouseState *s, uint32_t *regs)$/;"	f
vmmouse_init	vmmouse.c	/^VMMouseState *vmmouse_init(PS2MouseState *ps2_mouse)$/;"	f
vmmouse_is_absolute	vmmouse.c	/^BOOL vmmouse_is_absolute(VMMouseState *s)$/;"	f
vmmouse_send_mouse_event	vmmouse.c	/^void vmmouse_send_mouse_event(VMMouseState *s, int x, int y, int dz,$/;"	f
vnameserver_addr	slirp/slirp.h	/^    struct in_addr vnameserver_addr;$/;"	m	struct:Slirp	typeref:struct:Slirp::in_addr
vnetwork_addr	slirp/slirp.h	/^    struct in_addr vnetwork_addr;$/;"	m	struct:Slirp	typeref:struct:Slirp::in_addr
vnetwork_mask	slirp/slirp.h	/^    struct in_addr vnetwork_mask;$/;"	m	struct:Slirp	typeref:struct:Slirp::in_addr
ways	riscvsim/btb.h	/^    int ways;          \/* Number of ways in each set *\/$/;"	m	struct:BranchTargetBuffer
width	machine.h	/^    int width, height; \/* graphic width & height *\/$/;"	m	struct:__anon32
width	machine.h	/^    int width;$/;"	m	struct:FBDevice
winsock_cleanup	slirp/slirp.c	/^static void winsock_cleanup(void)$/;"	f	file:
word_bits	riscvsim/cache.h	/^    int word_bits;$/;"	m	struct:Cache
words_per_cache_line	riscvsim/sim_params_stats.h	/^    int words_per_cache_line;$/;"	m	struct:SimParams
wptr	ps2.c	/^    int rptr, wptr, count;$/;"	m	struct:__anon42	file:
write_allocate_handler	riscvsim/cache.c	/^write_allocate_handler(const Cache *c, target_ulong paddr, int bytes_to_write,$/;"	f	file:
write_async	virtio.h	/^    int (*write_async)(BlockDevice *bs,$/;"	m	struct:BlockDevice
write_cb	fs_wget.c	/^    DecryptFileCB *write_cb;$/;"	m	struct:DecryptFileState	file:
write_cb	fs_wget.c	/^    WGetWriteCallback *write_cb;$/;"	m	struct:XHRState	file:
write_cb	riscvsim/dramsim_wrapper.h	/^    TransactionCompleteCB *write_cb;$/;"	m	class:dramsim_wrapper
write_cmd	pckbd.c	/^    uint8_t write_cmd; \/* if non zero, write data to port 60 is expected *\/$/;"	m	struct:KBDState	file:
write_cmd	ps2.c	/^    int32_t write_cmd;$/;"	m	struct:__anon43	file:
write_complete	riscvsim/dramsim_wrapper.cpp	/^dramsim_wrapper::write_complete(unsigned id, uint64_t addr,$/;"	f	class:dramsim_wrapper
write_complete	riscvsim/memory_controller.c	/^write_complete(MemoryController *m, target_ulong addr)$/;"	f	file:
write_data	virtio.h	/^    void (*write_data)(void *opaque, const uint8_t *buf, int len);$/;"	m	struct:__anon52
write_func	iomem.h	/^    DeviceWriteFunc *write_func;$/;"	m	struct:__anon2
write_latency	riscvsim/cache.h	/^    int write_latency;$/;"	m	struct:Cache
write_miss_cnt	riscvsim/cache.h	/^    uint64_t write_miss_cnt;$/;"	m	struct:CacheStats
write_no_allocate_handler	riscvsim/cache.c	/^write_no_allocate_handler(const Cache *c, target_ulong paddr,$/;"	f	file:
write_packet	virtio.h	/^    void (*write_packet)(EthernetDevice *net,$/;"	m	struct:EthernetDevice
write_size	virtio.c	/^    int write_size;$/;"	m	struct:__anon12	file:
write_stats_to_stats_display_shm	riscvsim/common_core_utils.c	/^write_stats_to_stats_display_shm(RISCVCPUState *s)$/;"	f
writeback_handler	riscvsim/cache.c	/^writeback_handler(const Cache *c, target_ulong paddr, int bytes_to_write,$/;"	f	file:
writeback_victim_evict_handler	riscvsim/cache.c	/^writeback_victim_evict_handler(const Cache *c, CacheBlk *pBlk, int set, int way,$/;"	f	file:
writethrough_handler	riscvsim/cache.c	/^writethrough_handler(const Cache *c, target_ulong paddr, int bytes_to_write,$/;"	f	file:
writethrough_victim_evict_handler	riscvsim/cache.c	/^writethrough_victim_evict_handler(const Cache *c, CacheBlk *pBlk, int set,$/;"	f	file:
x	slirp/tftp.h	/^  } x;$/;"	m	struct:tftp_t	typeref:union:tftp_t::__anon45
xchg	slirp/tcp_subr.c	136;"	d	file:
xchg	slirp/tcp_subr.c	139;"	d	file:
xglue	cutils.h	35;"	d
xhr	fs_net.c	/^    XHRState *xhr;$/;"	m	struct:FSOpenInfo	file:
xhr_list	fs_wget.c	/^static struct list_head xhr_list; \/* list of XHRState.link *\/$/;"	v	typeref:struct:list_head	file:
xhr_state	fs_net.c	/^    struct CmdXHRState *xhr_state;$/;"	m	struct:__anon67	typeref:struct:__anon67::CmdXHRState	file:
xor_aliasing_func	riscvsim/adaptive_predictor.c	/^xor_aliasing_func(AdaptivePredictor *a, uint32_t hr, target_ulong pc)$/;"	f	file:
xsimglue	riscvsim/riscv_ins_execute.c	43;"	d	file:
zero_ethaddr	slirp/slirp.c	/^static const uint8_t zero_ethaddr[6] = { 0, 0, 0, 0, 0, 0 };$/;"	v	file:
~dramsim_wrapper	riscvsim/dramsim_wrapper.cpp	/^dramsim_wrapper::~dramsim_wrapper()$/;"	f	class:dramsim_wrapper
