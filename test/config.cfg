/* VM configuration file */
{
	version: 1,
	machine: "riscv64",
	memory_size: 1024,                       /* Use riscv32 for 32-bit */
	bios: "./bare.bin",
	//bios: "marss-riscv-images/riscv64-unknown-linux-gnu/bbl64.bin",
	kernel: "marss-riscv-images/riscv64-unknown-linux-gnu/kernel-riscv64.bin",
	cmdline: "console=hvc0 root=/dev/vda rw",
	drive0: { file: "marss-riscv-images/riscv64-unknown-linux-gnu/riscv64.img" },
    fs0: { tag: "/dev/root", file: "./" },
	eth0: { driver: "user" },

	/* MARSS-RISCV config options */
	core_name: "default-riscv-core",        /* Name of the simulated RISC-V CPU */
	core_type: "duowen",                    /* Core type: In-order (incore) or Out-of-order(oocore) */

	/** In-order core parameters **/
	num_cpu_stages: 5,                      /* Number of pipeline stages: 5, 6 */

	/** Out-of-order core parameters **/
	iq_size: 16,                            /* Number of integer issue-queue entries */
	iq_issue_ports: 3,                      /* Number of issue ports on integer issue-queue */
	rob_size: 64,                           /* Number of ROB entries */
	rob_commit_ports:4,                     /* Number of ROB commit ports */
	lsq_size: 16,                           /* Number of LSQ entries */ 

	/** Tracing and Logging Parameters **/
	sim_stats_path: ".",         	        /* Path to the directory to save simulation stats, NOTE: Absolute path is needed and no `/` is required at the end of the directory path. */
	sim_trace_file: "simtrace.txt",         /* Path to the file to save commit trace */

	/** Execution Unit Parameters **/
	num_alu_stages: 1,                      /* Number of stages for integer ALU unit */
	alu_stage_latency: "1",                 /* Latencies for all integer ALU stages, comma separated. */			

	num_mul_stages: 1,                      /* Number of stages for integer MUL unit */			
	mul_stage_latency: "1",                 /* Latencies for all integer MUL stages, comma separated. eg. "1,2,1" */

	num_div_stages: 1,                      /* Number of stages for integer DIV unit */
	div_stage_latency: "8",                 /* Latencies for all integer DIV stages, comma separated. eg. "1,2,1" */

	num_fpu_alu_stages: 1,                  /* Number of stages for floating point ALU unit */
	fpu_alu_stage_latency: "1",             /* Latencies for all floating point ALU stages, comma separated. eg. "1,2,1" */

	num_fpu_fma_stages: 1,                  /* Number of stages for floating point fused multiply add unit */
	fpu_fma_stage_latency: "4",             /* Latencies for all floating point fused multiply add stages, comma separated. eg. "1,2,1" */

	/** BPU Parameters **/
	enable_bpu: "true",                     /* Enable branch prediction unit: true, false */
	btb_size: 32,                           /* Number of entries in BTB, must be power of 2 */
	btb_ways: 1,                            /* Number of BTB ways */
	bht_size: 256,                          /* Number of entries in BHT, must be power of 2 */
	btb_eviction_policy: "lru",             /* Eviction policy for BTB: lru, random */
	bpu_type: "bimodal",                    /* Type of predictor: bimodal, adaptive */
	bpu_ght_size: 1,                        /* Number of entries in Global history table, must be power of 2 */
	bpu_pht_size: 1,                        /* Number of entries in Pattern history table, must be power of 2 */
	bpu_history_bits: 2,                    /* Number of bits in history register */
	bpu_aliasing_func_type: "xor",          /* Aliasing function for adaptive predictor: and, xor, none
	                                               This can be used to construct Gshare(xor) and Gselect(and) predictors
	                                               when bpu_ght_size and bpu_pht_size are set to 1 */
	ras_size: 6,                            /* Number of entries in Return address stack, 0 means RAS is disabled */

	/** DRAM Parameters **/
	tlb_size: 32,                           /* Number of entries in instruction TLB, load TLB and store TLB */
	dram_burst_size: 32,                    /* DRAM burst size in bytes (Cache line size if caches are enabled) */
	mem_bus_access_rtt_latency: 4,          /* Round trip delay of memory bus in CPU cycles */
	tCL: 4,                                 /* Number of CPU cycles to read the data from a active DRAM row and drive it on the memory bus */
	tRCD: 4,                                /* Number of CPU cycles required between opening a row of memory and accessing columns within it */
	tRP: 4,                                 /* Number of CPU cycles required between issuing the precharge command and opening the next row */
	row_buffer_write_latency: 1,            /* Number of CPU cycles required to write the data in the already active row */

	/** DRAMSim2 Parameters **/
	dramsim_ini_file: "DRAMSim2/ini/DDR2_micron_16M_8b_x8_sg3E.ini", /* Path to DRAMSim2 ini file */
	dramsim_system_ini_file: "DRAMSim2/system.ini.example",          /* Path to DRAMSim2 system ini file */
	dramsim_stats_dir: ".",                                          /* Path to directory to store DRAMSim2 stats */

	/** Cache Parameters **/
	enable_l1_caches: "true",               /* Enable L1 caches: true, false */

	icache: {
		size: 16,                         /* Size of icache in KB */
		ways: 4,                          /* Number of ways in icache */
		read_latency: 2,                  /* Probe latency for icache in CPU cycles */
		eviction: "lru",                  /* Eviction policy for icache: lru, random */
	},

	dcache: {
		size: 16,                        /* Size of dcache in KB */
		ways: 4,                         /* Number of ways in dcache */
		read_latency: 2,                 /* Read latency for dcache in CPU cycles */
		write_latency: 1,                /* Write latency for dcache in CPU cycles */
		eviction: "lru",                 /* Eviction policy for dcache: lru, random */
	},

	enable_l2_cache: "true",             /* Enable l2_shared_cache: true, false */

	l2_shared_cache: {
		size: 512,                      /* Size of l2_shared_cache in KB */
		ways: 8,                        /* Number of ways in l2_shared_cache */
		read_latency: 3,                /* Read latency for l2_shared_cache in CPU cycles */
		write_latency: 3,               /* Write latency for l2_shared_cache in CPU cycles */
		eviction: "lru",                /* Eviction policy for l2_shared_cache: lru, random */
	},

	cache_allocate_on_write_miss: "true",   /* Allocate entry in cache on write miss: true, false  */
	cache_write_policy: "writeback",        /* Cache write policy: writeback, writethrough */
	words_per_cache_line: 8,                /* Number of words in each cache line
	                                           (used to determine cache-line-size = words_per_cache_line * 'XLEN' bits) */

   /**Duowen Microarchitecture**/
   issue_width: 4,
}
